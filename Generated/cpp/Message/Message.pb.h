// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message/Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2fMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2fMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2fMessage_2eproto;
namespace proto {
class BrainTellServerMysqlDBCompatibleData;
struct BrainTellServerMysqlDBCompatibleDataDefaultTypeInternal;
extern BrainTellServerMysqlDBCompatibleDataDefaultTypeInternal _BrainTellServerMysqlDBCompatibleData_default_instance_;
class DailyStatisticsMetaInfoV1;
struct DailyStatisticsMetaInfoV1DefaultTypeInternal;
extern DailyStatisticsMetaInfoV1DefaultTypeInternal _DailyStatisticsMetaInfoV1_default_instance_;
class GroupPermissionAclV1;
struct GroupPermissionAclV1DefaultTypeInternal;
extern GroupPermissionAclV1DefaultTypeInternal _GroupPermissionAclV1_default_instance_;
class MetaInfoBase;
struct MetaInfoBaseDefaultTypeInternal;
extern MetaInfoBaseDefaultTypeInternal _MetaInfoBase_default_instance_;
class NodeNParent;
struct NodeNParentDefaultTypeInternal;
extern NodeNParentDefaultTypeInternal _NodeNParent_default_instance_;
class PermissionAceV1;
struct PermissionAceV1DefaultTypeInternal;
extern PermissionAceV1DefaultTypeInternal _PermissionAceV1_default_instance_;
class PermissionGroupAceV1;
struct PermissionGroupAceV1DefaultTypeInternal;
extern PermissionGroupAceV1DefaultTypeInternal _PermissionGroupAceV1_default_instance_;
class PermissionGroupAclV1;
struct PermissionGroupAclV1DefaultTypeInternal;
extern PermissionGroupAclV1DefaultTypeInternal _PermissionGroupAclV1_default_instance_;
class PermissionGroupMetaInfoV1;
struct PermissionGroupMetaInfoV1DefaultTypeInternal;
extern PermissionGroupMetaInfoV1DefaultTypeInternal _PermissionGroupMetaInfoV1_default_instance_;
class PermissionMetaInfoV1;
struct PermissionMetaInfoV1DefaultTypeInternal;
extern PermissionMetaInfoV1DefaultTypeInternal _PermissionMetaInfoV1_default_instance_;
class ProjectMetaInfoV1;
struct ProjectMetaInfoV1DefaultTypeInternal;
extern ProjectMetaInfoV1DefaultTypeInternal _ProjectMetaInfoV1_default_instance_;
class RequestMetaInfoV1;
struct RequestMetaInfoV1DefaultTypeInternal;
extern RequestMetaInfoV1DefaultTypeInternal _RequestMetaInfoV1_default_instance_;
class ResponseMetaInfoV1;
struct ResponseMetaInfoV1DefaultTypeInternal;
extern ResponseMetaInfoV1DefaultTypeInternal _ResponseMetaInfoV1_default_instance_;
class SwcAttachmentAnoMetaInfoV1;
struct SwcAttachmentAnoMetaInfoV1DefaultTypeInternal;
extern SwcAttachmentAnoMetaInfoV1DefaultTypeInternal _SwcAttachmentAnoMetaInfoV1_default_instance_;
class SwcAttachmentAnoV1;
struct SwcAttachmentAnoV1DefaultTypeInternal;
extern SwcAttachmentAnoV1DefaultTypeInternal _SwcAttachmentAnoV1_default_instance_;
class SwcAttachmentApoMetaInfoV1;
struct SwcAttachmentApoMetaInfoV1DefaultTypeInternal;
extern SwcAttachmentApoMetaInfoV1DefaultTypeInternal _SwcAttachmentApoMetaInfoV1_default_instance_;
class SwcAttachmentApoV1;
struct SwcAttachmentApoV1DefaultTypeInternal;
extern SwcAttachmentApoV1DefaultTypeInternal _SwcAttachmentApoV1_default_instance_;
class SwcDataV1;
struct SwcDataV1DefaultTypeInternal;
extern SwcDataV1DefaultTypeInternal _SwcDataV1_default_instance_;
class SwcIncrementOperationListV1;
struct SwcIncrementOperationListV1DefaultTypeInternal;
extern SwcIncrementOperationListV1DefaultTypeInternal _SwcIncrementOperationListV1_default_instance_;
class SwcIncrementOperationMetaInfoV1;
struct SwcIncrementOperationMetaInfoV1DefaultTypeInternal;
extern SwcIncrementOperationMetaInfoV1DefaultTypeInternal _SwcIncrementOperationMetaInfoV1_default_instance_;
class SwcIncrementOperationV1;
struct SwcIncrementOperationV1DefaultTypeInternal;
extern SwcIncrementOperationV1DefaultTypeInternal _SwcIncrementOperationV1_default_instance_;
class SwcMetaInfoV1;
struct SwcMetaInfoV1DefaultTypeInternal;
extern SwcMetaInfoV1DefaultTypeInternal _SwcMetaInfoV1_default_instance_;
class SwcNodeDataV1;
struct SwcNodeDataV1DefaultTypeInternal;
extern SwcNodeDataV1DefaultTypeInternal _SwcNodeDataV1_default_instance_;
class SwcNodeInternalDataV1;
struct SwcNodeInternalDataV1DefaultTypeInternal;
extern SwcNodeInternalDataV1DefaultTypeInternal _SwcNodeInternalDataV1_default_instance_;
class SwcSnapshotMetaInfoV1;
struct SwcSnapshotMetaInfoV1DefaultTypeInternal;
extern SwcSnapshotMetaInfoV1DefaultTypeInternal _SwcSnapshotMetaInfoV1_default_instance_;
class SwcUuidName;
struct SwcUuidNameDefaultTypeInternal;
extern SwcUuidNameDefaultTypeInternal _SwcUuidName_default_instance_;
class UserMetaInfoV1;
struct UserMetaInfoV1DefaultTypeInternal;
extern UserMetaInfoV1DefaultTypeInternal _UserMetaInfoV1_default_instance_;
class UserPermissionAclV1;
struct UserPermissionAclV1DefaultTypeInternal;
extern UserPermissionAclV1DefaultTypeInternal _UserPermissionAclV1_default_instance_;
class UserVerifyInfoV1;
struct UserVerifyInfoV1DefaultTypeInternal;
extern UserVerifyInfoV1DefaultTypeInternal _UserVerifyInfoV1_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BrainTellServerMysqlDBCompatibleData* Arena::CreateMaybeMessage<::proto::BrainTellServerMysqlDBCompatibleData>(Arena*);
template<> ::proto::DailyStatisticsMetaInfoV1* Arena::CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(Arena*);
template<> ::proto::GroupPermissionAclV1* Arena::CreateMaybeMessage<::proto::GroupPermissionAclV1>(Arena*);
template<> ::proto::MetaInfoBase* Arena::CreateMaybeMessage<::proto::MetaInfoBase>(Arena*);
template<> ::proto::NodeNParent* Arena::CreateMaybeMessage<::proto::NodeNParent>(Arena*);
template<> ::proto::PermissionAceV1* Arena::CreateMaybeMessage<::proto::PermissionAceV1>(Arena*);
template<> ::proto::PermissionGroupAceV1* Arena::CreateMaybeMessage<::proto::PermissionGroupAceV1>(Arena*);
template<> ::proto::PermissionGroupAclV1* Arena::CreateMaybeMessage<::proto::PermissionGroupAclV1>(Arena*);
template<> ::proto::PermissionGroupMetaInfoV1* Arena::CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(Arena*);
template<> ::proto::PermissionMetaInfoV1* Arena::CreateMaybeMessage<::proto::PermissionMetaInfoV1>(Arena*);
template<> ::proto::ProjectMetaInfoV1* Arena::CreateMaybeMessage<::proto::ProjectMetaInfoV1>(Arena*);
template<> ::proto::RequestMetaInfoV1* Arena::CreateMaybeMessage<::proto::RequestMetaInfoV1>(Arena*);
template<> ::proto::ResponseMetaInfoV1* Arena::CreateMaybeMessage<::proto::ResponseMetaInfoV1>(Arena*);
template<> ::proto::SwcAttachmentAnoMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcAttachmentAnoMetaInfoV1>(Arena*);
template<> ::proto::SwcAttachmentAnoV1* Arena::CreateMaybeMessage<::proto::SwcAttachmentAnoV1>(Arena*);
template<> ::proto::SwcAttachmentApoMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcAttachmentApoMetaInfoV1>(Arena*);
template<> ::proto::SwcAttachmentApoV1* Arena::CreateMaybeMessage<::proto::SwcAttachmentApoV1>(Arena*);
template<> ::proto::SwcDataV1* Arena::CreateMaybeMessage<::proto::SwcDataV1>(Arena*);
template<> ::proto::SwcIncrementOperationListV1* Arena::CreateMaybeMessage<::proto::SwcIncrementOperationListV1>(Arena*);
template<> ::proto::SwcIncrementOperationMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcIncrementOperationMetaInfoV1>(Arena*);
template<> ::proto::SwcIncrementOperationV1* Arena::CreateMaybeMessage<::proto::SwcIncrementOperationV1>(Arena*);
template<> ::proto::SwcMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcMetaInfoV1>(Arena*);
template<> ::proto::SwcNodeDataV1* Arena::CreateMaybeMessage<::proto::SwcNodeDataV1>(Arena*);
template<> ::proto::SwcNodeInternalDataV1* Arena::CreateMaybeMessage<::proto::SwcNodeInternalDataV1>(Arena*);
template<> ::proto::SwcSnapshotMetaInfoV1* Arena::CreateMaybeMessage<::proto::SwcSnapshotMetaInfoV1>(Arena*);
template<> ::proto::SwcUuidName* Arena::CreateMaybeMessage<::proto::SwcUuidName>(Arena*);
template<> ::proto::UserMetaInfoV1* Arena::CreateMaybeMessage<::proto::UserMetaInfoV1>(Arena*);
template<> ::proto::UserPermissionAclV1* Arena::CreateMaybeMessage<::proto::UserPermissionAclV1>(Arena*);
template<> ::proto::UserVerifyInfoV1* Arena::CreateMaybeMessage<::proto::UserVerifyInfoV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum IncrementOperationV1 : int {
  Unknown = 0,
  Create = 1,
  Delete = 2,
  Update = 3,
  UpdateNParent = 4,
  ClearAll = 5,
  IncrementOperationV1_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  IncrementOperationV1_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool IncrementOperationV1_IsValid(int value);
constexpr IncrementOperationV1 IncrementOperationV1_MIN = Unknown;
constexpr IncrementOperationV1 IncrementOperationV1_MAX = ClearAll;
constexpr int IncrementOperationV1_ARRAYSIZE = IncrementOperationV1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IncrementOperationV1_descriptor();
template<typename T>
inline const std::string& IncrementOperationV1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IncrementOperationV1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IncrementOperationV1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IncrementOperationV1_descriptor(), enum_t_value);
}
inline bool IncrementOperationV1_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IncrementOperationV1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IncrementOperationV1>(
    IncrementOperationV1_descriptor(), name, value);
}
// ===================================================================

class MetaInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.MetaInfoBase) */ {
 public:
  inline MetaInfoBase() : MetaInfoBase(nullptr) {}
  ~MetaInfoBase() override;
  explicit PROTOBUF_CONSTEXPR MetaInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaInfoBase(const MetaInfoBase& from);
  MetaInfoBase(MetaInfoBase&& from) noexcept
    : MetaInfoBase() {
    *this = ::std::move(from);
  }

  inline MetaInfoBase& operator=(const MetaInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaInfoBase& operator=(MetaInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetaInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaInfoBase* internal_default_instance() {
    return reinterpret_cast<const MetaInfoBase*>(
               &_MetaInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetaInfoBase& a, MetaInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetaInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetaInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetaInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MetaInfoBase& from) {
    MetaInfoBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.MetaInfoBase";
  }
  protected:
  explicit MetaInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDataAccessModelVersionFieldNumber = 2,
    kUuidFieldNumber = 3,
  };
  // string _id = 1;
  void clear__id();
  const std::string& _id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set__id(ArgT0&& arg0, ArgT... args);
  std::string* mutable__id();
  PROTOBUF_NODISCARD std::string* release__id();
  void set_allocated__id(std::string* _id);
  private:
  const std::string& _internal__id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set__id(const std::string& value);
  std::string* _internal_mutable__id();
  public:

  // string DataAccessModelVersion = 2;
  void clear_dataaccessmodelversion();
  const std::string& dataaccessmodelversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dataaccessmodelversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dataaccessmodelversion();
  PROTOBUF_NODISCARD std::string* release_dataaccessmodelversion();
  void set_allocated_dataaccessmodelversion(std::string* dataaccessmodelversion);
  private:
  const std::string& _internal_dataaccessmodelversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataaccessmodelversion(const std::string& value);
  std::string* _internal_mutable_dataaccessmodelversion();
  public:

  // string Uuid = 3;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:proto.MetaInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr _id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataaccessmodelversion_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class BrainTellServerMysqlDBCompatibleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BrainTellServerMysqlDBCompatibleData) */ {
 public:
  inline BrainTellServerMysqlDBCompatibleData() : BrainTellServerMysqlDBCompatibleData(nullptr) {}
  ~BrainTellServerMysqlDBCompatibleData() override;
  explicit PROTOBUF_CONSTEXPR BrainTellServerMysqlDBCompatibleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BrainTellServerMysqlDBCompatibleData(const BrainTellServerMysqlDBCompatibleData& from);
  BrainTellServerMysqlDBCompatibleData(BrainTellServerMysqlDBCompatibleData&& from) noexcept
    : BrainTellServerMysqlDBCompatibleData() {
    *this = ::std::move(from);
  }

  inline BrainTellServerMysqlDBCompatibleData& operator=(const BrainTellServerMysqlDBCompatibleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrainTellServerMysqlDBCompatibleData& operator=(BrainTellServerMysqlDBCompatibleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BrainTellServerMysqlDBCompatibleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BrainTellServerMysqlDBCompatibleData* internal_default_instance() {
    return reinterpret_cast<const BrainTellServerMysqlDBCompatibleData*>(
               &_BrainTellServerMysqlDBCompatibleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BrainTellServerMysqlDBCompatibleData& a, BrainTellServerMysqlDBCompatibleData& b) {
    a.Swap(&b);
  }
  inline void Swap(BrainTellServerMysqlDBCompatibleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrainTellServerMysqlDBCompatibleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BrainTellServerMysqlDBCompatibleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BrainTellServerMysqlDBCompatibleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BrainTellServerMysqlDBCompatibleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BrainTellServerMysqlDBCompatibleData& from) {
    BrainTellServerMysqlDBCompatibleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrainTellServerMysqlDBCompatibleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BrainTellServerMysqlDBCompatibleData";
  }
  protected:
  explicit BrainTellServerMysqlDBCompatibleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kNickNameFieldNumber = 2,
    kAppKeyFieldNumber = 4,
    kScoreFieldNumber = 3,
    kIsDeletedFieldNumber = 5,
  };
  // string Email = 1;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string NickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string AppKey = 4;
  void clear_appkey();
  const std::string& appkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appkey();
  PROTOBUF_NODISCARD std::string* release_appkey();
  void set_allocated_appkey(std::string* appkey);
  private:
  const std::string& _internal_appkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appkey(const std::string& value);
  std::string* _internal_mutable_appkey();
  public:

  // int32 Score = 3;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // int32 IsDeleted = 5;
  void clear_isdeleted();
  int32_t isdeleted() const;
  void set_isdeleted(int32_t value);
  private:
  int32_t _internal_isdeleted() const;
  void _internal_set_isdeleted(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BrainTellServerMysqlDBCompatibleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appkey_;
    int32_t score_;
    int32_t isdeleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class UserMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserMetaInfoV1) */ {
 public:
  inline UserMetaInfoV1() : UserMetaInfoV1(nullptr) {}
  ~UserMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR UserMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMetaInfoV1(const UserMetaInfoV1& from);
  UserMetaInfoV1(UserMetaInfoV1&& from) noexcept
    : UserMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline UserMetaInfoV1& operator=(const UserMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMetaInfoV1& operator=(UserMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const UserMetaInfoV1*>(
               &_UserMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserMetaInfoV1& a, UserMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserMetaInfoV1& from) {
    UserMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserMetaInfoV1";
  }
  protected:
  explicit UserMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kHeadPhotoBinDataFieldNumber = 6,
    kPermissionGroupUuidFieldNumber = 7,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
    kCompatibleDataFieldNumber = 9,
    kUserIdFieldNumber = 8,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string Description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bytes HeadPhotoBinData = 6;
  void clear_headphotobindata();
  const std::string& headphotobindata() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headphotobindata(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headphotobindata();
  PROTOBUF_NODISCARD std::string* release_headphotobindata();
  void set_allocated_headphotobindata(std::string* headphotobindata);
  private:
  const std::string& _internal_headphotobindata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headphotobindata(const std::string& value);
  std::string* _internal_mutable_headphotobindata();
  public:

  // string PermissionGroupUuid = 7;
  void clear_permissiongroupuuid();
  const std::string& permissiongroupuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permissiongroupuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permissiongroupuuid();
  PROTOBUF_NODISCARD std::string* release_permissiongroupuuid();
  void set_allocated_permissiongroupuuid(std::string* permissiongroupuuid);
  private:
  const std::string& _internal_permissiongroupuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permissiongroupuuid(const std::string& value);
  std::string* _internal_mutable_permissiongroupuuid();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 5;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .proto.BrainTellServerMysqlDBCompatibleData CompatibleData = 9;
  bool has_compatibledata() const;
  private:
  bool _internal_has_compatibledata() const;
  public:
  void clear_compatibledata();
  const ::proto::BrainTellServerMysqlDBCompatibleData& compatibledata() const;
  PROTOBUF_NODISCARD ::proto::BrainTellServerMysqlDBCompatibleData* release_compatibledata();
  ::proto::BrainTellServerMysqlDBCompatibleData* mutable_compatibledata();
  void set_allocated_compatibledata(::proto::BrainTellServerMysqlDBCompatibleData* compatibledata);
  private:
  const ::proto::BrainTellServerMysqlDBCompatibleData& _internal_compatibledata() const;
  ::proto::BrainTellServerMysqlDBCompatibleData* _internal_mutable_compatibledata();
  public:
  void unsafe_arena_set_allocated_compatibledata(
      ::proto::BrainTellServerMysqlDBCompatibleData* compatibledata);
  ::proto::BrainTellServerMysqlDBCompatibleData* unsafe_arena_release_compatibledata();

  // int32 UserId = 8;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UserMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headphotobindata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permissiongroupuuid_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::proto::BrainTellServerMysqlDBCompatibleData* compatibledata_;
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionGroupAceV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionGroupAceV1) */ {
 public:
  inline PermissionGroupAceV1() : PermissionGroupAceV1(nullptr) {}
  ~PermissionGroupAceV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionGroupAceV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionGroupAceV1(const PermissionGroupAceV1& from);
  PermissionGroupAceV1(PermissionGroupAceV1&& from) noexcept
    : PermissionGroupAceV1() {
    *this = ::std::move(from);
  }

  inline PermissionGroupAceV1& operator=(const PermissionGroupAceV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionGroupAceV1& operator=(PermissionGroupAceV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionGroupAceV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionGroupAceV1* internal_default_instance() {
    return reinterpret_cast<const PermissionGroupAceV1*>(
               &_PermissionGroupAceV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PermissionGroupAceV1& a, PermissionGroupAceV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionGroupAceV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionGroupAceV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionGroupAceV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionGroupAceV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionGroupAceV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionGroupAceV1& from) {
    PermissionGroupAceV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionGroupAceV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionGroupAceV1";
  }
  protected:
  explicit PermissionGroupAceV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllPermissionGroupManagementPermissionFieldNumber = 1,
    kAllUserManagementPermissionFieldNumber = 2,
    kAllProjectManagementPermissionFieldNumber = 3,
    kAllSwcManagementPermissionFieldNumber = 4,
    kAllDailyStatisticsManagementPermissionFieldNumber = 5,
    kCreateProjectPermissionFieldNumber = 6,
    kCreateSwcPermissionFieldNumber = 7,
  };
  // bool AllPermissionGroupManagementPermission = 1;
  void clear_allpermissiongroupmanagementpermission();
  bool allpermissiongroupmanagementpermission() const;
  void set_allpermissiongroupmanagementpermission(bool value);
  private:
  bool _internal_allpermissiongroupmanagementpermission() const;
  void _internal_set_allpermissiongroupmanagementpermission(bool value);
  public:

  // bool AllUserManagementPermission = 2;
  void clear_allusermanagementpermission();
  bool allusermanagementpermission() const;
  void set_allusermanagementpermission(bool value);
  private:
  bool _internal_allusermanagementpermission() const;
  void _internal_set_allusermanagementpermission(bool value);
  public:

  // bool AllProjectManagementPermission = 3;
  void clear_allprojectmanagementpermission();
  bool allprojectmanagementpermission() const;
  void set_allprojectmanagementpermission(bool value);
  private:
  bool _internal_allprojectmanagementpermission() const;
  void _internal_set_allprojectmanagementpermission(bool value);
  public:

  // bool AllSwcManagementPermission = 4;
  void clear_allswcmanagementpermission();
  bool allswcmanagementpermission() const;
  void set_allswcmanagementpermission(bool value);
  private:
  bool _internal_allswcmanagementpermission() const;
  void _internal_set_allswcmanagementpermission(bool value);
  public:

  // bool AllDailyStatisticsManagementPermission = 5;
  void clear_alldailystatisticsmanagementpermission();
  bool alldailystatisticsmanagementpermission() const;
  void set_alldailystatisticsmanagementpermission(bool value);
  private:
  bool _internal_alldailystatisticsmanagementpermission() const;
  void _internal_set_alldailystatisticsmanagementpermission(bool value);
  public:

  // bool CreateProjectPermission = 6;
  void clear_createprojectpermission();
  bool createprojectpermission() const;
  void set_createprojectpermission(bool value);
  private:
  bool _internal_createprojectpermission() const;
  void _internal_set_createprojectpermission(bool value);
  public:

  // bool CreateSwcPermission = 7;
  void clear_createswcpermission();
  bool createswcpermission() const;
  void set_createswcpermission(bool value);
  private:
  bool _internal_createswcpermission() const;
  void _internal_set_createswcpermission(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PermissionGroupAceV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool allpermissiongroupmanagementpermission_;
    bool allusermanagementpermission_;
    bool allprojectmanagementpermission_;
    bool allswcmanagementpermission_;
    bool alldailystatisticsmanagementpermission_;
    bool createprojectpermission_;
    bool createswcpermission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionGroupAclV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionGroupAclV1) */ {
 public:
  inline PermissionGroupAclV1() : PermissionGroupAclV1(nullptr) {}
  ~PermissionGroupAclV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionGroupAclV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionGroupAclV1(const PermissionGroupAclV1& from);
  PermissionGroupAclV1(PermissionGroupAclV1&& from) noexcept
    : PermissionGroupAclV1() {
    *this = ::std::move(from);
  }

  inline PermissionGroupAclV1& operator=(const PermissionGroupAclV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionGroupAclV1& operator=(PermissionGroupAclV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionGroupAclV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionGroupAclV1* internal_default_instance() {
    return reinterpret_cast<const PermissionGroupAclV1*>(
               &_PermissionGroupAclV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PermissionGroupAclV1& a, PermissionGroupAclV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionGroupAclV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionGroupAclV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionGroupAclV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionGroupAclV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionGroupAclV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionGroupAclV1& from) {
    PermissionGroupAclV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionGroupAclV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionGroupAclV1";
  }
  protected:
  explicit PermissionGroupAclV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionGroupUuidFieldNumber = 1,
    kPermissionGroupAceFieldNumber = 2,
  };
  // string PermissionGroupUuid = 1;
  void clear_permissiongroupuuid();
  const std::string& permissiongroupuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permissiongroupuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permissiongroupuuid();
  PROTOBUF_NODISCARD std::string* release_permissiongroupuuid();
  void set_allocated_permissiongroupuuid(std::string* permissiongroupuuid);
  private:
  const std::string& _internal_permissiongroupuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permissiongroupuuid(const std::string& value);
  std::string* _internal_mutable_permissiongroupuuid();
  public:

  // .proto.PermissionGroupAceV1 PermissionGroupAce = 2;
  bool has_permissiongroupace() const;
  private:
  bool _internal_has_permissiongroupace() const;
  public:
  void clear_permissiongroupace();
  const ::proto::PermissionGroupAceV1& permissiongroupace() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupAceV1* release_permissiongroupace();
  ::proto::PermissionGroupAceV1* mutable_permissiongroupace();
  void set_allocated_permissiongroupace(::proto::PermissionGroupAceV1* permissiongroupace);
  private:
  const ::proto::PermissionGroupAceV1& _internal_permissiongroupace() const;
  ::proto::PermissionGroupAceV1* _internal_mutable_permissiongroupace();
  public:
  void unsafe_arena_set_allocated_permissiongroupace(
      ::proto::PermissionGroupAceV1* permissiongroupace);
  ::proto::PermissionGroupAceV1* unsafe_arena_release_permissiongroupace();

  // @@protoc_insertion_point(class_scope:proto.PermissionGroupAclV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permissiongroupuuid_;
    ::proto::PermissionGroupAceV1* permissiongroupace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionAceV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionAceV1) */ {
 public:
  inline PermissionAceV1() : PermissionAceV1(nullptr) {}
  ~PermissionAceV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionAceV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionAceV1(const PermissionAceV1& from);
  PermissionAceV1(PermissionAceV1&& from) noexcept
    : PermissionAceV1() {
    *this = ::std::move(from);
  }

  inline PermissionAceV1& operator=(const PermissionAceV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionAceV1& operator=(PermissionAceV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionAceV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionAceV1* internal_default_instance() {
    return reinterpret_cast<const PermissionAceV1*>(
               &_PermissionAceV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PermissionAceV1& a, PermissionAceV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionAceV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionAceV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionAceV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionAceV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionAceV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionAceV1& from) {
    PermissionAceV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionAceV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionAceV1";
  }
  protected:
  explicit PermissionAceV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritePermissionModifyProjectFieldNumber = 1,
    kWritePermissionDeleteProjectFieldNumber = 2,
    kReadPerimissionQueryProjectFieldNumber = 3,
    kWritePermissionUpdateSwcFieldNumber = 4,
    kWritePermissionDeleteSwcFieldNumber = 5,
    kReadPerimissionQuerySwcFieldNumber = 6,
    kWritePermissionAddSwcDataFieldNumber = 7,
    kWritePermissionModifySwcDataFieldNumber = 8,
    kWritePermissionDeleteSwcDataFieldNumber = 9,
    kReadPerimissionQuerySwcDataFieldNumber = 10,
    kCreateSnapshotAndIncrementPermissionFieldNumber = 11,
    kDeleteSnapshotAndIncrementPermissionFieldNumber = 12,
    kQuerySnapshotAndIncrementPermissionFieldNumber = 13,
    kCreateAnoAttachmentPermissionFieldNumber = 14,
    kDeleteAnoAttachmentPermissionFieldNumber = 15,
    kUpdateAnoAttachmentPermissionFieldNumber = 16,
    kQueryAnoAttachmentPermissionFieldNumber = 17,
    kCreateApoAttachmentPermissionFieldNumber = 18,
    kDeleteApoAttachmentPermissionFieldNumber = 19,
    kUpdateApoAttachmentPermissionFieldNumber = 20,
    kQueryApoAttachmentPermissionFieldNumber = 21,
    kCreateSwcAttachmentPermissionFieldNumber = 22,
    kDeleteSwcAttachmentPermissionFieldNumber = 23,
    kUpdateSwcAttachmentPermissionFieldNumber = 24,
    kQuerySwcAttachmentPermissionFieldNumber = 25,
  };
  // bool WritePermissionModifyProject = 1;
  void clear_writepermissionmodifyproject();
  bool writepermissionmodifyproject() const;
  void set_writepermissionmodifyproject(bool value);
  private:
  bool _internal_writepermissionmodifyproject() const;
  void _internal_set_writepermissionmodifyproject(bool value);
  public:

  // bool WritePermissionDeleteProject = 2;
  void clear_writepermissiondeleteproject();
  bool writepermissiondeleteproject() const;
  void set_writepermissiondeleteproject(bool value);
  private:
  bool _internal_writepermissiondeleteproject() const;
  void _internal_set_writepermissiondeleteproject(bool value);
  public:

  // bool ReadPerimissionQueryProject = 3;
  void clear_readperimissionqueryproject();
  bool readperimissionqueryproject() const;
  void set_readperimissionqueryproject(bool value);
  private:
  bool _internal_readperimissionqueryproject() const;
  void _internal_set_readperimissionqueryproject(bool value);
  public:

  // bool WritePermissionUpdateSwc = 4;
  void clear_writepermissionupdateswc();
  bool writepermissionupdateswc() const;
  void set_writepermissionupdateswc(bool value);
  private:
  bool _internal_writepermissionupdateswc() const;
  void _internal_set_writepermissionupdateswc(bool value);
  public:

  // bool WritePermissionDeleteSwc = 5;
  void clear_writepermissiondeleteswc();
  bool writepermissiondeleteswc() const;
  void set_writepermissiondeleteswc(bool value);
  private:
  bool _internal_writepermissiondeleteswc() const;
  void _internal_set_writepermissiondeleteswc(bool value);
  public:

  // bool ReadPerimissionQuerySwc = 6;
  void clear_readperimissionqueryswc();
  bool readperimissionqueryswc() const;
  void set_readperimissionqueryswc(bool value);
  private:
  bool _internal_readperimissionqueryswc() const;
  void _internal_set_readperimissionqueryswc(bool value);
  public:

  // bool WritePermissionAddSwcData = 7;
  void clear_writepermissionaddswcdata();
  bool writepermissionaddswcdata() const;
  void set_writepermissionaddswcdata(bool value);
  private:
  bool _internal_writepermissionaddswcdata() const;
  void _internal_set_writepermissionaddswcdata(bool value);
  public:

  // bool WritePermissionModifySwcData = 8;
  void clear_writepermissionmodifyswcdata();
  bool writepermissionmodifyswcdata() const;
  void set_writepermissionmodifyswcdata(bool value);
  private:
  bool _internal_writepermissionmodifyswcdata() const;
  void _internal_set_writepermissionmodifyswcdata(bool value);
  public:

  // bool WritePermissionDeleteSwcData = 9;
  void clear_writepermissiondeleteswcdata();
  bool writepermissiondeleteswcdata() const;
  void set_writepermissiondeleteswcdata(bool value);
  private:
  bool _internal_writepermissiondeleteswcdata() const;
  void _internal_set_writepermissiondeleteswcdata(bool value);
  public:

  // bool ReadPerimissionQuerySwcData = 10;
  void clear_readperimissionqueryswcdata();
  bool readperimissionqueryswcdata() const;
  void set_readperimissionqueryswcdata(bool value);
  private:
  bool _internal_readperimissionqueryswcdata() const;
  void _internal_set_readperimissionqueryswcdata(bool value);
  public:

  // bool CreateSnapshotAndIncrementPermission = 11;
  void clear_createsnapshotandincrementpermission();
  bool createsnapshotandincrementpermission() const;
  void set_createsnapshotandincrementpermission(bool value);
  private:
  bool _internal_createsnapshotandincrementpermission() const;
  void _internal_set_createsnapshotandincrementpermission(bool value);
  public:

  // bool DeleteSnapshotAndIncrementPermission = 12;
  void clear_deletesnapshotandincrementpermission();
  bool deletesnapshotandincrementpermission() const;
  void set_deletesnapshotandincrementpermission(bool value);
  private:
  bool _internal_deletesnapshotandincrementpermission() const;
  void _internal_set_deletesnapshotandincrementpermission(bool value);
  public:

  // bool QuerySnapshotAndIncrementPermission = 13;
  void clear_querysnapshotandincrementpermission();
  bool querysnapshotandincrementpermission() const;
  void set_querysnapshotandincrementpermission(bool value);
  private:
  bool _internal_querysnapshotandincrementpermission() const;
  void _internal_set_querysnapshotandincrementpermission(bool value);
  public:

  // bool CreateAnoAttachmentPermission = 14;
  void clear_createanoattachmentpermission();
  bool createanoattachmentpermission() const;
  void set_createanoattachmentpermission(bool value);
  private:
  bool _internal_createanoattachmentpermission() const;
  void _internal_set_createanoattachmentpermission(bool value);
  public:

  // bool DeleteAnoAttachmentPermission = 15;
  void clear_deleteanoattachmentpermission();
  bool deleteanoattachmentpermission() const;
  void set_deleteanoattachmentpermission(bool value);
  private:
  bool _internal_deleteanoattachmentpermission() const;
  void _internal_set_deleteanoattachmentpermission(bool value);
  public:

  // bool UpdateAnoAttachmentPermission = 16;
  void clear_updateanoattachmentpermission();
  bool updateanoattachmentpermission() const;
  void set_updateanoattachmentpermission(bool value);
  private:
  bool _internal_updateanoattachmentpermission() const;
  void _internal_set_updateanoattachmentpermission(bool value);
  public:

  // bool QueryAnoAttachmentPermission = 17;
  void clear_queryanoattachmentpermission();
  bool queryanoattachmentpermission() const;
  void set_queryanoattachmentpermission(bool value);
  private:
  bool _internal_queryanoattachmentpermission() const;
  void _internal_set_queryanoattachmentpermission(bool value);
  public:

  // bool CreateApoAttachmentPermission = 18;
  void clear_createapoattachmentpermission();
  bool createapoattachmentpermission() const;
  void set_createapoattachmentpermission(bool value);
  private:
  bool _internal_createapoattachmentpermission() const;
  void _internal_set_createapoattachmentpermission(bool value);
  public:

  // bool DeleteApoAttachmentPermission = 19;
  void clear_deleteapoattachmentpermission();
  bool deleteapoattachmentpermission() const;
  void set_deleteapoattachmentpermission(bool value);
  private:
  bool _internal_deleteapoattachmentpermission() const;
  void _internal_set_deleteapoattachmentpermission(bool value);
  public:

  // bool UpdateApoAttachmentPermission = 20;
  void clear_updateapoattachmentpermission();
  bool updateapoattachmentpermission() const;
  void set_updateapoattachmentpermission(bool value);
  private:
  bool _internal_updateapoattachmentpermission() const;
  void _internal_set_updateapoattachmentpermission(bool value);
  public:

  // bool QueryApoAttachmentPermission = 21;
  void clear_queryapoattachmentpermission();
  bool queryapoattachmentpermission() const;
  void set_queryapoattachmentpermission(bool value);
  private:
  bool _internal_queryapoattachmentpermission() const;
  void _internal_set_queryapoattachmentpermission(bool value);
  public:

  // bool CreateSwcAttachmentPermission = 22;
  void clear_createswcattachmentpermission();
  bool createswcattachmentpermission() const;
  void set_createswcattachmentpermission(bool value);
  private:
  bool _internal_createswcattachmentpermission() const;
  void _internal_set_createswcattachmentpermission(bool value);
  public:

  // bool DeleteSwcAttachmentPermission = 23;
  void clear_deleteswcattachmentpermission();
  bool deleteswcattachmentpermission() const;
  void set_deleteswcattachmentpermission(bool value);
  private:
  bool _internal_deleteswcattachmentpermission() const;
  void _internal_set_deleteswcattachmentpermission(bool value);
  public:

  // bool UpdateSwcAttachmentPermission = 24;
  void clear_updateswcattachmentpermission();
  bool updateswcattachmentpermission() const;
  void set_updateswcattachmentpermission(bool value);
  private:
  bool _internal_updateswcattachmentpermission() const;
  void _internal_set_updateswcattachmentpermission(bool value);
  public:

  // bool QuerySwcAttachmentPermission = 25;
  void clear_queryswcattachmentpermission();
  bool queryswcattachmentpermission() const;
  void set_queryswcattachmentpermission(bool value);
  private:
  bool _internal_queryswcattachmentpermission() const;
  void _internal_set_queryswcattachmentpermission(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PermissionAceV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool writepermissionmodifyproject_;
    bool writepermissiondeleteproject_;
    bool readperimissionqueryproject_;
    bool writepermissionupdateswc_;
    bool writepermissiondeleteswc_;
    bool readperimissionqueryswc_;
    bool writepermissionaddswcdata_;
    bool writepermissionmodifyswcdata_;
    bool writepermissiondeleteswcdata_;
    bool readperimissionqueryswcdata_;
    bool createsnapshotandincrementpermission_;
    bool deletesnapshotandincrementpermission_;
    bool querysnapshotandincrementpermission_;
    bool createanoattachmentpermission_;
    bool deleteanoattachmentpermission_;
    bool updateanoattachmentpermission_;
    bool queryanoattachmentpermission_;
    bool createapoattachmentpermission_;
    bool deleteapoattachmentpermission_;
    bool updateapoattachmentpermission_;
    bool queryapoattachmentpermission_;
    bool createswcattachmentpermission_;
    bool deleteswcattachmentpermission_;
    bool updateswcattachmentpermission_;
    bool queryswcattachmentpermission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class UserPermissionAclV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserPermissionAclV1) */ {
 public:
  inline UserPermissionAclV1() : UserPermissionAclV1(nullptr) {}
  ~UserPermissionAclV1() override;
  explicit PROTOBUF_CONSTEXPR UserPermissionAclV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserPermissionAclV1(const UserPermissionAclV1& from);
  UserPermissionAclV1(UserPermissionAclV1&& from) noexcept
    : UserPermissionAclV1() {
    *this = ::std::move(from);
  }

  inline UserPermissionAclV1& operator=(const UserPermissionAclV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPermissionAclV1& operator=(UserPermissionAclV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserPermissionAclV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserPermissionAclV1* internal_default_instance() {
    return reinterpret_cast<const UserPermissionAclV1*>(
               &_UserPermissionAclV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserPermissionAclV1& a, UserPermissionAclV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPermissionAclV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPermissionAclV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserPermissionAclV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserPermissionAclV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserPermissionAclV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserPermissionAclV1& from) {
    UserPermissionAclV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPermissionAclV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserPermissionAclV1";
  }
  protected:
  explicit UserPermissionAclV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserUuidFieldNumber = 1,
    kAceFieldNumber = 2,
  };
  // string UserUuid = 1;
  void clear_useruuid();
  const std::string& useruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_useruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_useruuid();
  PROTOBUF_NODISCARD std::string* release_useruuid();
  void set_allocated_useruuid(std::string* useruuid);
  private:
  const std::string& _internal_useruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_useruuid(const std::string& value);
  std::string* _internal_mutable_useruuid();
  public:

  // .proto.PermissionAceV1 Ace = 2;
  bool has_ace() const;
  private:
  bool _internal_has_ace() const;
  public:
  void clear_ace();
  const ::proto::PermissionAceV1& ace() const;
  PROTOBUF_NODISCARD ::proto::PermissionAceV1* release_ace();
  ::proto::PermissionAceV1* mutable_ace();
  void set_allocated_ace(::proto::PermissionAceV1* ace);
  private:
  const ::proto::PermissionAceV1& _internal_ace() const;
  ::proto::PermissionAceV1* _internal_mutable_ace();
  public:
  void unsafe_arena_set_allocated_ace(
      ::proto::PermissionAceV1* ace);
  ::proto::PermissionAceV1* unsafe_arena_release_ace();

  // @@protoc_insertion_point(class_scope:proto.UserPermissionAclV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useruuid_;
    ::proto::PermissionAceV1* ace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class GroupPermissionAclV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GroupPermissionAclV1) */ {
 public:
  inline GroupPermissionAclV1() : GroupPermissionAclV1(nullptr) {}
  ~GroupPermissionAclV1() override;
  explicit PROTOBUF_CONSTEXPR GroupPermissionAclV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupPermissionAclV1(const GroupPermissionAclV1& from);
  GroupPermissionAclV1(GroupPermissionAclV1&& from) noexcept
    : GroupPermissionAclV1() {
    *this = ::std::move(from);
  }

  inline GroupPermissionAclV1& operator=(const GroupPermissionAclV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupPermissionAclV1& operator=(GroupPermissionAclV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupPermissionAclV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupPermissionAclV1* internal_default_instance() {
    return reinterpret_cast<const GroupPermissionAclV1*>(
               &_GroupPermissionAclV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GroupPermissionAclV1& a, GroupPermissionAclV1& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupPermissionAclV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupPermissionAclV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupPermissionAclV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupPermissionAclV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupPermissionAclV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupPermissionAclV1& from) {
    GroupPermissionAclV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupPermissionAclV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GroupPermissionAclV1";
  }
  protected:
  explicit GroupPermissionAclV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUuidFieldNumber = 1,
    kAceFieldNumber = 2,
  };
  // string GroupUuid = 1;
  void clear_groupuuid();
  const std::string& groupuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_groupuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_groupuuid();
  PROTOBUF_NODISCARD std::string* release_groupuuid();
  void set_allocated_groupuuid(std::string* groupuuid);
  private:
  const std::string& _internal_groupuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupuuid(const std::string& value);
  std::string* _internal_mutable_groupuuid();
  public:

  // .proto.PermissionAceV1 Ace = 2;
  bool has_ace() const;
  private:
  bool _internal_has_ace() const;
  public:
  void clear_ace();
  const ::proto::PermissionAceV1& ace() const;
  PROTOBUF_NODISCARD ::proto::PermissionAceV1* release_ace();
  ::proto::PermissionAceV1* mutable_ace();
  void set_allocated_ace(::proto::PermissionAceV1* ace);
  private:
  const ::proto::PermissionAceV1& _internal_ace() const;
  ::proto::PermissionAceV1* _internal_mutable_ace();
  public:
  void unsafe_arena_set_allocated_ace(
      ::proto::PermissionAceV1* ace);
  ::proto::PermissionAceV1* unsafe_arena_release_ace();

  // @@protoc_insertion_point(class_scope:proto.GroupPermissionAclV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr groupuuid_;
    ::proto::PermissionAceV1* ace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionMetaInfoV1) */ {
 public:
  inline PermissionMetaInfoV1() : PermissionMetaInfoV1(nullptr) {}
  ~PermissionMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionMetaInfoV1(const PermissionMetaInfoV1& from);
  PermissionMetaInfoV1(PermissionMetaInfoV1&& from) noexcept
    : PermissionMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline PermissionMetaInfoV1& operator=(const PermissionMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionMetaInfoV1& operator=(PermissionMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const PermissionMetaInfoV1*>(
               &_PermissionMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PermissionMetaInfoV1& a, PermissionMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionMetaInfoV1& from) {
    PermissionMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionMetaInfoV1";
  }
  protected:
  explicit PermissionMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kGroupsFieldNumber = 3,
    kOwnerFieldNumber = 1,
  };
  // repeated .proto.UserPermissionAclV1 Users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::proto::UserPermissionAclV1* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserPermissionAclV1 >*
      mutable_users();
  private:
  const ::proto::UserPermissionAclV1& _internal_users(int index) const;
  ::proto::UserPermissionAclV1* _internal_add_users();
  public:
  const ::proto::UserPermissionAclV1& users(int index) const;
  ::proto::UserPermissionAclV1* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserPermissionAclV1 >&
      users() const;

  // repeated .proto.GroupPermissionAclV1 Groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::proto::GroupPermissionAclV1* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GroupPermissionAclV1 >*
      mutable_groups();
  private:
  const ::proto::GroupPermissionAclV1& _internal_groups(int index) const;
  ::proto::GroupPermissionAclV1* _internal_add_groups();
  public:
  const ::proto::GroupPermissionAclV1& groups(int index) const;
  ::proto::GroupPermissionAclV1* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GroupPermissionAclV1 >&
      groups() const;

  // .proto.UserPermissionAclV1 Owner = 1;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const ::proto::UserPermissionAclV1& owner() const;
  PROTOBUF_NODISCARD ::proto::UserPermissionAclV1* release_owner();
  ::proto::UserPermissionAclV1* mutable_owner();
  void set_allocated_owner(::proto::UserPermissionAclV1* owner);
  private:
  const ::proto::UserPermissionAclV1& _internal_owner() const;
  ::proto::UserPermissionAclV1* _internal_mutable_owner();
  public:
  void unsafe_arena_set_allocated_owner(
      ::proto::UserPermissionAclV1* owner);
  ::proto::UserPermissionAclV1* unsafe_arena_release_owner();

  // @@protoc_insertion_point(class_scope:proto.PermissionMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserPermissionAclV1 > users_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GroupPermissionAclV1 > groups_;
    ::proto::UserPermissionAclV1* owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class PermissionGroupMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PermissionGroupMetaInfoV1) */ {
 public:
  inline PermissionGroupMetaInfoV1() : PermissionGroupMetaInfoV1(nullptr) {}
  ~PermissionGroupMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR PermissionGroupMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionGroupMetaInfoV1(const PermissionGroupMetaInfoV1& from);
  PermissionGroupMetaInfoV1(PermissionGroupMetaInfoV1&& from) noexcept
    : PermissionGroupMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline PermissionGroupMetaInfoV1& operator=(const PermissionGroupMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionGroupMetaInfoV1& operator=(PermissionGroupMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionGroupMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionGroupMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const PermissionGroupMetaInfoV1*>(
               &_PermissionGroupMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PermissionGroupMetaInfoV1& a, PermissionGroupMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionGroupMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionGroupMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermissionGroupMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermissionGroupMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionGroupMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermissionGroupMetaInfoV1& from) {
    PermissionGroupMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionGroupMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PermissionGroupMetaInfoV1";
  }
  protected:
  explicit PermissionGroupMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kBaseFieldNumber = 1,
    kAceFieldNumber = 4,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .proto.PermissionGroupAceV1 Ace = 4;
  bool has_ace() const;
  private:
  bool _internal_has_ace() const;
  public:
  void clear_ace();
  const ::proto::PermissionGroupAceV1& ace() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupAceV1* release_ace();
  ::proto::PermissionGroupAceV1* mutable_ace();
  void set_allocated_ace(::proto::PermissionGroupAceV1* ace);
  private:
  const ::proto::PermissionGroupAceV1& _internal_ace() const;
  ::proto::PermissionGroupAceV1* _internal_mutable_ace();
  public:
  void unsafe_arena_set_allocated_ace(
      ::proto::PermissionGroupAceV1* ace);
  ::proto::PermissionGroupAceV1* unsafe_arena_release_ace();

  // @@protoc_insertion_point(class_scope:proto.PermissionGroupMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::proto::MetaInfoBase* base_;
    ::proto::PermissionGroupAceV1* ace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class ProjectMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ProjectMetaInfoV1) */ {
 public:
  inline ProjectMetaInfoV1() : ProjectMetaInfoV1(nullptr) {}
  ~ProjectMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR ProjectMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectMetaInfoV1(const ProjectMetaInfoV1& from);
  ProjectMetaInfoV1(ProjectMetaInfoV1&& from) noexcept
    : ProjectMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline ProjectMetaInfoV1& operator=(const ProjectMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectMetaInfoV1& operator=(ProjectMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const ProjectMetaInfoV1*>(
               &_ProjectMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProjectMetaInfoV1& a, ProjectMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectMetaInfoV1& from) {
    ProjectMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ProjectMetaInfoV1";
  }
  protected:
  explicit ProjectMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcListFieldNumber = 7,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kWorkModeFieldNumber = 8,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 5,
    kLastModifiedTimeFieldNumber = 6,
    kPermissionFieldNumber = 9,
  };
  // repeated string SwcList = 7;
  int swclist_size() const;
  private:
  int _internal_swclist_size() const;
  public:
  void clear_swclist();
  const std::string& swclist(int index) const;
  std::string* mutable_swclist(int index);
  void set_swclist(int index, const std::string& value);
  void set_swclist(int index, std::string&& value);
  void set_swclist(int index, const char* value);
  void set_swclist(int index, const char* value, size_t size);
  std::string* add_swclist();
  void add_swclist(const std::string& value);
  void add_swclist(std::string&& value);
  void add_swclist(const char* value);
  void add_swclist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& swclist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_swclist();
  private:
  const std::string& _internal_swclist(int index) const;
  std::string* _internal_add_swclist();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string WorkMode = 8;
  void clear_workmode();
  const std::string& workmode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workmode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workmode();
  PROTOBUF_NODISCARD std::string* release_workmode();
  void set_allocated_workmode(std::string* workmode);
  private:
  const std::string& _internal_workmode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workmode(const std::string& value);
  std::string* _internal_mutable_workmode();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 5;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 6;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // .proto.PermissionMetaInfoV1 Permission = 9;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  const ::proto::PermissionMetaInfoV1& permission() const;
  PROTOBUF_NODISCARD ::proto::PermissionMetaInfoV1* release_permission();
  ::proto::PermissionMetaInfoV1* mutable_permission();
  void set_allocated_permission(::proto::PermissionMetaInfoV1* permission);
  private:
  const ::proto::PermissionMetaInfoV1& _internal_permission() const;
  ::proto::PermissionMetaInfoV1* _internal_mutable_permission();
  public:
  void unsafe_arena_set_allocated_permission(
      ::proto::PermissionMetaInfoV1* permission);
  ::proto::PermissionMetaInfoV1* unsafe_arena_release_permission();

  // @@protoc_insertion_point(class_scope:proto.ProjectMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> swclist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workmode_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    ::proto::PermissionMetaInfoV1* permission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcSnapshotMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcSnapshotMetaInfoV1) */ {
 public:
  inline SwcSnapshotMetaInfoV1() : SwcSnapshotMetaInfoV1(nullptr) {}
  ~SwcSnapshotMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcSnapshotMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcSnapshotMetaInfoV1(const SwcSnapshotMetaInfoV1& from);
  SwcSnapshotMetaInfoV1(SwcSnapshotMetaInfoV1&& from) noexcept
    : SwcSnapshotMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcSnapshotMetaInfoV1& operator=(const SwcSnapshotMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcSnapshotMetaInfoV1& operator=(SwcSnapshotMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcSnapshotMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcSnapshotMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcSnapshotMetaInfoV1*>(
               &_SwcSnapshotMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SwcSnapshotMetaInfoV1& a, SwcSnapshotMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcSnapshotMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcSnapshotMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcSnapshotMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcSnapshotMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcSnapshotMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcSnapshotMetaInfoV1& from) {
    SwcSnapshotMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcSnapshotMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcSnapshotMetaInfoV1";
  }
  protected:
  explicit SwcSnapshotMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcSnapshotCollectionNameFieldNumber = 2,
    kCreatorFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
  };
  // string SwcSnapshotCollectionName = 2;
  void clear_swcsnapshotcollectionname();
  const std::string& swcsnapshotcollectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcsnapshotcollectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcsnapshotcollectionname();
  PROTOBUF_NODISCARD std::string* release_swcsnapshotcollectionname();
  void set_allocated_swcsnapshotcollectionname(std::string* swcsnapshotcollectionname);
  private:
  const std::string& _internal_swcsnapshotcollectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcsnapshotcollectionname(const std::string& value);
  std::string* _internal_mutable_swcsnapshotcollectionname();
  public:

  // string Creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 3;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // @@protoc_insertion_point(class_scope:proto.SwcSnapshotMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcsnapshotcollectionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcIncrementOperationMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcIncrementOperationMetaInfoV1) */ {
 public:
  inline SwcIncrementOperationMetaInfoV1() : SwcIncrementOperationMetaInfoV1(nullptr) {}
  ~SwcIncrementOperationMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcIncrementOperationMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcIncrementOperationMetaInfoV1(const SwcIncrementOperationMetaInfoV1& from);
  SwcIncrementOperationMetaInfoV1(SwcIncrementOperationMetaInfoV1&& from) noexcept
    : SwcIncrementOperationMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcIncrementOperationMetaInfoV1& operator=(const SwcIncrementOperationMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcIncrementOperationMetaInfoV1& operator=(SwcIncrementOperationMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcIncrementOperationMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcIncrementOperationMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcIncrementOperationMetaInfoV1*>(
               &_SwcIncrementOperationMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SwcIncrementOperationMetaInfoV1& a, SwcIncrementOperationMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcIncrementOperationMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcIncrementOperationMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcIncrementOperationMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcIncrementOperationMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcIncrementOperationMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcIncrementOperationMetaInfoV1& from) {
    SwcIncrementOperationMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcIncrementOperationMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcIncrementOperationMetaInfoV1";
  }
  protected:
  explicit SwcIncrementOperationMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncrementOperationCollectionNameFieldNumber = 2,
    kStartSnapshotFieldNumber = 3,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 4,
  };
  // string IncrementOperationCollectionName = 2;
  void clear_incrementoperationcollectionname();
  const std::string& incrementoperationcollectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_incrementoperationcollectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_incrementoperationcollectionname();
  PROTOBUF_NODISCARD std::string* release_incrementoperationcollectionname();
  void set_allocated_incrementoperationcollectionname(std::string* incrementoperationcollectionname);
  private:
  const std::string& _internal_incrementoperationcollectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incrementoperationcollectionname(const std::string& value);
  std::string* _internal_mutable_incrementoperationcollectionname();
  public:

  // string StartSnapshot = 3;
  void clear_startsnapshot();
  const std::string& startsnapshot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_startsnapshot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_startsnapshot();
  PROTOBUF_NODISCARD std::string* release_startsnapshot();
  void set_allocated_startsnapshot(std::string* startsnapshot);
  private:
  const std::string& _internal_startsnapshot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_startsnapshot(const std::string& value);
  std::string* _internal_mutable_startsnapshot();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 4;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // @@protoc_insertion_point(class_scope:proto.SwcIncrementOperationMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incrementoperationcollectionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startsnapshot_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcIncrementOperationV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcIncrementOperationV1) */ {
 public:
  inline SwcIncrementOperationV1() : SwcIncrementOperationV1(nullptr) {}
  ~SwcIncrementOperationV1() override;
  explicit PROTOBUF_CONSTEXPR SwcIncrementOperationV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcIncrementOperationV1(const SwcIncrementOperationV1& from);
  SwcIncrementOperationV1(SwcIncrementOperationV1&& from) noexcept
    : SwcIncrementOperationV1() {
    *this = ::std::move(from);
  }

  inline SwcIncrementOperationV1& operator=(const SwcIncrementOperationV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcIncrementOperationV1& operator=(SwcIncrementOperationV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcIncrementOperationV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcIncrementOperationV1* internal_default_instance() {
    return reinterpret_cast<const SwcIncrementOperationV1*>(
               &_SwcIncrementOperationV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SwcIncrementOperationV1& a, SwcIncrementOperationV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcIncrementOperationV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcIncrementOperationV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcIncrementOperationV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcIncrementOperationV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcIncrementOperationV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcIncrementOperationV1& from) {
    SwcIncrementOperationV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcIncrementOperationV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcIncrementOperationV1";
  }
  protected:
  explicit SwcIncrementOperationV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
    kSwcDataFieldNumber = 4,
    kIncrementOperationFieldNumber = 3,
  };
  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 2;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .proto.SwcDataV1 SwcData = 4;
  bool has_swcdata() const;
  private:
  bool _internal_has_swcdata() const;
  public:
  void clear_swcdata();
  const ::proto::SwcDataV1& swcdata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcdata();
  ::proto::SwcDataV1* mutable_swcdata();
  void set_allocated_swcdata(::proto::SwcDataV1* swcdata);
  private:
  const ::proto::SwcDataV1& _internal_swcdata() const;
  ::proto::SwcDataV1* _internal_mutable_swcdata();
  public:
  void unsafe_arena_set_allocated_swcdata(
      ::proto::SwcDataV1* swcdata);
  ::proto::SwcDataV1* unsafe_arena_release_swcdata();

  // .proto.IncrementOperationV1 IncrementOperation = 3;
  void clear_incrementoperation();
  ::proto::IncrementOperationV1 incrementoperation() const;
  void set_incrementoperation(::proto::IncrementOperationV1 value);
  private:
  ::proto::IncrementOperationV1 _internal_incrementoperation() const;
  void _internal_set_incrementoperation(::proto::IncrementOperationV1 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcIncrementOperationV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::proto::SwcDataV1* swcdata_;
    int incrementoperation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcIncrementOperationListV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcIncrementOperationListV1) */ {
 public:
  inline SwcIncrementOperationListV1() : SwcIncrementOperationListV1(nullptr) {}
  ~SwcIncrementOperationListV1() override;
  explicit PROTOBUF_CONSTEXPR SwcIncrementOperationListV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcIncrementOperationListV1(const SwcIncrementOperationListV1& from);
  SwcIncrementOperationListV1(SwcIncrementOperationListV1&& from) noexcept
    : SwcIncrementOperationListV1() {
    *this = ::std::move(from);
  }

  inline SwcIncrementOperationListV1& operator=(const SwcIncrementOperationListV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcIncrementOperationListV1& operator=(SwcIncrementOperationListV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcIncrementOperationListV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcIncrementOperationListV1* internal_default_instance() {
    return reinterpret_cast<const SwcIncrementOperationListV1*>(
               &_SwcIncrementOperationListV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SwcIncrementOperationListV1& a, SwcIncrementOperationListV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcIncrementOperationListV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcIncrementOperationListV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcIncrementOperationListV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcIncrementOperationListV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcIncrementOperationListV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcIncrementOperationListV1& from) {
    SwcIncrementOperationListV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcIncrementOperationListV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcIncrementOperationListV1";
  }
  protected:
  explicit SwcIncrementOperationListV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcIncrementOperationFieldNumber = 1,
  };
  // repeated .proto.SwcIncrementOperationV1 SwcIncrementOperation = 1;
  int swcincrementoperation_size() const;
  private:
  int _internal_swcincrementoperation_size() const;
  public:
  void clear_swcincrementoperation();
  ::proto::SwcIncrementOperationV1* mutable_swcincrementoperation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationV1 >*
      mutable_swcincrementoperation();
  private:
  const ::proto::SwcIncrementOperationV1& _internal_swcincrementoperation(int index) const;
  ::proto::SwcIncrementOperationV1* _internal_add_swcincrementoperation();
  public:
  const ::proto::SwcIncrementOperationV1& swcincrementoperation(int index) const;
  ::proto::SwcIncrementOperationV1* add_swcincrementoperation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationV1 >&
      swcincrementoperation() const;

  // @@protoc_insertion_point(class_scope:proto.SwcIncrementOperationListV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationV1 > swcincrementoperation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcAttachmentAnoMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcAttachmentAnoMetaInfoV1) */ {
 public:
  inline SwcAttachmentAnoMetaInfoV1() : SwcAttachmentAnoMetaInfoV1(nullptr) {}
  ~SwcAttachmentAnoMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcAttachmentAnoMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcAttachmentAnoMetaInfoV1(const SwcAttachmentAnoMetaInfoV1& from);
  SwcAttachmentAnoMetaInfoV1(SwcAttachmentAnoMetaInfoV1&& from) noexcept
    : SwcAttachmentAnoMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcAttachmentAnoMetaInfoV1& operator=(const SwcAttachmentAnoMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcAttachmentAnoMetaInfoV1& operator=(SwcAttachmentAnoMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcAttachmentAnoMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcAttachmentAnoMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcAttachmentAnoMetaInfoV1*>(
               &_SwcAttachmentAnoMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SwcAttachmentAnoMetaInfoV1& a, SwcAttachmentAnoMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcAttachmentAnoMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcAttachmentAnoMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcAttachmentAnoMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcAttachmentAnoMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcAttachmentAnoMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcAttachmentAnoMetaInfoV1& from) {
    SwcAttachmentAnoMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcAttachmentAnoMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcAttachmentAnoMetaInfoV1";
  }
  protected:
  explicit SwcAttachmentAnoMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentUuidFieldNumber = 1,
  };
  // string AttachmentUuid = 1;
  void clear_attachmentuuid();
  const std::string& attachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachmentuuid();
  PROTOBUF_NODISCARD std::string* release_attachmentuuid();
  void set_allocated_attachmentuuid(std::string* attachmentuuid);
  private:
  const std::string& _internal_attachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachmentuuid(const std::string& value);
  std::string* _internal_mutable_attachmentuuid();
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcAttachmentAnoMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachmentuuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcAttachmentApoMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcAttachmentApoMetaInfoV1) */ {
 public:
  inline SwcAttachmentApoMetaInfoV1() : SwcAttachmentApoMetaInfoV1(nullptr) {}
  ~SwcAttachmentApoMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcAttachmentApoMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcAttachmentApoMetaInfoV1(const SwcAttachmentApoMetaInfoV1& from);
  SwcAttachmentApoMetaInfoV1(SwcAttachmentApoMetaInfoV1&& from) noexcept
    : SwcAttachmentApoMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcAttachmentApoMetaInfoV1& operator=(const SwcAttachmentApoMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcAttachmentApoMetaInfoV1& operator=(SwcAttachmentApoMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcAttachmentApoMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcAttachmentApoMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcAttachmentApoMetaInfoV1*>(
               &_SwcAttachmentApoMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SwcAttachmentApoMetaInfoV1& a, SwcAttachmentApoMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcAttachmentApoMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcAttachmentApoMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcAttachmentApoMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcAttachmentApoMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcAttachmentApoMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcAttachmentApoMetaInfoV1& from) {
    SwcAttachmentApoMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcAttachmentApoMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcAttachmentApoMetaInfoV1";
  }
  protected:
  explicit SwcAttachmentApoMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentUuidFieldNumber = 1,
  };
  // string AttachmentUuid = 1;
  void clear_attachmentuuid();
  const std::string& attachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attachmentuuid();
  PROTOBUF_NODISCARD std::string* release_attachmentuuid();
  void set_allocated_attachmentuuid(std::string* attachmentuuid);
  private:
  const std::string& _internal_attachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attachmentuuid(const std::string& value);
  std::string* _internal_mutable_attachmentuuid();
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcAttachmentApoMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attachmentuuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcMetaInfoV1) */ {
 public:
  inline SwcMetaInfoV1() : SwcMetaInfoV1(nullptr) {}
  ~SwcMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcMetaInfoV1(const SwcMetaInfoV1& from);
  SwcMetaInfoV1(SwcMetaInfoV1&& from) noexcept
    : SwcMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline SwcMetaInfoV1& operator=(const SwcMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcMetaInfoV1& operator=(SwcMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const SwcMetaInfoV1*>(
               &_SwcMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SwcMetaInfoV1& a, SwcMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcMetaInfoV1& from) {
    SwcMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcMetaInfoV1";
  }
  protected:
  explicit SwcMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcSnapshotMetaInfoListFieldNumber = 8,
    kSwcIncrementOperationMetaInfoListFieldNumber = 9,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCreatorFieldNumber = 4,
    kSwcTypeFieldNumber = 5,
    kCurrentIncrementOperationCollectionNameFieldNumber = 10,
    kSwcAttachmentSwcUuidFieldNumber = 13,
    kBelongingProjectUuidFieldNumber = 15,
    kBaseFieldNumber = 1,
    kCreateTimeFieldNumber = 6,
    kLastModifiedTimeFieldNumber = 7,
    kSwcAttachmentAnoMetaInfoFieldNumber = 11,
    kSwcAttachmentApoMetaInfoFieldNumber = 12,
    kPermissionFieldNumber = 14,
  };
  // repeated .proto.SwcSnapshotMetaInfoV1 SwcSnapshotMetaInfoList = 8;
  int swcsnapshotmetainfolist_size() const;
  private:
  int _internal_swcsnapshotmetainfolist_size() const;
  public:
  void clear_swcsnapshotmetainfolist();
  ::proto::SwcSnapshotMetaInfoV1* mutable_swcsnapshotmetainfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >*
      mutable_swcsnapshotmetainfolist();
  private:
  const ::proto::SwcSnapshotMetaInfoV1& _internal_swcsnapshotmetainfolist(int index) const;
  ::proto::SwcSnapshotMetaInfoV1* _internal_add_swcsnapshotmetainfolist();
  public:
  const ::proto::SwcSnapshotMetaInfoV1& swcsnapshotmetainfolist(int index) const;
  ::proto::SwcSnapshotMetaInfoV1* add_swcsnapshotmetainfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >&
      swcsnapshotmetainfolist() const;

  // repeated .proto.SwcIncrementOperationMetaInfoV1 SwcIncrementOperationMetaInfoList = 9;
  int swcincrementoperationmetainfolist_size() const;
  private:
  int _internal_swcincrementoperationmetainfolist_size() const;
  public:
  void clear_swcincrementoperationmetainfolist();
  ::proto::SwcIncrementOperationMetaInfoV1* mutable_swcincrementoperationmetainfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >*
      mutable_swcincrementoperationmetainfolist();
  private:
  const ::proto::SwcIncrementOperationMetaInfoV1& _internal_swcincrementoperationmetainfolist(int index) const;
  ::proto::SwcIncrementOperationMetaInfoV1* _internal_add_swcincrementoperationmetainfolist();
  public:
  const ::proto::SwcIncrementOperationMetaInfoV1& swcincrementoperationmetainfolist(int index) const;
  ::proto::SwcIncrementOperationMetaInfoV1* add_swcincrementoperationmetainfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >&
      swcincrementoperationmetainfolist() const;

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Creator = 4;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string SwcType = 5;
  void clear_swctype();
  const std::string& swctype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swctype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swctype();
  PROTOBUF_NODISCARD std::string* release_swctype();
  void set_allocated_swctype(std::string* swctype);
  private:
  const std::string& _internal_swctype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swctype(const std::string& value);
  std::string* _internal_mutable_swctype();
  public:

  // string CurrentIncrementOperationCollectionName = 10;
  void clear_currentincrementoperationcollectionname();
  const std::string& currentincrementoperationcollectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentincrementoperationcollectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentincrementoperationcollectionname();
  PROTOBUF_NODISCARD std::string* release_currentincrementoperationcollectionname();
  void set_allocated_currentincrementoperationcollectionname(std::string* currentincrementoperationcollectionname);
  private:
  const std::string& _internal_currentincrementoperationcollectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentincrementoperationcollectionname(const std::string& value);
  std::string* _internal_mutable_currentincrementoperationcollectionname();
  public:

  // string SwcAttachmentSwcUuid = 13;
  void clear_swcattachmentswcuuid();
  const std::string& swcattachmentswcuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcattachmentswcuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcattachmentswcuuid();
  PROTOBUF_NODISCARD std::string* release_swcattachmentswcuuid();
  void set_allocated_swcattachmentswcuuid(std::string* swcattachmentswcuuid);
  private:
  const std::string& _internal_swcattachmentswcuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcattachmentswcuuid(const std::string& value);
  std::string* _internal_mutable_swcattachmentswcuuid();
  public:

  // string BelongingProjectUuid = 15;
  void clear_belongingprojectuuid();
  const std::string& belongingprojectuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_belongingprojectuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_belongingprojectuuid();
  PROTOBUF_NODISCARD std::string* release_belongingprojectuuid();
  void set_allocated_belongingprojectuuid(std::string* belongingprojectuuid);
  private:
  const std::string& _internal_belongingprojectuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_belongingprojectuuid(const std::string& value);
  std::string* _internal_mutable_belongingprojectuuid();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .google.protobuf.Timestamp CreateTime = 6;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 7;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // .proto.SwcAttachmentAnoMetaInfoV1 SwcAttachmentAnoMetaInfo = 11;
  bool has_swcattachmentanometainfo() const;
  private:
  bool _internal_has_swcattachmentanometainfo() const;
  public:
  void clear_swcattachmentanometainfo();
  const ::proto::SwcAttachmentAnoMetaInfoV1& swcattachmentanometainfo() const;
  PROTOBUF_NODISCARD ::proto::SwcAttachmentAnoMetaInfoV1* release_swcattachmentanometainfo();
  ::proto::SwcAttachmentAnoMetaInfoV1* mutable_swcattachmentanometainfo();
  void set_allocated_swcattachmentanometainfo(::proto::SwcAttachmentAnoMetaInfoV1* swcattachmentanometainfo);
  private:
  const ::proto::SwcAttachmentAnoMetaInfoV1& _internal_swcattachmentanometainfo() const;
  ::proto::SwcAttachmentAnoMetaInfoV1* _internal_mutable_swcattachmentanometainfo();
  public:
  void unsafe_arena_set_allocated_swcattachmentanometainfo(
      ::proto::SwcAttachmentAnoMetaInfoV1* swcattachmentanometainfo);
  ::proto::SwcAttachmentAnoMetaInfoV1* unsafe_arena_release_swcattachmentanometainfo();

  // .proto.SwcAttachmentApoMetaInfoV1 SwcAttachmentApoMetaInfo = 12;
  bool has_swcattachmentapometainfo() const;
  private:
  bool _internal_has_swcattachmentapometainfo() const;
  public:
  void clear_swcattachmentapometainfo();
  const ::proto::SwcAttachmentApoMetaInfoV1& swcattachmentapometainfo() const;
  PROTOBUF_NODISCARD ::proto::SwcAttachmentApoMetaInfoV1* release_swcattachmentapometainfo();
  ::proto::SwcAttachmentApoMetaInfoV1* mutable_swcattachmentapometainfo();
  void set_allocated_swcattachmentapometainfo(::proto::SwcAttachmentApoMetaInfoV1* swcattachmentapometainfo);
  private:
  const ::proto::SwcAttachmentApoMetaInfoV1& _internal_swcattachmentapometainfo() const;
  ::proto::SwcAttachmentApoMetaInfoV1* _internal_mutable_swcattachmentapometainfo();
  public:
  void unsafe_arena_set_allocated_swcattachmentapometainfo(
      ::proto::SwcAttachmentApoMetaInfoV1* swcattachmentapometainfo);
  ::proto::SwcAttachmentApoMetaInfoV1* unsafe_arena_release_swcattachmentapometainfo();

  // .proto.PermissionMetaInfoV1 Permission = 14;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  const ::proto::PermissionMetaInfoV1& permission() const;
  PROTOBUF_NODISCARD ::proto::PermissionMetaInfoV1* release_permission();
  ::proto::PermissionMetaInfoV1* mutable_permission();
  void set_allocated_permission(::proto::PermissionMetaInfoV1* permission);
  private:
  const ::proto::PermissionMetaInfoV1& _internal_permission() const;
  ::proto::PermissionMetaInfoV1* _internal_mutable_permission();
  public:
  void unsafe_arena_set_allocated_permission(
      ::proto::PermissionMetaInfoV1* permission);
  ::proto::PermissionMetaInfoV1* unsafe_arena_release_permission();

  // @@protoc_insertion_point(class_scope:proto.SwcMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 > swcsnapshotmetainfolist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 > swcincrementoperationmetainfolist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swctype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentincrementoperationcollectionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcattachmentswcuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr belongingprojectuuid_;
    ::proto::MetaInfoBase* base_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    ::proto::SwcAttachmentAnoMetaInfoV1* swcattachmentanometainfo_;
    ::proto::SwcAttachmentApoMetaInfoV1* swcattachmentapometainfo_;
    ::proto::PermissionMetaInfoV1* permission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcNodeInternalDataV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcNodeInternalDataV1) */ {
 public:
  inline SwcNodeInternalDataV1() : SwcNodeInternalDataV1(nullptr) {}
  ~SwcNodeInternalDataV1() override;
  explicit PROTOBUF_CONSTEXPR SwcNodeInternalDataV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcNodeInternalDataV1(const SwcNodeInternalDataV1& from);
  SwcNodeInternalDataV1(SwcNodeInternalDataV1&& from) noexcept
    : SwcNodeInternalDataV1() {
    *this = ::std::move(from);
  }

  inline SwcNodeInternalDataV1& operator=(const SwcNodeInternalDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcNodeInternalDataV1& operator=(SwcNodeInternalDataV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcNodeInternalDataV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcNodeInternalDataV1* internal_default_instance() {
    return reinterpret_cast<const SwcNodeInternalDataV1*>(
               &_SwcNodeInternalDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SwcNodeInternalDataV1& a, SwcNodeInternalDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcNodeInternalDataV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcNodeInternalDataV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcNodeInternalDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcNodeInternalDataV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcNodeInternalDataV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcNodeInternalDataV1& from) {
    SwcNodeInternalDataV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcNodeInternalDataV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcNodeInternalDataV1";
  }
  protected:
  explicit SwcNodeInternalDataV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kTypeFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kRadiusFieldNumber = 6,
    kParentFieldNumber = 7,
    kSegIdFieldNumber = 8,
    kLevelFieldNumber = 9,
    kModeFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kFeatureValueFieldNumber = 12,
  };
  // int32 N = 1;
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // int32 Type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // float X = 3;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 4;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 5;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float Radius = 6;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // int32 Parent = 7;
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // int32 Seg_id = 8;
  void clear_seg_id();
  int32_t seg_id() const;
  void set_seg_id(int32_t value);
  private:
  int32_t _internal_seg_id() const;
  void _internal_set_seg_id(int32_t value);
  public:

  // int32 Level = 9;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 Mode = 10;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // int32 Timestamp = 11;
  void clear_timestamp();
  int32_t timestamp() const;
  void set_timestamp(int32_t value);
  private:
  int32_t _internal_timestamp() const;
  void _internal_set_timestamp(int32_t value);
  public:

  // int32 Feature_value = 12;
  void clear_feature_value();
  int32_t feature_value() const;
  void set_feature_value(int32_t value);
  private:
  int32_t _internal_feature_value() const;
  void _internal_set_feature_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcNodeInternalDataV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t n_;
    int32_t type_;
    float x_;
    float y_;
    float z_;
    float radius_;
    int32_t parent_;
    int32_t seg_id_;
    int32_t level_;
    int32_t mode_;
    int32_t timestamp_;
    int32_t feature_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcNodeDataV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcNodeDataV1) */ {
 public:
  inline SwcNodeDataV1() : SwcNodeDataV1(nullptr) {}
  ~SwcNodeDataV1() override;
  explicit PROTOBUF_CONSTEXPR SwcNodeDataV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcNodeDataV1(const SwcNodeDataV1& from);
  SwcNodeDataV1(SwcNodeDataV1&& from) noexcept
    : SwcNodeDataV1() {
    *this = ::std::move(from);
  }

  inline SwcNodeDataV1& operator=(const SwcNodeDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcNodeDataV1& operator=(SwcNodeDataV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcNodeDataV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcNodeDataV1* internal_default_instance() {
    return reinterpret_cast<const SwcNodeDataV1*>(
               &_SwcNodeDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SwcNodeDataV1& a, SwcNodeDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcNodeDataV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcNodeDataV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcNodeDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcNodeDataV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcNodeDataV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcNodeDataV1& from) {
    SwcNodeDataV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcNodeDataV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcNodeDataV1";
  }
  protected:
  explicit SwcNodeDataV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 3,
    kCheckerUserUuidFieldNumber = 6,
    kBaseFieldNumber = 1,
    kSwcNodeInternalDataFieldNumber = 2,
    kCreateTimeFieldNumber = 4,
    kLastModifiedTimeFieldNumber = 5,
  };
  // string Creator = 3;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string CheckerUserUuid = 6;
  void clear_checkeruseruuid();
  const std::string& checkeruseruuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkeruseruuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkeruseruuid();
  PROTOBUF_NODISCARD std::string* release_checkeruseruuid();
  void set_allocated_checkeruseruuid(std::string* checkeruseruuid);
  private:
  const std::string& _internal_checkeruseruuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkeruseruuid(const std::string& value);
  std::string* _internal_mutable_checkeruseruuid();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // .proto.SwcNodeInternalDataV1 SwcNodeInternalData = 2;
  bool has_swcnodeinternaldata() const;
  private:
  bool _internal_has_swcnodeinternaldata() const;
  public:
  void clear_swcnodeinternaldata();
  const ::proto::SwcNodeInternalDataV1& swcnodeinternaldata() const;
  PROTOBUF_NODISCARD ::proto::SwcNodeInternalDataV1* release_swcnodeinternaldata();
  ::proto::SwcNodeInternalDataV1* mutable_swcnodeinternaldata();
  void set_allocated_swcnodeinternaldata(::proto::SwcNodeInternalDataV1* swcnodeinternaldata);
  private:
  const ::proto::SwcNodeInternalDataV1& _internal_swcnodeinternaldata() const;
  ::proto::SwcNodeInternalDataV1* _internal_mutable_swcnodeinternaldata();
  public:
  void unsafe_arena_set_allocated_swcnodeinternaldata(
      ::proto::SwcNodeInternalDataV1* swcnodeinternaldata);
  ::proto::SwcNodeInternalDataV1* unsafe_arena_release_swcnodeinternaldata();

  // .google.protobuf.Timestamp CreateTime = 4;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& createtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_createtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createtime();
  void set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createtime();
  public:
  void unsafe_arena_set_allocated_createtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createtime();

  // .google.protobuf.Timestamp LastModifiedTime = 5;
  bool has_lastmodifiedtime() const;
  private:
  bool _internal_has_lastmodifiedtime() const;
  public:
  void clear_lastmodifiedtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& lastmodifiedtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_lastmodifiedtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lastmodifiedtime();
  void set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lastmodifiedtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lastmodifiedtime();
  public:
  void unsafe_arena_set_allocated_lastmodifiedtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lastmodifiedtime();

  // @@protoc_insertion_point(class_scope:proto.SwcNodeDataV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkeruseruuid_;
    ::proto::MetaInfoBase* base_;
    ::proto::SwcNodeInternalDataV1* swcnodeinternaldata_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcDataV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcDataV1) */ {
 public:
  inline SwcDataV1() : SwcDataV1(nullptr) {}
  ~SwcDataV1() override;
  explicit PROTOBUF_CONSTEXPR SwcDataV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcDataV1(const SwcDataV1& from);
  SwcDataV1(SwcDataV1&& from) noexcept
    : SwcDataV1() {
    *this = ::std::move(from);
  }

  inline SwcDataV1& operator=(const SwcDataV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcDataV1& operator=(SwcDataV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcDataV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcDataV1* internal_default_instance() {
    return reinterpret_cast<const SwcDataV1*>(
               &_SwcDataV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SwcDataV1& a, SwcDataV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcDataV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcDataV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcDataV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcDataV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcDataV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcDataV1& from) {
    SwcDataV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcDataV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcDataV1";
  }
  protected:
  explicit SwcDataV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcDataFieldNumber = 1,
  };
  // repeated .proto.SwcNodeDataV1 SwcData = 1;
  int swcdata_size() const;
  private:
  int _internal_swcdata_size() const;
  public:
  void clear_swcdata();
  ::proto::SwcNodeDataV1* mutable_swcdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >*
      mutable_swcdata();
  private:
  const ::proto::SwcNodeDataV1& _internal_swcdata(int index) const;
  ::proto::SwcNodeDataV1* _internal_add_swcdata();
  public:
  const ::proto::SwcNodeDataV1& swcdata(int index) const;
  ::proto::SwcNodeDataV1* add_swcdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >&
      swcdata() const;

  // @@protoc_insertion_point(class_scope:proto.SwcDataV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 > swcdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class DailyStatisticsMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DailyStatisticsMetaInfoV1) */ {
 public:
  inline DailyStatisticsMetaInfoV1() : DailyStatisticsMetaInfoV1(nullptr) {}
  ~DailyStatisticsMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR DailyStatisticsMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DailyStatisticsMetaInfoV1(const DailyStatisticsMetaInfoV1& from);
  DailyStatisticsMetaInfoV1(DailyStatisticsMetaInfoV1&& from) noexcept
    : DailyStatisticsMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline DailyStatisticsMetaInfoV1& operator=(const DailyStatisticsMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline DailyStatisticsMetaInfoV1& operator=(DailyStatisticsMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DailyStatisticsMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const DailyStatisticsMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const DailyStatisticsMetaInfoV1*>(
               &_DailyStatisticsMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DailyStatisticsMetaInfoV1& a, DailyStatisticsMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(DailyStatisticsMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DailyStatisticsMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DailyStatisticsMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DailyStatisticsMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DailyStatisticsMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DailyStatisticsMetaInfoV1& from) {
    DailyStatisticsMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DailyStatisticsMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DailyStatisticsMetaInfoV1";
  }
  protected:
  explicit DailyStatisticsMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kDayFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCreatedProjectNumberFieldNumber = 5,
    kCreatedSwcNumberFieldNumber = 6,
    kCreateSwcNodeNumberFieldNumber = 7,
    kDeletedProjectNumberFieldNumber = 8,
    kDeletedSwcNumberFieldNumber = 9,
    kDeletedSwcNodeNumberFieldNumber = 10,
    kModifiedProjectNumberFieldNumber = 11,
    kModifiedSwcNumberFieldNumber = 12,
    kModifiedSwcNodeNumberFieldNumber = 13,
    kProjectQueryNumberFieldNumber = 14,
    kSwcQueryNumberFieldNumber = 15,
    kNodeQueryNumberFieldNumber = 16,
    kActiveUserNumberFieldNumber = 17,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string Day = 4;
  void clear_day();
  const std::string& day() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_day(ArgT0&& arg0, ArgT... args);
  std::string* mutable_day();
  PROTOBUF_NODISCARD std::string* release_day();
  void set_allocated_day(std::string* day);
  private:
  const std::string& _internal_day() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_day(const std::string& value);
  std::string* _internal_mutable_day();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // int32 CreatedProjectNumber = 5;
  void clear_createdprojectnumber();
  int32_t createdprojectnumber() const;
  void set_createdprojectnumber(int32_t value);
  private:
  int32_t _internal_createdprojectnumber() const;
  void _internal_set_createdprojectnumber(int32_t value);
  public:

  // int32 CreatedSwcNumber = 6;
  void clear_createdswcnumber();
  int32_t createdswcnumber() const;
  void set_createdswcnumber(int32_t value);
  private:
  int32_t _internal_createdswcnumber() const;
  void _internal_set_createdswcnumber(int32_t value);
  public:

  // int32 CreateSwcNodeNumber = 7;
  void clear_createswcnodenumber();
  int32_t createswcnodenumber() const;
  void set_createswcnodenumber(int32_t value);
  private:
  int32_t _internal_createswcnodenumber() const;
  void _internal_set_createswcnodenumber(int32_t value);
  public:

  // int32 DeletedProjectNumber = 8;
  void clear_deletedprojectnumber();
  int32_t deletedprojectnumber() const;
  void set_deletedprojectnumber(int32_t value);
  private:
  int32_t _internal_deletedprojectnumber() const;
  void _internal_set_deletedprojectnumber(int32_t value);
  public:

  // int32 DeletedSwcNumber = 9;
  void clear_deletedswcnumber();
  int32_t deletedswcnumber() const;
  void set_deletedswcnumber(int32_t value);
  private:
  int32_t _internal_deletedswcnumber() const;
  void _internal_set_deletedswcnumber(int32_t value);
  public:

  // int32 DeletedSwcNodeNumber = 10;
  void clear_deletedswcnodenumber();
  int32_t deletedswcnodenumber() const;
  void set_deletedswcnodenumber(int32_t value);
  private:
  int32_t _internal_deletedswcnodenumber() const;
  void _internal_set_deletedswcnodenumber(int32_t value);
  public:

  // int32 ModifiedProjectNumber = 11;
  void clear_modifiedprojectnumber();
  int32_t modifiedprojectnumber() const;
  void set_modifiedprojectnumber(int32_t value);
  private:
  int32_t _internal_modifiedprojectnumber() const;
  void _internal_set_modifiedprojectnumber(int32_t value);
  public:

  // int32 ModifiedSwcNumber = 12;
  void clear_modifiedswcnumber();
  int32_t modifiedswcnumber() const;
  void set_modifiedswcnumber(int32_t value);
  private:
  int32_t _internal_modifiedswcnumber() const;
  void _internal_set_modifiedswcnumber(int32_t value);
  public:

  // int32 ModifiedSwcNodeNumber = 13;
  void clear_modifiedswcnodenumber();
  int32_t modifiedswcnodenumber() const;
  void set_modifiedswcnodenumber(int32_t value);
  private:
  int32_t _internal_modifiedswcnodenumber() const;
  void _internal_set_modifiedswcnodenumber(int32_t value);
  public:

  // int32 ProjectQueryNumber = 14;
  void clear_projectquerynumber();
  int32_t projectquerynumber() const;
  void set_projectquerynumber(int32_t value);
  private:
  int32_t _internal_projectquerynumber() const;
  void _internal_set_projectquerynumber(int32_t value);
  public:

  // int32 SwcQueryNumber = 15;
  void clear_swcquerynumber();
  int32_t swcquerynumber() const;
  void set_swcquerynumber(int32_t value);
  private:
  int32_t _internal_swcquerynumber() const;
  void _internal_set_swcquerynumber(int32_t value);
  public:

  // int32 NodeQueryNumber = 16;
  void clear_nodequerynumber();
  int32_t nodequerynumber() const;
  void set_nodequerynumber(int32_t value);
  private:
  int32_t _internal_nodequerynumber() const;
  void _internal_set_nodequerynumber(int32_t value);
  public:

  // int32 ActiveUserNumber = 17;
  void clear_activeusernumber();
  int32_t activeusernumber() const;
  void set_activeusernumber(int32_t value);
  private:
  int32_t _internal_activeusernumber() const;
  void _internal_set_activeusernumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DailyStatisticsMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr day_;
    ::proto::MetaInfoBase* base_;
    int32_t createdprojectnumber_;
    int32_t createdswcnumber_;
    int32_t createswcnodenumber_;
    int32_t deletedprojectnumber_;
    int32_t deletedswcnumber_;
    int32_t deletedswcnodenumber_;
    int32_t modifiedprojectnumber_;
    int32_t modifiedswcnumber_;
    int32_t modifiedswcnodenumber_;
    int32_t projectquerynumber_;
    int32_t swcquerynumber_;
    int32_t nodequerynumber_;
    int32_t activeusernumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class UserVerifyInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserVerifyInfoV1) */ {
 public:
  inline UserVerifyInfoV1() : UserVerifyInfoV1(nullptr) {}
  ~UserVerifyInfoV1() override;
  explicit PROTOBUF_CONSTEXPR UserVerifyInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserVerifyInfoV1(const UserVerifyInfoV1& from);
  UserVerifyInfoV1(UserVerifyInfoV1&& from) noexcept
    : UserVerifyInfoV1() {
    *this = ::std::move(from);
  }

  inline UserVerifyInfoV1& operator=(const UserVerifyInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserVerifyInfoV1& operator=(UserVerifyInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserVerifyInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserVerifyInfoV1* internal_default_instance() {
    return reinterpret_cast<const UserVerifyInfoV1*>(
               &_UserVerifyInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UserVerifyInfoV1& a, UserVerifyInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UserVerifyInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserVerifyInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserVerifyInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserVerifyInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserVerifyInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserVerifyInfoV1& from) {
    UserVerifyInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserVerifyInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserVerifyInfoV1";
  }
  protected:
  explicit UserVerifyInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserTokenFieldNumber = 2,
    kUserPasswordFieldNumber = 3,
  };
  // string UserName = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string UserToken = 2;
  void clear_usertoken();
  const std::string& usertoken() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usertoken(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usertoken();
  PROTOBUF_NODISCARD std::string* release_usertoken();
  void set_allocated_usertoken(std::string* usertoken);
  private:
  const std::string& _internal_usertoken() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usertoken(const std::string& value);
  std::string* _internal_mutable_usertoken();
  public:

  // string UserPassword = 3;
  void clear_userpassword();
  const std::string& userpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userpassword();
  PROTOBUF_NODISCARD std::string* release_userpassword();
  void set_allocated_userpassword(std::string* userpassword);
  private:
  const std::string& _internal_userpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userpassword(const std::string& value);
  std::string* _internal_mutable_userpassword();
  public:

  // @@protoc_insertion_point(class_scope:proto.UserVerifyInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usertoken_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userpassword_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class RequestMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RequestMetaInfoV1) */ {
 public:
  inline RequestMetaInfoV1() : RequestMetaInfoV1(nullptr) {}
  ~RequestMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR RequestMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMetaInfoV1(const RequestMetaInfoV1& from);
  RequestMetaInfoV1(RequestMetaInfoV1&& from) noexcept
    : RequestMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline RequestMetaInfoV1& operator=(const RequestMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMetaInfoV1& operator=(RequestMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const RequestMetaInfoV1*>(
               &_RequestMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(RequestMetaInfoV1& a, RequestMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestMetaInfoV1& from) {
    RequestMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RequestMetaInfoV1";
  }
  protected:
  explicit RequestMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiVersionFieldNumber = 1,
  };
  // string ApiVersion = 1;
  void clear_apiversion();
  const std::string& apiversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apiversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apiversion();
  PROTOBUF_NODISCARD std::string* release_apiversion();
  void set_allocated_apiversion(std::string* apiversion);
  private:
  const std::string& _internal_apiversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apiversion(const std::string& value);
  std::string* _internal_mutable_apiversion();
  public:

  // @@protoc_insertion_point(class_scope:proto.RequestMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apiversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class ResponseMetaInfoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ResponseMetaInfoV1) */ {
 public:
  inline ResponseMetaInfoV1() : ResponseMetaInfoV1(nullptr) {}
  ~ResponseMetaInfoV1() override;
  explicit PROTOBUF_CONSTEXPR ResponseMetaInfoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMetaInfoV1(const ResponseMetaInfoV1& from);
  ResponseMetaInfoV1(ResponseMetaInfoV1&& from) noexcept
    : ResponseMetaInfoV1() {
    *this = ::std::move(from);
  }

  inline ResponseMetaInfoV1& operator=(const ResponseMetaInfoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMetaInfoV1& operator=(ResponseMetaInfoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMetaInfoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMetaInfoV1* internal_default_instance() {
    return reinterpret_cast<const ResponseMetaInfoV1*>(
               &_ResponseMetaInfoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ResponseMetaInfoV1& a, ResponseMetaInfoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMetaInfoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMetaInfoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMetaInfoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMetaInfoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMetaInfoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseMetaInfoV1& from) {
    ResponseMetaInfoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMetaInfoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ResponseMetaInfoV1";
  }
  protected:
  explicit ResponseMetaInfoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string Id = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string Message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ResponseMetaInfoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcAttachmentAnoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcAttachmentAnoV1) */ {
 public:
  inline SwcAttachmentAnoV1() : SwcAttachmentAnoV1(nullptr) {}
  ~SwcAttachmentAnoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcAttachmentAnoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcAttachmentAnoV1(const SwcAttachmentAnoV1& from);
  SwcAttachmentAnoV1(SwcAttachmentAnoV1&& from) noexcept
    : SwcAttachmentAnoV1() {
    *this = ::std::move(from);
  }

  inline SwcAttachmentAnoV1& operator=(const SwcAttachmentAnoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcAttachmentAnoV1& operator=(SwcAttachmentAnoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcAttachmentAnoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcAttachmentAnoV1* internal_default_instance() {
    return reinterpret_cast<const SwcAttachmentAnoV1*>(
               &_SwcAttachmentAnoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SwcAttachmentAnoV1& a, SwcAttachmentAnoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcAttachmentAnoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcAttachmentAnoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcAttachmentAnoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcAttachmentAnoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcAttachmentAnoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcAttachmentAnoV1& from) {
    SwcAttachmentAnoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcAttachmentAnoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcAttachmentAnoV1";
  }
  protected:
  explicit SwcAttachmentAnoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAPOFILEFieldNumber = 2,
    kSWCFILEFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // string APOFILE = 2;
  void clear_apofile();
  const std::string& apofile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apofile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apofile();
  PROTOBUF_NODISCARD std::string* release_apofile();
  void set_allocated_apofile(std::string* apofile);
  private:
  const std::string& _internal_apofile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apofile(const std::string& value);
  std::string* _internal_mutable_apofile();
  public:

  // string SWCFILE = 3;
  void clear_swcfile();
  const std::string& swcfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcfile();
  PROTOBUF_NODISCARD std::string* release_swcfile();
  void set_allocated_swcfile(std::string* swcfile);
  private:
  const std::string& _internal_swcfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcfile(const std::string& value);
  std::string* _internal_mutable_swcfile();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:proto.SwcAttachmentAnoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apofile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcfile_;
    ::proto::MetaInfoBase* base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcAttachmentApoV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcAttachmentApoV1) */ {
 public:
  inline SwcAttachmentApoV1() : SwcAttachmentApoV1(nullptr) {}
  ~SwcAttachmentApoV1() override;
  explicit PROTOBUF_CONSTEXPR SwcAttachmentApoV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcAttachmentApoV1(const SwcAttachmentApoV1& from);
  SwcAttachmentApoV1(SwcAttachmentApoV1&& from) noexcept
    : SwcAttachmentApoV1() {
    *this = ::std::move(from);
  }

  inline SwcAttachmentApoV1& operator=(const SwcAttachmentApoV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcAttachmentApoV1& operator=(SwcAttachmentApoV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcAttachmentApoV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcAttachmentApoV1* internal_default_instance() {
    return reinterpret_cast<const SwcAttachmentApoV1*>(
               &_SwcAttachmentApoV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SwcAttachmentApoV1& a, SwcAttachmentApoV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcAttachmentApoV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcAttachmentApoV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcAttachmentApoV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcAttachmentApoV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcAttachmentApoV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcAttachmentApoV1& from) {
    SwcAttachmentApoV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcAttachmentApoV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcAttachmentApoV1";
  }
  protected:
  explicit SwcAttachmentApoV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderinfoFieldNumber = 3,
    kNameFieldNumber = 4,
    kCommentFieldNumber = 5,
    kBaseFieldNumber = 1,
    kNFieldNumber = 2,
    kZFieldNumber = 6,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
    kPixmaxFieldNumber = 9,
    kIntensityFieldNumber = 10,
    kSdevFieldNumber = 11,
    kVolsizeFieldNumber = 12,
    kMassFieldNumber = 13,
    kColorRFieldNumber = 14,
    kColorGFieldNumber = 15,
    kColorBFieldNumber = 16,
  };
  // string Orderinfo = 3;
  void clear_orderinfo();
  const std::string& orderinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_orderinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_orderinfo();
  PROTOBUF_NODISCARD std::string* release_orderinfo();
  void set_allocated_orderinfo(std::string* orderinfo);
  private:
  const std::string& _internal_orderinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orderinfo(const std::string& value);
  std::string* _internal_mutable_orderinfo();
  public:

  // string Name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Comment = 5;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_NODISCARD std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // .proto.MetaInfoBase Base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::proto::MetaInfoBase& base() const;
  PROTOBUF_NODISCARD ::proto::MetaInfoBase* release_base();
  ::proto::MetaInfoBase* mutable_base();
  void set_allocated_base(::proto::MetaInfoBase* base);
  private:
  const ::proto::MetaInfoBase& _internal_base() const;
  ::proto::MetaInfoBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::proto::MetaInfoBase* base);
  ::proto::MetaInfoBase* unsafe_arena_release_base();

  // int32 N = 2;
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // float Z = 6;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float X = 7;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 8;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Pixmax = 9;
  void clear_pixmax();
  float pixmax() const;
  void set_pixmax(float value);
  private:
  float _internal_pixmax() const;
  void _internal_set_pixmax(float value);
  public:

  // float Intensity = 10;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // float Sdev = 11;
  void clear_sdev();
  float sdev() const;
  void set_sdev(float value);
  private:
  float _internal_sdev() const;
  void _internal_set_sdev(float value);
  public:

  // float Volsize = 12;
  void clear_volsize();
  float volsize() const;
  void set_volsize(float value);
  private:
  float _internal_volsize() const;
  void _internal_set_volsize(float value);
  public:

  // float Mass = 13;
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // int32 ColorR = 14;
  void clear_colorr();
  int32_t colorr() const;
  void set_colorr(int32_t value);
  private:
  int32_t _internal_colorr() const;
  void _internal_set_colorr(int32_t value);
  public:

  // int32 ColorG = 15;
  void clear_colorg();
  int32_t colorg() const;
  void set_colorg(int32_t value);
  private:
  int32_t _internal_colorg() const;
  void _internal_set_colorg(int32_t value);
  public:

  // int32 ColorB = 16;
  void clear_colorb();
  int32_t colorb() const;
  void set_colorb(int32_t value);
  private:
  int32_t _internal_colorb() const;
  void _internal_set_colorb(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcAttachmentApoV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderinfo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
    ::proto::MetaInfoBase* base_;
    int32_t n_;
    float z_;
    float x_;
    float y_;
    float pixmax_;
    float intensity_;
    float sdev_;
    float volsize_;
    float mass_;
    int32_t colorr_;
    int32_t colorg_;
    int32_t colorb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class SwcUuidName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SwcUuidName) */ {
 public:
  inline SwcUuidName() : SwcUuidName(nullptr) {}
  ~SwcUuidName() override;
  explicit PROTOBUF_CONSTEXPR SwcUuidName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwcUuidName(const SwcUuidName& from);
  SwcUuidName(SwcUuidName&& from) noexcept
    : SwcUuidName() {
    *this = ::std::move(from);
  }

  inline SwcUuidName& operator=(const SwcUuidName& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwcUuidName& operator=(SwcUuidName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwcUuidName& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwcUuidName* internal_default_instance() {
    return reinterpret_cast<const SwcUuidName*>(
               &_SwcUuidName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SwcUuidName& a, SwcUuidName& b) {
    a.Swap(&b);
  }
  inline void Swap(SwcUuidName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwcUuidName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwcUuidName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwcUuidName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwcUuidName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwcUuidName& from) {
    SwcUuidName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwcUuidName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SwcUuidName";
  }
  protected:
  explicit SwcUuidName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcUuidFieldNumber = 1,
    kSwcNameFieldNumber = 2,
  };
  // string SwcUuid = 1;
  void clear_swcuuid();
  const std::string& swcuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcuuid();
  PROTOBUF_NODISCARD std::string* release_swcuuid();
  void set_allocated_swcuuid(std::string* swcuuid);
  private:
  const std::string& _internal_swcuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcuuid(const std::string& value);
  std::string* _internal_mutable_swcuuid();
  public:

  // string SwcName = 2;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // @@protoc_insertion_point(class_scope:proto.SwcUuidName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// -------------------------------------------------------------------

class NodeNParent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.NodeNParent) */ {
 public:
  inline NodeNParent() : NodeNParent(nullptr) {}
  ~NodeNParent() override;
  explicit PROTOBUF_CONSTEXPR NodeNParent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeNParent(const NodeNParent& from);
  NodeNParent(NodeNParent&& from) noexcept
    : NodeNParent() {
    *this = ::std::move(from);
  }

  inline NodeNParent& operator=(const NodeNParent& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeNParent& operator=(NodeNParent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeNParent& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeNParent* internal_default_instance() {
    return reinterpret_cast<const NodeNParent*>(
               &_NodeNParent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(NodeNParent& a, NodeNParent& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeNParent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeNParent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeNParent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeNParent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeNParent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeNParent& from) {
    NodeNParent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeNParent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.NodeNParent";
  }
  protected:
  explicit NodeNParent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeUuidFieldNumber = 1,
    kNFieldNumber = 2,
    kParentFieldNumber = 3,
  };
  // string NodeUuid = 1;
  void clear_nodeuuid();
  const std::string& nodeuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeuuid();
  PROTOBUF_NODISCARD std::string* release_nodeuuid();
  void set_allocated_nodeuuid(std::string* nodeuuid);
  private:
  const std::string& _internal_nodeuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeuuid(const std::string& value);
  std::string* _internal_mutable_nodeuuid();
  public:

  // int32 N = 2;
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // int32 Parent = 3;
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.NodeNParent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeuuid_;
    int32_t n_;
    int32_t parent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetaInfoBase

// string _id = 1;
inline void MetaInfoBase::clear__id() {
  _impl_._id_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::_id() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase._id)
  return _internal__id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set__id(ArgT0&& arg0, ArgT... args) {
 
 _impl_._id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase._id)
}
inline std::string* MetaInfoBase::mutable__id() {
  std::string* _s = _internal_mutable__id();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase._id)
  return _s;
}
inline const std::string& MetaInfoBase::_internal__id() const {
  return _impl_._id_.Get();
}
inline void MetaInfoBase::_internal_set__id(const std::string& value) {
  
  _impl_._id_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable__id() {
  
  return _impl_._id_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release__id() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase._id)
  return _impl_._id_.Release();
}
inline void MetaInfoBase::set_allocated__id(std::string* _id) {
  if (_id != nullptr) {
    
  } else {
    
  }
  _impl_._id_.SetAllocated(_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_._id_.IsDefault()) {
    _impl_._id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase._id)
}

// string DataAccessModelVersion = 2;
inline void MetaInfoBase::clear_dataaccessmodelversion() {
  _impl_.dataaccessmodelversion_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::dataaccessmodelversion() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase.DataAccessModelVersion)
  return _internal_dataaccessmodelversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set_dataaccessmodelversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dataaccessmodelversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase.DataAccessModelVersion)
}
inline std::string* MetaInfoBase::mutable_dataaccessmodelversion() {
  std::string* _s = _internal_mutable_dataaccessmodelversion();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase.DataAccessModelVersion)
  return _s;
}
inline const std::string& MetaInfoBase::_internal_dataaccessmodelversion() const {
  return _impl_.dataaccessmodelversion_.Get();
}
inline void MetaInfoBase::_internal_set_dataaccessmodelversion(const std::string& value) {
  
  _impl_.dataaccessmodelversion_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable_dataaccessmodelversion() {
  
  return _impl_.dataaccessmodelversion_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release_dataaccessmodelversion() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase.DataAccessModelVersion)
  return _impl_.dataaccessmodelversion_.Release();
}
inline void MetaInfoBase::set_allocated_dataaccessmodelversion(std::string* dataaccessmodelversion) {
  if (dataaccessmodelversion != nullptr) {
    
  } else {
    
  }
  _impl_.dataaccessmodelversion_.SetAllocated(dataaccessmodelversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dataaccessmodelversion_.IsDefault()) {
    _impl_.dataaccessmodelversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase.DataAccessModelVersion)
}

// string Uuid = 3;
inline void MetaInfoBase::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& MetaInfoBase::uuid() const {
  // @@protoc_insertion_point(field_get:proto.MetaInfoBase.Uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetaInfoBase::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.MetaInfoBase.Uuid)
}
inline std::string* MetaInfoBase::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:proto.MetaInfoBase.Uuid)
  return _s;
}
inline const std::string& MetaInfoBase::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void MetaInfoBase::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* MetaInfoBase::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* MetaInfoBase::release_uuid() {
  // @@protoc_insertion_point(field_release:proto.MetaInfoBase.Uuid)
  return _impl_.uuid_.Release();
}
inline void MetaInfoBase::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.MetaInfoBase.Uuid)
}

// -------------------------------------------------------------------

// BrainTellServerMysqlDBCompatibleData

// string Email = 1;
inline void BrainTellServerMysqlDBCompatibleData::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::email() const {
  // @@protoc_insertion_point(field_get:proto.BrainTellServerMysqlDBCompatibleData.Email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrainTellServerMysqlDBCompatibleData::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BrainTellServerMysqlDBCompatibleData.Email)
}
inline std::string* BrainTellServerMysqlDBCompatibleData::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:proto.BrainTellServerMysqlDBCompatibleData.Email)
  return _s;
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::_internal_email() const {
  return _impl_.email_.Get();
}
inline void BrainTellServerMysqlDBCompatibleData::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::release_email() {
  // @@protoc_insertion_point(field_release:proto.BrainTellServerMysqlDBCompatibleData.Email)
  return _impl_.email_.Release();
}
inline void BrainTellServerMysqlDBCompatibleData::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BrainTellServerMysqlDBCompatibleData.Email)
}

// string NickName = 2;
inline void BrainTellServerMysqlDBCompatibleData::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::nickname() const {
  // @@protoc_insertion_point(field_get:proto.BrainTellServerMysqlDBCompatibleData.NickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrainTellServerMysqlDBCompatibleData::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BrainTellServerMysqlDBCompatibleData.NickName)
}
inline std::string* BrainTellServerMysqlDBCompatibleData::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:proto.BrainTellServerMysqlDBCompatibleData.NickName)
  return _s;
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void BrainTellServerMysqlDBCompatibleData::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.BrainTellServerMysqlDBCompatibleData.NickName)
  return _impl_.nickname_.Release();
}
inline void BrainTellServerMysqlDBCompatibleData::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BrainTellServerMysqlDBCompatibleData.NickName)
}

// int32 Score = 3;
inline void BrainTellServerMysqlDBCompatibleData::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t BrainTellServerMysqlDBCompatibleData::_internal_score() const {
  return _impl_.score_;
}
inline int32_t BrainTellServerMysqlDBCompatibleData::score() const {
  // @@protoc_insertion_point(field_get:proto.BrainTellServerMysqlDBCompatibleData.Score)
  return _internal_score();
}
inline void BrainTellServerMysqlDBCompatibleData::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void BrainTellServerMysqlDBCompatibleData::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:proto.BrainTellServerMysqlDBCompatibleData.Score)
}

// string AppKey = 4;
inline void BrainTellServerMysqlDBCompatibleData::clear_appkey() {
  _impl_.appkey_.ClearToEmpty();
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::appkey() const {
  // @@protoc_insertion_point(field_get:proto.BrainTellServerMysqlDBCompatibleData.AppKey)
  return _internal_appkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BrainTellServerMysqlDBCompatibleData::set_appkey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.appkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.BrainTellServerMysqlDBCompatibleData.AppKey)
}
inline std::string* BrainTellServerMysqlDBCompatibleData::mutable_appkey() {
  std::string* _s = _internal_mutable_appkey();
  // @@protoc_insertion_point(field_mutable:proto.BrainTellServerMysqlDBCompatibleData.AppKey)
  return _s;
}
inline const std::string& BrainTellServerMysqlDBCompatibleData::_internal_appkey() const {
  return _impl_.appkey_.Get();
}
inline void BrainTellServerMysqlDBCompatibleData::_internal_set_appkey(const std::string& value) {
  
  _impl_.appkey_.Set(value, GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::_internal_mutable_appkey() {
  
  return _impl_.appkey_.Mutable(GetArenaForAllocation());
}
inline std::string* BrainTellServerMysqlDBCompatibleData::release_appkey() {
  // @@protoc_insertion_point(field_release:proto.BrainTellServerMysqlDBCompatibleData.AppKey)
  return _impl_.appkey_.Release();
}
inline void BrainTellServerMysqlDBCompatibleData::set_allocated_appkey(std::string* appkey) {
  if (appkey != nullptr) {
    
  } else {
    
  }
  _impl_.appkey_.SetAllocated(appkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.appkey_.IsDefault()) {
    _impl_.appkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.BrainTellServerMysqlDBCompatibleData.AppKey)
}

// int32 IsDeleted = 5;
inline void BrainTellServerMysqlDBCompatibleData::clear_isdeleted() {
  _impl_.isdeleted_ = 0;
}
inline int32_t BrainTellServerMysqlDBCompatibleData::_internal_isdeleted() const {
  return _impl_.isdeleted_;
}
inline int32_t BrainTellServerMysqlDBCompatibleData::isdeleted() const {
  // @@protoc_insertion_point(field_get:proto.BrainTellServerMysqlDBCompatibleData.IsDeleted)
  return _internal_isdeleted();
}
inline void BrainTellServerMysqlDBCompatibleData::_internal_set_isdeleted(int32_t value) {
  
  _impl_.isdeleted_ = value;
}
inline void BrainTellServerMysqlDBCompatibleData::set_isdeleted(int32_t value) {
  _internal_set_isdeleted(value);
  // @@protoc_insertion_point(field_set:proto.BrainTellServerMysqlDBCompatibleData.IsDeleted)
}

// -------------------------------------------------------------------

// UserMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool UserMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool UserMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void UserMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& UserMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& UserMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Base)
  return _internal_base();
}
inline void UserMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* UserMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Base)
  return _msg;
}
inline void UserMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Base)
}

// string Name = 2;
inline void UserMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Name)
}
inline std::string* UserMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Name)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void UserMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Name)
}

// string Password = 3;
inline void UserMetaInfoV1::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::password() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Password)
}
inline std::string* UserMetaInfoV1::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Password)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserMetaInfoV1::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_password() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Password)
  return _impl_.password_.Release();
}
inline void UserMetaInfoV1::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Password)
}

// string Description = 4;
inline void UserMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.Description)
}
inline std::string* UserMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.Description)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UserMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void UserMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.Description)
}

// .google.protobuf.Timestamp CreateTime = 5;
inline bool UserMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool UserMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void UserMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.CreateTime)
  return _msg;
}
inline void UserMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.CreateTime)
}

// bytes HeadPhotoBinData = 6;
inline void UserMetaInfoV1::clear_headphotobindata() {
  _impl_.headphotobindata_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::headphotobindata() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _internal_headphotobindata();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_headphotobindata(ArgT0&& arg0, ArgT... args) {
 
 _impl_.headphotobindata_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.HeadPhotoBinData)
}
inline std::string* UserMetaInfoV1::mutable_headphotobindata() {
  std::string* _s = _internal_mutable_headphotobindata();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_headphotobindata() const {
  return _impl_.headphotobindata_.Get();
}
inline void UserMetaInfoV1::_internal_set_headphotobindata(const std::string& value) {
  
  _impl_.headphotobindata_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_headphotobindata() {
  
  return _impl_.headphotobindata_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_headphotobindata() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.HeadPhotoBinData)
  return _impl_.headphotobindata_.Release();
}
inline void UserMetaInfoV1::set_allocated_headphotobindata(std::string* headphotobindata) {
  if (headphotobindata != nullptr) {
    
  } else {
    
  }
  _impl_.headphotobindata_.SetAllocated(headphotobindata, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.headphotobindata_.IsDefault()) {
    _impl_.headphotobindata_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.HeadPhotoBinData)
}

// string PermissionGroupUuid = 7;
inline void UserMetaInfoV1::clear_permissiongroupuuid() {
  _impl_.permissiongroupuuid_.ClearToEmpty();
}
inline const std::string& UserMetaInfoV1::permissiongroupuuid() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.PermissionGroupUuid)
  return _internal_permissiongroupuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserMetaInfoV1::set_permissiongroupuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permissiongroupuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.PermissionGroupUuid)
}
inline std::string* UserMetaInfoV1::mutable_permissiongroupuuid() {
  std::string* _s = _internal_mutable_permissiongroupuuid();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.PermissionGroupUuid)
  return _s;
}
inline const std::string& UserMetaInfoV1::_internal_permissiongroupuuid() const {
  return _impl_.permissiongroupuuid_.Get();
}
inline void UserMetaInfoV1::_internal_set_permissiongroupuuid(const std::string& value) {
  
  _impl_.permissiongroupuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::_internal_mutable_permissiongroupuuid() {
  
  return _impl_.permissiongroupuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UserMetaInfoV1::release_permissiongroupuuid() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.PermissionGroupUuid)
  return _impl_.permissiongroupuuid_.Release();
}
inline void UserMetaInfoV1::set_allocated_permissiongroupuuid(std::string* permissiongroupuuid) {
  if (permissiongroupuuid != nullptr) {
    
  } else {
    
  }
  _impl_.permissiongroupuuid_.SetAllocated(permissiongroupuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permissiongroupuuid_.IsDefault()) {
    _impl_.permissiongroupuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.PermissionGroupUuid)
}

// int32 UserId = 8;
inline void UserMetaInfoV1::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t UserMetaInfoV1::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t UserMetaInfoV1::userid() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.UserId)
  return _internal_userid();
}
inline void UserMetaInfoV1::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void UserMetaInfoV1::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:proto.UserMetaInfoV1.UserId)
}

// .proto.BrainTellServerMysqlDBCompatibleData CompatibleData = 9;
inline bool UserMetaInfoV1::_internal_has_compatibledata() const {
  return this != internal_default_instance() && _impl_.compatibledata_ != nullptr;
}
inline bool UserMetaInfoV1::has_compatibledata() const {
  return _internal_has_compatibledata();
}
inline void UserMetaInfoV1::clear_compatibledata() {
  if (GetArenaForAllocation() == nullptr && _impl_.compatibledata_ != nullptr) {
    delete _impl_.compatibledata_;
  }
  _impl_.compatibledata_ = nullptr;
}
inline const ::proto::BrainTellServerMysqlDBCompatibleData& UserMetaInfoV1::_internal_compatibledata() const {
  const ::proto::BrainTellServerMysqlDBCompatibleData* p = _impl_.compatibledata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::BrainTellServerMysqlDBCompatibleData&>(
      ::proto::_BrainTellServerMysqlDBCompatibleData_default_instance_);
}
inline const ::proto::BrainTellServerMysqlDBCompatibleData& UserMetaInfoV1::compatibledata() const {
  // @@protoc_insertion_point(field_get:proto.UserMetaInfoV1.CompatibleData)
  return _internal_compatibledata();
}
inline void UserMetaInfoV1::unsafe_arena_set_allocated_compatibledata(
    ::proto::BrainTellServerMysqlDBCompatibleData* compatibledata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compatibledata_);
  }
  _impl_.compatibledata_ = compatibledata;
  if (compatibledata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserMetaInfoV1.CompatibleData)
}
inline ::proto::BrainTellServerMysqlDBCompatibleData* UserMetaInfoV1::release_compatibledata() {
  
  ::proto::BrainTellServerMysqlDBCompatibleData* temp = _impl_.compatibledata_;
  _impl_.compatibledata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::BrainTellServerMysqlDBCompatibleData* UserMetaInfoV1::unsafe_arena_release_compatibledata() {
  // @@protoc_insertion_point(field_release:proto.UserMetaInfoV1.CompatibleData)
  
  ::proto::BrainTellServerMysqlDBCompatibleData* temp = _impl_.compatibledata_;
  _impl_.compatibledata_ = nullptr;
  return temp;
}
inline ::proto::BrainTellServerMysqlDBCompatibleData* UserMetaInfoV1::_internal_mutable_compatibledata() {
  
  if (_impl_.compatibledata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::BrainTellServerMysqlDBCompatibleData>(GetArenaForAllocation());
    _impl_.compatibledata_ = p;
  }
  return _impl_.compatibledata_;
}
inline ::proto::BrainTellServerMysqlDBCompatibleData* UserMetaInfoV1::mutable_compatibledata() {
  ::proto::BrainTellServerMysqlDBCompatibleData* _msg = _internal_mutable_compatibledata();
  // @@protoc_insertion_point(field_mutable:proto.UserMetaInfoV1.CompatibleData)
  return _msg;
}
inline void UserMetaInfoV1::set_allocated_compatibledata(::proto::BrainTellServerMysqlDBCompatibleData* compatibledata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compatibledata_;
  }
  if (compatibledata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compatibledata);
    if (message_arena != submessage_arena) {
      compatibledata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compatibledata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.compatibledata_ = compatibledata;
  // @@protoc_insertion_point(field_set_allocated:proto.UserMetaInfoV1.CompatibleData)
}

// -------------------------------------------------------------------

// PermissionGroupAceV1

// bool AllPermissionGroupManagementPermission = 1;
inline void PermissionGroupAceV1::clear_allpermissiongroupmanagementpermission() {
  _impl_.allpermissiongroupmanagementpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_allpermissiongroupmanagementpermission() const {
  return _impl_.allpermissiongroupmanagementpermission_;
}
inline bool PermissionGroupAceV1::allpermissiongroupmanagementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.AllPermissionGroupManagementPermission)
  return _internal_allpermissiongroupmanagementpermission();
}
inline void PermissionGroupAceV1::_internal_set_allpermissiongroupmanagementpermission(bool value) {
  
  _impl_.allpermissiongroupmanagementpermission_ = value;
}
inline void PermissionGroupAceV1::set_allpermissiongroupmanagementpermission(bool value) {
  _internal_set_allpermissiongroupmanagementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.AllPermissionGroupManagementPermission)
}

// bool AllUserManagementPermission = 2;
inline void PermissionGroupAceV1::clear_allusermanagementpermission() {
  _impl_.allusermanagementpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_allusermanagementpermission() const {
  return _impl_.allusermanagementpermission_;
}
inline bool PermissionGroupAceV1::allusermanagementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.AllUserManagementPermission)
  return _internal_allusermanagementpermission();
}
inline void PermissionGroupAceV1::_internal_set_allusermanagementpermission(bool value) {
  
  _impl_.allusermanagementpermission_ = value;
}
inline void PermissionGroupAceV1::set_allusermanagementpermission(bool value) {
  _internal_set_allusermanagementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.AllUserManagementPermission)
}

// bool AllProjectManagementPermission = 3;
inline void PermissionGroupAceV1::clear_allprojectmanagementpermission() {
  _impl_.allprojectmanagementpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_allprojectmanagementpermission() const {
  return _impl_.allprojectmanagementpermission_;
}
inline bool PermissionGroupAceV1::allprojectmanagementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.AllProjectManagementPermission)
  return _internal_allprojectmanagementpermission();
}
inline void PermissionGroupAceV1::_internal_set_allprojectmanagementpermission(bool value) {
  
  _impl_.allprojectmanagementpermission_ = value;
}
inline void PermissionGroupAceV1::set_allprojectmanagementpermission(bool value) {
  _internal_set_allprojectmanagementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.AllProjectManagementPermission)
}

// bool AllSwcManagementPermission = 4;
inline void PermissionGroupAceV1::clear_allswcmanagementpermission() {
  _impl_.allswcmanagementpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_allswcmanagementpermission() const {
  return _impl_.allswcmanagementpermission_;
}
inline bool PermissionGroupAceV1::allswcmanagementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.AllSwcManagementPermission)
  return _internal_allswcmanagementpermission();
}
inline void PermissionGroupAceV1::_internal_set_allswcmanagementpermission(bool value) {
  
  _impl_.allswcmanagementpermission_ = value;
}
inline void PermissionGroupAceV1::set_allswcmanagementpermission(bool value) {
  _internal_set_allswcmanagementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.AllSwcManagementPermission)
}

// bool AllDailyStatisticsManagementPermission = 5;
inline void PermissionGroupAceV1::clear_alldailystatisticsmanagementpermission() {
  _impl_.alldailystatisticsmanagementpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_alldailystatisticsmanagementpermission() const {
  return _impl_.alldailystatisticsmanagementpermission_;
}
inline bool PermissionGroupAceV1::alldailystatisticsmanagementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.AllDailyStatisticsManagementPermission)
  return _internal_alldailystatisticsmanagementpermission();
}
inline void PermissionGroupAceV1::_internal_set_alldailystatisticsmanagementpermission(bool value) {
  
  _impl_.alldailystatisticsmanagementpermission_ = value;
}
inline void PermissionGroupAceV1::set_alldailystatisticsmanagementpermission(bool value) {
  _internal_set_alldailystatisticsmanagementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.AllDailyStatisticsManagementPermission)
}

// bool CreateProjectPermission = 6;
inline void PermissionGroupAceV1::clear_createprojectpermission() {
  _impl_.createprojectpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_createprojectpermission() const {
  return _impl_.createprojectpermission_;
}
inline bool PermissionGroupAceV1::createprojectpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.CreateProjectPermission)
  return _internal_createprojectpermission();
}
inline void PermissionGroupAceV1::_internal_set_createprojectpermission(bool value) {
  
  _impl_.createprojectpermission_ = value;
}
inline void PermissionGroupAceV1::set_createprojectpermission(bool value) {
  _internal_set_createprojectpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.CreateProjectPermission)
}

// bool CreateSwcPermission = 7;
inline void PermissionGroupAceV1::clear_createswcpermission() {
  _impl_.createswcpermission_ = false;
}
inline bool PermissionGroupAceV1::_internal_createswcpermission() const {
  return _impl_.createswcpermission_;
}
inline bool PermissionGroupAceV1::createswcpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAceV1.CreateSwcPermission)
  return _internal_createswcpermission();
}
inline void PermissionGroupAceV1::_internal_set_createswcpermission(bool value) {
  
  _impl_.createswcpermission_ = value;
}
inline void PermissionGroupAceV1::set_createswcpermission(bool value) {
  _internal_set_createswcpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAceV1.CreateSwcPermission)
}

// -------------------------------------------------------------------

// PermissionGroupAclV1

// string PermissionGroupUuid = 1;
inline void PermissionGroupAclV1::clear_permissiongroupuuid() {
  _impl_.permissiongroupuuid_.ClearToEmpty();
}
inline const std::string& PermissionGroupAclV1::permissiongroupuuid() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAclV1.PermissionGroupUuid)
  return _internal_permissiongroupuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionGroupAclV1::set_permissiongroupuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permissiongroupuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PermissionGroupAclV1.PermissionGroupUuid)
}
inline std::string* PermissionGroupAclV1::mutable_permissiongroupuuid() {
  std::string* _s = _internal_mutable_permissiongroupuuid();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupAclV1.PermissionGroupUuid)
  return _s;
}
inline const std::string& PermissionGroupAclV1::_internal_permissiongroupuuid() const {
  return _impl_.permissiongroupuuid_.Get();
}
inline void PermissionGroupAclV1::_internal_set_permissiongroupuuid(const std::string& value) {
  
  _impl_.permissiongroupuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionGroupAclV1::_internal_mutable_permissiongroupuuid() {
  
  return _impl_.permissiongroupuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionGroupAclV1::release_permissiongroupuuid() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupAclV1.PermissionGroupUuid)
  return _impl_.permissiongroupuuid_.Release();
}
inline void PermissionGroupAclV1::set_allocated_permissiongroupuuid(std::string* permissiongroupuuid) {
  if (permissiongroupuuid != nullptr) {
    
  } else {
    
  }
  _impl_.permissiongroupuuid_.SetAllocated(permissiongroupuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permissiongroupuuid_.IsDefault()) {
    _impl_.permissiongroupuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupAclV1.PermissionGroupUuid)
}

// .proto.PermissionGroupAceV1 PermissionGroupAce = 2;
inline bool PermissionGroupAclV1::_internal_has_permissiongroupace() const {
  return this != internal_default_instance() && _impl_.permissiongroupace_ != nullptr;
}
inline bool PermissionGroupAclV1::has_permissiongroupace() const {
  return _internal_has_permissiongroupace();
}
inline void PermissionGroupAclV1::clear_permissiongroupace() {
  if (GetArenaForAllocation() == nullptr && _impl_.permissiongroupace_ != nullptr) {
    delete _impl_.permissiongroupace_;
  }
  _impl_.permissiongroupace_ = nullptr;
}
inline const ::proto::PermissionGroupAceV1& PermissionGroupAclV1::_internal_permissiongroupace() const {
  const ::proto::PermissionGroupAceV1* p = _impl_.permissiongroupace_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupAceV1&>(
      ::proto::_PermissionGroupAceV1_default_instance_);
}
inline const ::proto::PermissionGroupAceV1& PermissionGroupAclV1::permissiongroupace() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupAclV1.PermissionGroupAce)
  return _internal_permissiongroupace();
}
inline void PermissionGroupAclV1::unsafe_arena_set_allocated_permissiongroupace(
    ::proto::PermissionGroupAceV1* permissiongroupace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroupace_);
  }
  _impl_.permissiongroupace_ = permissiongroupace;
  if (permissiongroupace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupAclV1.PermissionGroupAce)
}
inline ::proto::PermissionGroupAceV1* PermissionGroupAclV1::release_permissiongroupace() {
  
  ::proto::PermissionGroupAceV1* temp = _impl_.permissiongroupace_;
  _impl_.permissiongroupace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupAclV1::unsafe_arena_release_permissiongroupace() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupAclV1.PermissionGroupAce)
  
  ::proto::PermissionGroupAceV1* temp = _impl_.permissiongroupace_;
  _impl_.permissiongroupace_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupAclV1::_internal_mutable_permissiongroupace() {
  
  if (_impl_.permissiongroupace_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupAceV1>(GetArenaForAllocation());
    _impl_.permissiongroupace_ = p;
  }
  return _impl_.permissiongroupace_;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupAclV1::mutable_permissiongroupace() {
  ::proto::PermissionGroupAceV1* _msg = _internal_mutable_permissiongroupace();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupAclV1.PermissionGroupAce)
  return _msg;
}
inline void PermissionGroupAclV1::set_allocated_permissiongroupace(::proto::PermissionGroupAceV1* permissiongroupace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.permissiongroupace_;
  }
  if (permissiongroupace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(permissiongroupace);
    if (message_arena != submessage_arena) {
      permissiongroupace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroupace, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroupace_ = permissiongroupace;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupAclV1.PermissionGroupAce)
}

// -------------------------------------------------------------------

// PermissionAceV1

// bool WritePermissionModifyProject = 1;
inline void PermissionAceV1::clear_writepermissionmodifyproject() {
  _impl_.writepermissionmodifyproject_ = false;
}
inline bool PermissionAceV1::_internal_writepermissionmodifyproject() const {
  return _impl_.writepermissionmodifyproject_;
}
inline bool PermissionAceV1::writepermissionmodifyproject() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionModifyProject)
  return _internal_writepermissionmodifyproject();
}
inline void PermissionAceV1::_internal_set_writepermissionmodifyproject(bool value) {
  
  _impl_.writepermissionmodifyproject_ = value;
}
inline void PermissionAceV1::set_writepermissionmodifyproject(bool value) {
  _internal_set_writepermissionmodifyproject(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionModifyProject)
}

// bool WritePermissionDeleteProject = 2;
inline void PermissionAceV1::clear_writepermissiondeleteproject() {
  _impl_.writepermissiondeleteproject_ = false;
}
inline bool PermissionAceV1::_internal_writepermissiondeleteproject() const {
  return _impl_.writepermissiondeleteproject_;
}
inline bool PermissionAceV1::writepermissiondeleteproject() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionDeleteProject)
  return _internal_writepermissiondeleteproject();
}
inline void PermissionAceV1::_internal_set_writepermissiondeleteproject(bool value) {
  
  _impl_.writepermissiondeleteproject_ = value;
}
inline void PermissionAceV1::set_writepermissiondeleteproject(bool value) {
  _internal_set_writepermissiondeleteproject(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionDeleteProject)
}

// bool ReadPerimissionQueryProject = 3;
inline void PermissionAceV1::clear_readperimissionqueryproject() {
  _impl_.readperimissionqueryproject_ = false;
}
inline bool PermissionAceV1::_internal_readperimissionqueryproject() const {
  return _impl_.readperimissionqueryproject_;
}
inline bool PermissionAceV1::readperimissionqueryproject() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.ReadPerimissionQueryProject)
  return _internal_readperimissionqueryproject();
}
inline void PermissionAceV1::_internal_set_readperimissionqueryproject(bool value) {
  
  _impl_.readperimissionqueryproject_ = value;
}
inline void PermissionAceV1::set_readperimissionqueryproject(bool value) {
  _internal_set_readperimissionqueryproject(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.ReadPerimissionQueryProject)
}

// bool WritePermissionUpdateSwc = 4;
inline void PermissionAceV1::clear_writepermissionupdateswc() {
  _impl_.writepermissionupdateswc_ = false;
}
inline bool PermissionAceV1::_internal_writepermissionupdateswc() const {
  return _impl_.writepermissionupdateswc_;
}
inline bool PermissionAceV1::writepermissionupdateswc() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionUpdateSwc)
  return _internal_writepermissionupdateswc();
}
inline void PermissionAceV1::_internal_set_writepermissionupdateswc(bool value) {
  
  _impl_.writepermissionupdateswc_ = value;
}
inline void PermissionAceV1::set_writepermissionupdateswc(bool value) {
  _internal_set_writepermissionupdateswc(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionUpdateSwc)
}

// bool WritePermissionDeleteSwc = 5;
inline void PermissionAceV1::clear_writepermissiondeleteswc() {
  _impl_.writepermissiondeleteswc_ = false;
}
inline bool PermissionAceV1::_internal_writepermissiondeleteswc() const {
  return _impl_.writepermissiondeleteswc_;
}
inline bool PermissionAceV1::writepermissiondeleteswc() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionDeleteSwc)
  return _internal_writepermissiondeleteswc();
}
inline void PermissionAceV1::_internal_set_writepermissiondeleteswc(bool value) {
  
  _impl_.writepermissiondeleteswc_ = value;
}
inline void PermissionAceV1::set_writepermissiondeleteswc(bool value) {
  _internal_set_writepermissiondeleteswc(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionDeleteSwc)
}

// bool ReadPerimissionQuerySwc = 6;
inline void PermissionAceV1::clear_readperimissionqueryswc() {
  _impl_.readperimissionqueryswc_ = false;
}
inline bool PermissionAceV1::_internal_readperimissionqueryswc() const {
  return _impl_.readperimissionqueryswc_;
}
inline bool PermissionAceV1::readperimissionqueryswc() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.ReadPerimissionQuerySwc)
  return _internal_readperimissionqueryswc();
}
inline void PermissionAceV1::_internal_set_readperimissionqueryswc(bool value) {
  
  _impl_.readperimissionqueryswc_ = value;
}
inline void PermissionAceV1::set_readperimissionqueryswc(bool value) {
  _internal_set_readperimissionqueryswc(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.ReadPerimissionQuerySwc)
}

// bool WritePermissionAddSwcData = 7;
inline void PermissionAceV1::clear_writepermissionaddswcdata() {
  _impl_.writepermissionaddswcdata_ = false;
}
inline bool PermissionAceV1::_internal_writepermissionaddswcdata() const {
  return _impl_.writepermissionaddswcdata_;
}
inline bool PermissionAceV1::writepermissionaddswcdata() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionAddSwcData)
  return _internal_writepermissionaddswcdata();
}
inline void PermissionAceV1::_internal_set_writepermissionaddswcdata(bool value) {
  
  _impl_.writepermissionaddswcdata_ = value;
}
inline void PermissionAceV1::set_writepermissionaddswcdata(bool value) {
  _internal_set_writepermissionaddswcdata(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionAddSwcData)
}

// bool WritePermissionModifySwcData = 8;
inline void PermissionAceV1::clear_writepermissionmodifyswcdata() {
  _impl_.writepermissionmodifyswcdata_ = false;
}
inline bool PermissionAceV1::_internal_writepermissionmodifyswcdata() const {
  return _impl_.writepermissionmodifyswcdata_;
}
inline bool PermissionAceV1::writepermissionmodifyswcdata() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionModifySwcData)
  return _internal_writepermissionmodifyswcdata();
}
inline void PermissionAceV1::_internal_set_writepermissionmodifyswcdata(bool value) {
  
  _impl_.writepermissionmodifyswcdata_ = value;
}
inline void PermissionAceV1::set_writepermissionmodifyswcdata(bool value) {
  _internal_set_writepermissionmodifyswcdata(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionModifySwcData)
}

// bool WritePermissionDeleteSwcData = 9;
inline void PermissionAceV1::clear_writepermissiondeleteswcdata() {
  _impl_.writepermissiondeleteswcdata_ = false;
}
inline bool PermissionAceV1::_internal_writepermissiondeleteswcdata() const {
  return _impl_.writepermissiondeleteswcdata_;
}
inline bool PermissionAceV1::writepermissiondeleteswcdata() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.WritePermissionDeleteSwcData)
  return _internal_writepermissiondeleteswcdata();
}
inline void PermissionAceV1::_internal_set_writepermissiondeleteswcdata(bool value) {
  
  _impl_.writepermissiondeleteswcdata_ = value;
}
inline void PermissionAceV1::set_writepermissiondeleteswcdata(bool value) {
  _internal_set_writepermissiondeleteswcdata(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.WritePermissionDeleteSwcData)
}

// bool ReadPerimissionQuerySwcData = 10;
inline void PermissionAceV1::clear_readperimissionqueryswcdata() {
  _impl_.readperimissionqueryswcdata_ = false;
}
inline bool PermissionAceV1::_internal_readperimissionqueryswcdata() const {
  return _impl_.readperimissionqueryswcdata_;
}
inline bool PermissionAceV1::readperimissionqueryswcdata() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.ReadPerimissionQuerySwcData)
  return _internal_readperimissionqueryswcdata();
}
inline void PermissionAceV1::_internal_set_readperimissionqueryswcdata(bool value) {
  
  _impl_.readperimissionqueryswcdata_ = value;
}
inline void PermissionAceV1::set_readperimissionqueryswcdata(bool value) {
  _internal_set_readperimissionqueryswcdata(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.ReadPerimissionQuerySwcData)
}

// bool CreateSnapshotAndIncrementPermission = 11;
inline void PermissionAceV1::clear_createsnapshotandincrementpermission() {
  _impl_.createsnapshotandincrementpermission_ = false;
}
inline bool PermissionAceV1::_internal_createsnapshotandincrementpermission() const {
  return _impl_.createsnapshotandincrementpermission_;
}
inline bool PermissionAceV1::createsnapshotandincrementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.CreateSnapshotAndIncrementPermission)
  return _internal_createsnapshotandincrementpermission();
}
inline void PermissionAceV1::_internal_set_createsnapshotandincrementpermission(bool value) {
  
  _impl_.createsnapshotandincrementpermission_ = value;
}
inline void PermissionAceV1::set_createsnapshotandincrementpermission(bool value) {
  _internal_set_createsnapshotandincrementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.CreateSnapshotAndIncrementPermission)
}

// bool DeleteSnapshotAndIncrementPermission = 12;
inline void PermissionAceV1::clear_deletesnapshotandincrementpermission() {
  _impl_.deletesnapshotandincrementpermission_ = false;
}
inline bool PermissionAceV1::_internal_deletesnapshotandincrementpermission() const {
  return _impl_.deletesnapshotandincrementpermission_;
}
inline bool PermissionAceV1::deletesnapshotandincrementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.DeleteSnapshotAndIncrementPermission)
  return _internal_deletesnapshotandincrementpermission();
}
inline void PermissionAceV1::_internal_set_deletesnapshotandincrementpermission(bool value) {
  
  _impl_.deletesnapshotandincrementpermission_ = value;
}
inline void PermissionAceV1::set_deletesnapshotandincrementpermission(bool value) {
  _internal_set_deletesnapshotandincrementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.DeleteSnapshotAndIncrementPermission)
}

// bool QuerySnapshotAndIncrementPermission = 13;
inline void PermissionAceV1::clear_querysnapshotandincrementpermission() {
  _impl_.querysnapshotandincrementpermission_ = false;
}
inline bool PermissionAceV1::_internal_querysnapshotandincrementpermission() const {
  return _impl_.querysnapshotandincrementpermission_;
}
inline bool PermissionAceV1::querysnapshotandincrementpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.QuerySnapshotAndIncrementPermission)
  return _internal_querysnapshotandincrementpermission();
}
inline void PermissionAceV1::_internal_set_querysnapshotandincrementpermission(bool value) {
  
  _impl_.querysnapshotandincrementpermission_ = value;
}
inline void PermissionAceV1::set_querysnapshotandincrementpermission(bool value) {
  _internal_set_querysnapshotandincrementpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.QuerySnapshotAndIncrementPermission)
}

// bool CreateAnoAttachmentPermission = 14;
inline void PermissionAceV1::clear_createanoattachmentpermission() {
  _impl_.createanoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_createanoattachmentpermission() const {
  return _impl_.createanoattachmentpermission_;
}
inline bool PermissionAceV1::createanoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.CreateAnoAttachmentPermission)
  return _internal_createanoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_createanoattachmentpermission(bool value) {
  
  _impl_.createanoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_createanoattachmentpermission(bool value) {
  _internal_set_createanoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.CreateAnoAttachmentPermission)
}

// bool DeleteAnoAttachmentPermission = 15;
inline void PermissionAceV1::clear_deleteanoattachmentpermission() {
  _impl_.deleteanoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_deleteanoattachmentpermission() const {
  return _impl_.deleteanoattachmentpermission_;
}
inline bool PermissionAceV1::deleteanoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.DeleteAnoAttachmentPermission)
  return _internal_deleteanoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_deleteanoattachmentpermission(bool value) {
  
  _impl_.deleteanoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_deleteanoattachmentpermission(bool value) {
  _internal_set_deleteanoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.DeleteAnoAttachmentPermission)
}

// bool UpdateAnoAttachmentPermission = 16;
inline void PermissionAceV1::clear_updateanoattachmentpermission() {
  _impl_.updateanoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_updateanoattachmentpermission() const {
  return _impl_.updateanoattachmentpermission_;
}
inline bool PermissionAceV1::updateanoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.UpdateAnoAttachmentPermission)
  return _internal_updateanoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_updateanoattachmentpermission(bool value) {
  
  _impl_.updateanoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_updateanoattachmentpermission(bool value) {
  _internal_set_updateanoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.UpdateAnoAttachmentPermission)
}

// bool QueryAnoAttachmentPermission = 17;
inline void PermissionAceV1::clear_queryanoattachmentpermission() {
  _impl_.queryanoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_queryanoattachmentpermission() const {
  return _impl_.queryanoattachmentpermission_;
}
inline bool PermissionAceV1::queryanoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.QueryAnoAttachmentPermission)
  return _internal_queryanoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_queryanoattachmentpermission(bool value) {
  
  _impl_.queryanoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_queryanoattachmentpermission(bool value) {
  _internal_set_queryanoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.QueryAnoAttachmentPermission)
}

// bool CreateApoAttachmentPermission = 18;
inline void PermissionAceV1::clear_createapoattachmentpermission() {
  _impl_.createapoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_createapoattachmentpermission() const {
  return _impl_.createapoattachmentpermission_;
}
inline bool PermissionAceV1::createapoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.CreateApoAttachmentPermission)
  return _internal_createapoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_createapoattachmentpermission(bool value) {
  
  _impl_.createapoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_createapoattachmentpermission(bool value) {
  _internal_set_createapoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.CreateApoAttachmentPermission)
}

// bool DeleteApoAttachmentPermission = 19;
inline void PermissionAceV1::clear_deleteapoattachmentpermission() {
  _impl_.deleteapoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_deleteapoattachmentpermission() const {
  return _impl_.deleteapoattachmentpermission_;
}
inline bool PermissionAceV1::deleteapoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.DeleteApoAttachmentPermission)
  return _internal_deleteapoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_deleteapoattachmentpermission(bool value) {
  
  _impl_.deleteapoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_deleteapoattachmentpermission(bool value) {
  _internal_set_deleteapoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.DeleteApoAttachmentPermission)
}

// bool UpdateApoAttachmentPermission = 20;
inline void PermissionAceV1::clear_updateapoattachmentpermission() {
  _impl_.updateapoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_updateapoattachmentpermission() const {
  return _impl_.updateapoattachmentpermission_;
}
inline bool PermissionAceV1::updateapoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.UpdateApoAttachmentPermission)
  return _internal_updateapoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_updateapoattachmentpermission(bool value) {
  
  _impl_.updateapoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_updateapoattachmentpermission(bool value) {
  _internal_set_updateapoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.UpdateApoAttachmentPermission)
}

// bool QueryApoAttachmentPermission = 21;
inline void PermissionAceV1::clear_queryapoattachmentpermission() {
  _impl_.queryapoattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_queryapoattachmentpermission() const {
  return _impl_.queryapoattachmentpermission_;
}
inline bool PermissionAceV1::queryapoattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.QueryApoAttachmentPermission)
  return _internal_queryapoattachmentpermission();
}
inline void PermissionAceV1::_internal_set_queryapoattachmentpermission(bool value) {
  
  _impl_.queryapoattachmentpermission_ = value;
}
inline void PermissionAceV1::set_queryapoattachmentpermission(bool value) {
  _internal_set_queryapoattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.QueryApoAttachmentPermission)
}

// bool CreateSwcAttachmentPermission = 22;
inline void PermissionAceV1::clear_createswcattachmentpermission() {
  _impl_.createswcattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_createswcattachmentpermission() const {
  return _impl_.createswcattachmentpermission_;
}
inline bool PermissionAceV1::createswcattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.CreateSwcAttachmentPermission)
  return _internal_createswcattachmentpermission();
}
inline void PermissionAceV1::_internal_set_createswcattachmentpermission(bool value) {
  
  _impl_.createswcattachmentpermission_ = value;
}
inline void PermissionAceV1::set_createswcattachmentpermission(bool value) {
  _internal_set_createswcattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.CreateSwcAttachmentPermission)
}

// bool DeleteSwcAttachmentPermission = 23;
inline void PermissionAceV1::clear_deleteswcattachmentpermission() {
  _impl_.deleteswcattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_deleteswcattachmentpermission() const {
  return _impl_.deleteswcattachmentpermission_;
}
inline bool PermissionAceV1::deleteswcattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.DeleteSwcAttachmentPermission)
  return _internal_deleteswcattachmentpermission();
}
inline void PermissionAceV1::_internal_set_deleteswcattachmentpermission(bool value) {
  
  _impl_.deleteswcattachmentpermission_ = value;
}
inline void PermissionAceV1::set_deleteswcattachmentpermission(bool value) {
  _internal_set_deleteswcattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.DeleteSwcAttachmentPermission)
}

// bool UpdateSwcAttachmentPermission = 24;
inline void PermissionAceV1::clear_updateswcattachmentpermission() {
  _impl_.updateswcattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_updateswcattachmentpermission() const {
  return _impl_.updateswcattachmentpermission_;
}
inline bool PermissionAceV1::updateswcattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.UpdateSwcAttachmentPermission)
  return _internal_updateswcattachmentpermission();
}
inline void PermissionAceV1::_internal_set_updateswcattachmentpermission(bool value) {
  
  _impl_.updateswcattachmentpermission_ = value;
}
inline void PermissionAceV1::set_updateswcattachmentpermission(bool value) {
  _internal_set_updateswcattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.UpdateSwcAttachmentPermission)
}

// bool QuerySwcAttachmentPermission = 25;
inline void PermissionAceV1::clear_queryswcattachmentpermission() {
  _impl_.queryswcattachmentpermission_ = false;
}
inline bool PermissionAceV1::_internal_queryswcattachmentpermission() const {
  return _impl_.queryswcattachmentpermission_;
}
inline bool PermissionAceV1::queryswcattachmentpermission() const {
  // @@protoc_insertion_point(field_get:proto.PermissionAceV1.QuerySwcAttachmentPermission)
  return _internal_queryswcattachmentpermission();
}
inline void PermissionAceV1::_internal_set_queryswcattachmentpermission(bool value) {
  
  _impl_.queryswcattachmentpermission_ = value;
}
inline void PermissionAceV1::set_queryswcattachmentpermission(bool value) {
  _internal_set_queryswcattachmentpermission(value);
  // @@protoc_insertion_point(field_set:proto.PermissionAceV1.QuerySwcAttachmentPermission)
}

// -------------------------------------------------------------------

// UserPermissionAclV1

// string UserUuid = 1;
inline void UserPermissionAclV1::clear_useruuid() {
  _impl_.useruuid_.ClearToEmpty();
}
inline const std::string& UserPermissionAclV1::useruuid() const {
  // @@protoc_insertion_point(field_get:proto.UserPermissionAclV1.UserUuid)
  return _internal_useruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserPermissionAclV1::set_useruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.useruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserPermissionAclV1.UserUuid)
}
inline std::string* UserPermissionAclV1::mutable_useruuid() {
  std::string* _s = _internal_mutable_useruuid();
  // @@protoc_insertion_point(field_mutable:proto.UserPermissionAclV1.UserUuid)
  return _s;
}
inline const std::string& UserPermissionAclV1::_internal_useruuid() const {
  return _impl_.useruuid_.Get();
}
inline void UserPermissionAclV1::_internal_set_useruuid(const std::string& value) {
  
  _impl_.useruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UserPermissionAclV1::_internal_mutable_useruuid() {
  
  return _impl_.useruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UserPermissionAclV1::release_useruuid() {
  // @@protoc_insertion_point(field_release:proto.UserPermissionAclV1.UserUuid)
  return _impl_.useruuid_.Release();
}
inline void UserPermissionAclV1::set_allocated_useruuid(std::string* useruuid) {
  if (useruuid != nullptr) {
    
  } else {
    
  }
  _impl_.useruuid_.SetAllocated(useruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.useruuid_.IsDefault()) {
    _impl_.useruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserPermissionAclV1.UserUuid)
}

// .proto.PermissionAceV1 Ace = 2;
inline bool UserPermissionAclV1::_internal_has_ace() const {
  return this != internal_default_instance() && _impl_.ace_ != nullptr;
}
inline bool UserPermissionAclV1::has_ace() const {
  return _internal_has_ace();
}
inline void UserPermissionAclV1::clear_ace() {
  if (GetArenaForAllocation() == nullptr && _impl_.ace_ != nullptr) {
    delete _impl_.ace_;
  }
  _impl_.ace_ = nullptr;
}
inline const ::proto::PermissionAceV1& UserPermissionAclV1::_internal_ace() const {
  const ::proto::PermissionAceV1* p = _impl_.ace_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionAceV1&>(
      ::proto::_PermissionAceV1_default_instance_);
}
inline const ::proto::PermissionAceV1& UserPermissionAclV1::ace() const {
  // @@protoc_insertion_point(field_get:proto.UserPermissionAclV1.Ace)
  return _internal_ace();
}
inline void UserPermissionAclV1::unsafe_arena_set_allocated_ace(
    ::proto::PermissionAceV1* ace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ace_);
  }
  _impl_.ace_ = ace;
  if (ace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserPermissionAclV1.Ace)
}
inline ::proto::PermissionAceV1* UserPermissionAclV1::release_ace() {
  
  ::proto::PermissionAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionAceV1* UserPermissionAclV1::unsafe_arena_release_ace() {
  // @@protoc_insertion_point(field_release:proto.UserPermissionAclV1.Ace)
  
  ::proto::PermissionAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
  return temp;
}
inline ::proto::PermissionAceV1* UserPermissionAclV1::_internal_mutable_ace() {
  
  if (_impl_.ace_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionAceV1>(GetArenaForAllocation());
    _impl_.ace_ = p;
  }
  return _impl_.ace_;
}
inline ::proto::PermissionAceV1* UserPermissionAclV1::mutable_ace() {
  ::proto::PermissionAceV1* _msg = _internal_mutable_ace();
  // @@protoc_insertion_point(field_mutable:proto.UserPermissionAclV1.Ace)
  return _msg;
}
inline void UserPermissionAclV1::set_allocated_ace(::proto::PermissionAceV1* ace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ace_;
  }
  if (ace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ace);
    if (message_arena != submessage_arena) {
      ace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ace, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ace_ = ace;
  // @@protoc_insertion_point(field_set_allocated:proto.UserPermissionAclV1.Ace)
}

// -------------------------------------------------------------------

// GroupPermissionAclV1

// string GroupUuid = 1;
inline void GroupPermissionAclV1::clear_groupuuid() {
  _impl_.groupuuid_.ClearToEmpty();
}
inline const std::string& GroupPermissionAclV1::groupuuid() const {
  // @@protoc_insertion_point(field_get:proto.GroupPermissionAclV1.GroupUuid)
  return _internal_groupuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupPermissionAclV1::set_groupuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.groupuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GroupPermissionAclV1.GroupUuid)
}
inline std::string* GroupPermissionAclV1::mutable_groupuuid() {
  std::string* _s = _internal_mutable_groupuuid();
  // @@protoc_insertion_point(field_mutable:proto.GroupPermissionAclV1.GroupUuid)
  return _s;
}
inline const std::string& GroupPermissionAclV1::_internal_groupuuid() const {
  return _impl_.groupuuid_.Get();
}
inline void GroupPermissionAclV1::_internal_set_groupuuid(const std::string& value) {
  
  _impl_.groupuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupPermissionAclV1::_internal_mutable_groupuuid() {
  
  return _impl_.groupuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupPermissionAclV1::release_groupuuid() {
  // @@protoc_insertion_point(field_release:proto.GroupPermissionAclV1.GroupUuid)
  return _impl_.groupuuid_.Release();
}
inline void GroupPermissionAclV1::set_allocated_groupuuid(std::string* groupuuid) {
  if (groupuuid != nullptr) {
    
  } else {
    
  }
  _impl_.groupuuid_.SetAllocated(groupuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.groupuuid_.IsDefault()) {
    _impl_.groupuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GroupPermissionAclV1.GroupUuid)
}

// .proto.PermissionAceV1 Ace = 2;
inline bool GroupPermissionAclV1::_internal_has_ace() const {
  return this != internal_default_instance() && _impl_.ace_ != nullptr;
}
inline bool GroupPermissionAclV1::has_ace() const {
  return _internal_has_ace();
}
inline void GroupPermissionAclV1::clear_ace() {
  if (GetArenaForAllocation() == nullptr && _impl_.ace_ != nullptr) {
    delete _impl_.ace_;
  }
  _impl_.ace_ = nullptr;
}
inline const ::proto::PermissionAceV1& GroupPermissionAclV1::_internal_ace() const {
  const ::proto::PermissionAceV1* p = _impl_.ace_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionAceV1&>(
      ::proto::_PermissionAceV1_default_instance_);
}
inline const ::proto::PermissionAceV1& GroupPermissionAclV1::ace() const {
  // @@protoc_insertion_point(field_get:proto.GroupPermissionAclV1.Ace)
  return _internal_ace();
}
inline void GroupPermissionAclV1::unsafe_arena_set_allocated_ace(
    ::proto::PermissionAceV1* ace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ace_);
  }
  _impl_.ace_ = ace;
  if (ace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GroupPermissionAclV1.Ace)
}
inline ::proto::PermissionAceV1* GroupPermissionAclV1::release_ace() {
  
  ::proto::PermissionAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionAceV1* GroupPermissionAclV1::unsafe_arena_release_ace() {
  // @@protoc_insertion_point(field_release:proto.GroupPermissionAclV1.Ace)
  
  ::proto::PermissionAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
  return temp;
}
inline ::proto::PermissionAceV1* GroupPermissionAclV1::_internal_mutable_ace() {
  
  if (_impl_.ace_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionAceV1>(GetArenaForAllocation());
    _impl_.ace_ = p;
  }
  return _impl_.ace_;
}
inline ::proto::PermissionAceV1* GroupPermissionAclV1::mutable_ace() {
  ::proto::PermissionAceV1* _msg = _internal_mutable_ace();
  // @@protoc_insertion_point(field_mutable:proto.GroupPermissionAclV1.Ace)
  return _msg;
}
inline void GroupPermissionAclV1::set_allocated_ace(::proto::PermissionAceV1* ace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ace_;
  }
  if (ace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ace);
    if (message_arena != submessage_arena) {
      ace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ace, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ace_ = ace;
  // @@protoc_insertion_point(field_set_allocated:proto.GroupPermissionAclV1.Ace)
}

// -------------------------------------------------------------------

// PermissionMetaInfoV1

// .proto.UserPermissionAclV1 Owner = 1;
inline bool PermissionMetaInfoV1::_internal_has_owner() const {
  return this != internal_default_instance() && _impl_.owner_ != nullptr;
}
inline bool PermissionMetaInfoV1::has_owner() const {
  return _internal_has_owner();
}
inline void PermissionMetaInfoV1::clear_owner() {
  if (GetArenaForAllocation() == nullptr && _impl_.owner_ != nullptr) {
    delete _impl_.owner_;
  }
  _impl_.owner_ = nullptr;
}
inline const ::proto::UserPermissionAclV1& PermissionMetaInfoV1::_internal_owner() const {
  const ::proto::UserPermissionAclV1* p = _impl_.owner_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserPermissionAclV1&>(
      ::proto::_UserPermissionAclV1_default_instance_);
}
inline const ::proto::UserPermissionAclV1& PermissionMetaInfoV1::owner() const {
  // @@protoc_insertion_point(field_get:proto.PermissionMetaInfoV1.Owner)
  return _internal_owner();
}
inline void PermissionMetaInfoV1::unsafe_arena_set_allocated_owner(
    ::proto::UserPermissionAclV1* owner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owner_);
  }
  _impl_.owner_ = owner;
  if (owner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionMetaInfoV1.Owner)
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::release_owner() {
  
  ::proto::UserPermissionAclV1* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::unsafe_arena_release_owner() {
  // @@protoc_insertion_point(field_release:proto.PermissionMetaInfoV1.Owner)
  
  ::proto::UserPermissionAclV1* temp = _impl_.owner_;
  _impl_.owner_ = nullptr;
  return temp;
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::_internal_mutable_owner() {
  
  if (_impl_.owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserPermissionAclV1>(GetArenaForAllocation());
    _impl_.owner_ = p;
  }
  return _impl_.owner_;
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::mutable_owner() {
  ::proto::UserPermissionAclV1* _msg = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:proto.PermissionMetaInfoV1.Owner)
  return _msg;
}
inline void PermissionMetaInfoV1::set_allocated_owner(::proto::UserPermissionAclV1* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.owner_;
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(owner);
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionMetaInfoV1.Owner)
}

// repeated .proto.UserPermissionAclV1 Users = 2;
inline int PermissionMetaInfoV1::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int PermissionMetaInfoV1::users_size() const {
  return _internal_users_size();
}
inline void PermissionMetaInfoV1::clear_users() {
  _impl_.users_.Clear();
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PermissionMetaInfoV1.Users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserPermissionAclV1 >*
PermissionMetaInfoV1::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.PermissionMetaInfoV1.Users)
  return &_impl_.users_;
}
inline const ::proto::UserPermissionAclV1& PermissionMetaInfoV1::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::proto::UserPermissionAclV1& PermissionMetaInfoV1::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.PermissionMetaInfoV1.Users)
  return _internal_users(index);
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::proto::UserPermissionAclV1* PermissionMetaInfoV1::add_users() {
  ::proto::UserPermissionAclV1* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:proto.PermissionMetaInfoV1.Users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserPermissionAclV1 >&
PermissionMetaInfoV1::users() const {
  // @@protoc_insertion_point(field_list:proto.PermissionMetaInfoV1.Users)
  return _impl_.users_;
}

// repeated .proto.GroupPermissionAclV1 Groups = 3;
inline int PermissionMetaInfoV1::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int PermissionMetaInfoV1::groups_size() const {
  return _internal_groups_size();
}
inline void PermissionMetaInfoV1::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::proto::GroupPermissionAclV1* PermissionMetaInfoV1::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:proto.PermissionMetaInfoV1.Groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GroupPermissionAclV1 >*
PermissionMetaInfoV1::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:proto.PermissionMetaInfoV1.Groups)
  return &_impl_.groups_;
}
inline const ::proto::GroupPermissionAclV1& PermissionMetaInfoV1::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::proto::GroupPermissionAclV1& PermissionMetaInfoV1::groups(int index) const {
  // @@protoc_insertion_point(field_get:proto.PermissionMetaInfoV1.Groups)
  return _internal_groups(index);
}
inline ::proto::GroupPermissionAclV1* PermissionMetaInfoV1::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::proto::GroupPermissionAclV1* PermissionMetaInfoV1::add_groups() {
  ::proto::GroupPermissionAclV1* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:proto.PermissionMetaInfoV1.Groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GroupPermissionAclV1 >&
PermissionMetaInfoV1::groups() const {
  // @@protoc_insertion_point(field_list:proto.PermissionMetaInfoV1.Groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// PermissionGroupMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool PermissionGroupMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool PermissionGroupMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void PermissionGroupMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& PermissionGroupMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& PermissionGroupMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Base)
  return _internal_base();
}
inline void PermissionGroupMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* PermissionGroupMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Base)
  return _msg;
}
inline void PermissionGroupMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Base)
}

// string Name = 2;
inline void PermissionGroupMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PermissionGroupMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionGroupMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PermissionGroupMetaInfoV1.Name)
}
inline std::string* PermissionGroupMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Name)
  return _s;
}
inline const std::string& PermissionGroupMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PermissionGroupMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void PermissionGroupMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Name)
}

// string Description = 3;
inline void PermissionGroupMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& PermissionGroupMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionGroupMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.PermissionGroupMetaInfoV1.Description)
}
inline std::string* PermissionGroupMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Description)
  return _s;
}
inline const std::string& PermissionGroupMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void PermissionGroupMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* PermissionGroupMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void PermissionGroupMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Description)
}

// .proto.PermissionGroupAceV1 Ace = 4;
inline bool PermissionGroupMetaInfoV1::_internal_has_ace() const {
  return this != internal_default_instance() && _impl_.ace_ != nullptr;
}
inline bool PermissionGroupMetaInfoV1::has_ace() const {
  return _internal_has_ace();
}
inline void PermissionGroupMetaInfoV1::clear_ace() {
  if (GetArenaForAllocation() == nullptr && _impl_.ace_ != nullptr) {
    delete _impl_.ace_;
  }
  _impl_.ace_ = nullptr;
}
inline const ::proto::PermissionGroupAceV1& PermissionGroupMetaInfoV1::_internal_ace() const {
  const ::proto::PermissionGroupAceV1* p = _impl_.ace_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupAceV1&>(
      ::proto::_PermissionGroupAceV1_default_instance_);
}
inline const ::proto::PermissionGroupAceV1& PermissionGroupMetaInfoV1::ace() const {
  // @@protoc_insertion_point(field_get:proto.PermissionGroupMetaInfoV1.Ace)
  return _internal_ace();
}
inline void PermissionGroupMetaInfoV1::unsafe_arena_set_allocated_ace(
    ::proto::PermissionGroupAceV1* ace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ace_);
  }
  _impl_.ace_ = ace;
  if (ace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.PermissionGroupMetaInfoV1.Ace)
}
inline ::proto::PermissionGroupAceV1* PermissionGroupMetaInfoV1::release_ace() {
  
  ::proto::PermissionGroupAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupMetaInfoV1::unsafe_arena_release_ace() {
  // @@protoc_insertion_point(field_release:proto.PermissionGroupMetaInfoV1.Ace)
  
  ::proto::PermissionGroupAceV1* temp = _impl_.ace_;
  _impl_.ace_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupMetaInfoV1::_internal_mutable_ace() {
  
  if (_impl_.ace_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupAceV1>(GetArenaForAllocation());
    _impl_.ace_ = p;
  }
  return _impl_.ace_;
}
inline ::proto::PermissionGroupAceV1* PermissionGroupMetaInfoV1::mutable_ace() {
  ::proto::PermissionGroupAceV1* _msg = _internal_mutable_ace();
  // @@protoc_insertion_point(field_mutable:proto.PermissionGroupMetaInfoV1.Ace)
  return _msg;
}
inline void PermissionGroupMetaInfoV1::set_allocated_ace(::proto::PermissionGroupAceV1* ace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ace_;
  }
  if (ace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ace);
    if (message_arena != submessage_arena) {
      ace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ace, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ace_ = ace;
  // @@protoc_insertion_point(field_set_allocated:proto.PermissionGroupMetaInfoV1.Ace)
}

// -------------------------------------------------------------------

// ProjectMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool ProjectMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void ProjectMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& ProjectMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& ProjectMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Base)
  return _internal_base();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* ProjectMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Base)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Base)
}

// string Name = 2;
inline void ProjectMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Name)
}
inline std::string* ProjectMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Name)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Name)
}

// string Description = 3;
inline void ProjectMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Description)
}
inline std::string* ProjectMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Description)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Description)
}

// string Creator = 4;
inline void ProjectMetaInfoV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.Creator)
}
inline std::string* ProjectMetaInfoV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Creator)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Creator)
  return _impl_.creator_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Creator)
}

// .google.protobuf.Timestamp CreateTime = 5;
inline bool ProjectMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.CreateTime)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 6;
inline bool ProjectMetaInfoV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectMetaInfoV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectMetaInfoV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.LastModifiedTime)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.LastModifiedTime)
}

// repeated string SwcList = 7;
inline int ProjectMetaInfoV1::_internal_swclist_size() const {
  return _impl_.swclist_.size();
}
inline int ProjectMetaInfoV1::swclist_size() const {
  return _internal_swclist_size();
}
inline void ProjectMetaInfoV1::clear_swclist() {
  _impl_.swclist_.Clear();
}
inline std::string* ProjectMetaInfoV1::add_swclist() {
  std::string* _s = _internal_add_swclist();
  // @@protoc_insertion_point(field_add_mutable:proto.ProjectMetaInfoV1.SwcList)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_swclist(int index) const {
  return _impl_.swclist_.Get(index);
}
inline const std::string& ProjectMetaInfoV1::swclist(int index) const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.SwcList)
  return _internal_swclist(index);
}
inline std::string* ProjectMetaInfoV1::mutable_swclist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.SwcList)
  return _impl_.swclist_.Mutable(index);
}
inline void ProjectMetaInfoV1::set_swclist(int index, const std::string& value) {
  _impl_.swclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, std::string&& value) {
  _impl_.swclist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.swclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::set_swclist(int index, const char* value, size_t size) {
  _impl_.swclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.ProjectMetaInfoV1.SwcList)
}
inline std::string* ProjectMetaInfoV1::_internal_add_swclist() {
  return _impl_.swclist_.Add();
}
inline void ProjectMetaInfoV1::add_swclist(const std::string& value) {
  _impl_.swclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(std::string&& value) {
  _impl_.swclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.swclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.ProjectMetaInfoV1.SwcList)
}
inline void ProjectMetaInfoV1::add_swclist(const char* value, size_t size) {
  _impl_.swclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.ProjectMetaInfoV1.SwcList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProjectMetaInfoV1::swclist() const {
  // @@protoc_insertion_point(field_list:proto.ProjectMetaInfoV1.SwcList)
  return _impl_.swclist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProjectMetaInfoV1::mutable_swclist() {
  // @@protoc_insertion_point(field_mutable_list:proto.ProjectMetaInfoV1.SwcList)
  return &_impl_.swclist_;
}

// string WorkMode = 8;
inline void ProjectMetaInfoV1::clear_workmode() {
  _impl_.workmode_.ClearToEmpty();
}
inline const std::string& ProjectMetaInfoV1::workmode() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.WorkMode)
  return _internal_workmode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectMetaInfoV1::set_workmode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.workmode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ProjectMetaInfoV1.WorkMode)
}
inline std::string* ProjectMetaInfoV1::mutable_workmode() {
  std::string* _s = _internal_mutable_workmode();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.WorkMode)
  return _s;
}
inline const std::string& ProjectMetaInfoV1::_internal_workmode() const {
  return _impl_.workmode_.Get();
}
inline void ProjectMetaInfoV1::_internal_set_workmode(const std::string& value) {
  
  _impl_.workmode_.Set(value, GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::_internal_mutable_workmode() {
  
  return _impl_.workmode_.Mutable(GetArenaForAllocation());
}
inline std::string* ProjectMetaInfoV1::release_workmode() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.WorkMode)
  return _impl_.workmode_.Release();
}
inline void ProjectMetaInfoV1::set_allocated_workmode(std::string* workmode) {
  if (workmode != nullptr) {
    
  } else {
    
  }
  _impl_.workmode_.SetAllocated(workmode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.workmode_.IsDefault()) {
    _impl_.workmode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.WorkMode)
}

// .proto.PermissionMetaInfoV1 Permission = 9;
inline bool ProjectMetaInfoV1::_internal_has_permission() const {
  return this != internal_default_instance() && _impl_.permission_ != nullptr;
}
inline bool ProjectMetaInfoV1::has_permission() const {
  return _internal_has_permission();
}
inline void ProjectMetaInfoV1::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
inline const ::proto::PermissionMetaInfoV1& ProjectMetaInfoV1::_internal_permission() const {
  const ::proto::PermissionMetaInfoV1* p = _impl_.permission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionMetaInfoV1&>(
      ::proto::_PermissionMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionMetaInfoV1& ProjectMetaInfoV1::permission() const {
  // @@protoc_insertion_point(field_get:proto.ProjectMetaInfoV1.Permission)
  return _internal_permission();
}
inline void ProjectMetaInfoV1::unsafe_arena_set_allocated_permission(
    ::proto::PermissionMetaInfoV1* permission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permission_);
  }
  _impl_.permission_ = permission;
  if (permission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ProjectMetaInfoV1.Permission)
}
inline ::proto::PermissionMetaInfoV1* ProjectMetaInfoV1::release_permission() {
  
  ::proto::PermissionMetaInfoV1* temp = _impl_.permission_;
  _impl_.permission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionMetaInfoV1* ProjectMetaInfoV1::unsafe_arena_release_permission() {
  // @@protoc_insertion_point(field_release:proto.ProjectMetaInfoV1.Permission)
  
  ::proto::PermissionMetaInfoV1* temp = _impl_.permission_;
  _impl_.permission_ = nullptr;
  return temp;
}
inline ::proto::PermissionMetaInfoV1* ProjectMetaInfoV1::_internal_mutable_permission() {
  
  if (_impl_.permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.permission_ = p;
  }
  return _impl_.permission_;
}
inline ::proto::PermissionMetaInfoV1* ProjectMetaInfoV1::mutable_permission() {
  ::proto::PermissionMetaInfoV1* _msg = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:proto.ProjectMetaInfoV1.Permission)
  return _msg;
}
inline void ProjectMetaInfoV1::set_allocated_permission(::proto::PermissionMetaInfoV1* permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.permission_;
  }
  if (permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(permission);
    if (message_arena != submessage_arena) {
      permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:proto.ProjectMetaInfoV1.Permission)
}

// -------------------------------------------------------------------

// SwcSnapshotMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcSnapshotMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcSnapshotMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcSnapshotMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcSnapshotMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcSnapshotMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcSnapshotMetaInfoV1.Base)
  return _internal_base();
}
inline void SwcSnapshotMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcSnapshotMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* SwcSnapshotMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcSnapshotMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcSnapshotMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcSnapshotMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcSnapshotMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcSnapshotMetaInfoV1.Base)
  return _msg;
}
inline void SwcSnapshotMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcSnapshotMetaInfoV1.Base)
}

// string SwcSnapshotCollectionName = 2;
inline void SwcSnapshotMetaInfoV1::clear_swcsnapshotcollectionname() {
  _impl_.swcsnapshotcollectionname_.ClearToEmpty();
}
inline const std::string& SwcSnapshotMetaInfoV1::swcsnapshotcollectionname() const {
  // @@protoc_insertion_point(field_get:proto.SwcSnapshotMetaInfoV1.SwcSnapshotCollectionName)
  return _internal_swcsnapshotcollectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcSnapshotMetaInfoV1::set_swcsnapshotcollectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcsnapshotcollectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcSnapshotMetaInfoV1.SwcSnapshotCollectionName)
}
inline std::string* SwcSnapshotMetaInfoV1::mutable_swcsnapshotcollectionname() {
  std::string* _s = _internal_mutable_swcsnapshotcollectionname();
  // @@protoc_insertion_point(field_mutable:proto.SwcSnapshotMetaInfoV1.SwcSnapshotCollectionName)
  return _s;
}
inline const std::string& SwcSnapshotMetaInfoV1::_internal_swcsnapshotcollectionname() const {
  return _impl_.swcsnapshotcollectionname_.Get();
}
inline void SwcSnapshotMetaInfoV1::_internal_set_swcsnapshotcollectionname(const std::string& value) {
  
  _impl_.swcsnapshotcollectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcSnapshotMetaInfoV1::_internal_mutable_swcsnapshotcollectionname() {
  
  return _impl_.swcsnapshotcollectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcSnapshotMetaInfoV1::release_swcsnapshotcollectionname() {
  // @@protoc_insertion_point(field_release:proto.SwcSnapshotMetaInfoV1.SwcSnapshotCollectionName)
  return _impl_.swcsnapshotcollectionname_.Release();
}
inline void SwcSnapshotMetaInfoV1::set_allocated_swcsnapshotcollectionname(std::string* swcsnapshotcollectionname) {
  if (swcsnapshotcollectionname != nullptr) {
    
  } else {
    
  }
  _impl_.swcsnapshotcollectionname_.SetAllocated(swcsnapshotcollectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcsnapshotcollectionname_.IsDefault()) {
    _impl_.swcsnapshotcollectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcSnapshotMetaInfoV1.SwcSnapshotCollectionName)
}

// .google.protobuf.Timestamp CreateTime = 3;
inline bool SwcSnapshotMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcSnapshotMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcSnapshotMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcSnapshotMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcSnapshotMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void SwcSnapshotMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcSnapshotMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcSnapshotMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcSnapshotMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcSnapshotMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcSnapshotMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcSnapshotMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcSnapshotMetaInfoV1.CreateTime)
  return _msg;
}
inline void SwcSnapshotMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcSnapshotMetaInfoV1.CreateTime)
}

// string Creator = 4;
inline void SwcSnapshotMetaInfoV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SwcSnapshotMetaInfoV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.SwcSnapshotMetaInfoV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcSnapshotMetaInfoV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcSnapshotMetaInfoV1.Creator)
}
inline std::string* SwcSnapshotMetaInfoV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.SwcSnapshotMetaInfoV1.Creator)
  return _s;
}
inline const std::string& SwcSnapshotMetaInfoV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SwcSnapshotMetaInfoV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcSnapshotMetaInfoV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcSnapshotMetaInfoV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.SwcSnapshotMetaInfoV1.Creator)
  return _impl_.creator_.Release();
}
inline void SwcSnapshotMetaInfoV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcSnapshotMetaInfoV1.Creator)
}

// -------------------------------------------------------------------

// SwcIncrementOperationMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcIncrementOperationMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcIncrementOperationMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcIncrementOperationMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcIncrementOperationMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcIncrementOperationMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationMetaInfoV1.Base)
  return _internal_base();
}
inline void SwcIncrementOperationMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcIncrementOperationMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* SwcIncrementOperationMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationMetaInfoV1.Base)
  return _msg;
}
inline void SwcIncrementOperationMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationMetaInfoV1.Base)
}

// string IncrementOperationCollectionName = 2;
inline void SwcIncrementOperationMetaInfoV1::clear_incrementoperationcollectionname() {
  _impl_.incrementoperationcollectionname_.ClearToEmpty();
}
inline const std::string& SwcIncrementOperationMetaInfoV1::incrementoperationcollectionname() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationMetaInfoV1.IncrementOperationCollectionName)
  return _internal_incrementoperationcollectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcIncrementOperationMetaInfoV1::set_incrementoperationcollectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.incrementoperationcollectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcIncrementOperationMetaInfoV1.IncrementOperationCollectionName)
}
inline std::string* SwcIncrementOperationMetaInfoV1::mutable_incrementoperationcollectionname() {
  std::string* _s = _internal_mutable_incrementoperationcollectionname();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationMetaInfoV1.IncrementOperationCollectionName)
  return _s;
}
inline const std::string& SwcIncrementOperationMetaInfoV1::_internal_incrementoperationcollectionname() const {
  return _impl_.incrementoperationcollectionname_.Get();
}
inline void SwcIncrementOperationMetaInfoV1::_internal_set_incrementoperationcollectionname(const std::string& value) {
  
  _impl_.incrementoperationcollectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcIncrementOperationMetaInfoV1::_internal_mutable_incrementoperationcollectionname() {
  
  return _impl_.incrementoperationcollectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcIncrementOperationMetaInfoV1::release_incrementoperationcollectionname() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationMetaInfoV1.IncrementOperationCollectionName)
  return _impl_.incrementoperationcollectionname_.Release();
}
inline void SwcIncrementOperationMetaInfoV1::set_allocated_incrementoperationcollectionname(std::string* incrementoperationcollectionname) {
  if (incrementoperationcollectionname != nullptr) {
    
  } else {
    
  }
  _impl_.incrementoperationcollectionname_.SetAllocated(incrementoperationcollectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.incrementoperationcollectionname_.IsDefault()) {
    _impl_.incrementoperationcollectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationMetaInfoV1.IncrementOperationCollectionName)
}

// string StartSnapshot = 3;
inline void SwcIncrementOperationMetaInfoV1::clear_startsnapshot() {
  _impl_.startsnapshot_.ClearToEmpty();
}
inline const std::string& SwcIncrementOperationMetaInfoV1::startsnapshot() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationMetaInfoV1.StartSnapshot)
  return _internal_startsnapshot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcIncrementOperationMetaInfoV1::set_startsnapshot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.startsnapshot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcIncrementOperationMetaInfoV1.StartSnapshot)
}
inline std::string* SwcIncrementOperationMetaInfoV1::mutable_startsnapshot() {
  std::string* _s = _internal_mutable_startsnapshot();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationMetaInfoV1.StartSnapshot)
  return _s;
}
inline const std::string& SwcIncrementOperationMetaInfoV1::_internal_startsnapshot() const {
  return _impl_.startsnapshot_.Get();
}
inline void SwcIncrementOperationMetaInfoV1::_internal_set_startsnapshot(const std::string& value) {
  
  _impl_.startsnapshot_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcIncrementOperationMetaInfoV1::_internal_mutable_startsnapshot() {
  
  return _impl_.startsnapshot_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcIncrementOperationMetaInfoV1::release_startsnapshot() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationMetaInfoV1.StartSnapshot)
  return _impl_.startsnapshot_.Release();
}
inline void SwcIncrementOperationMetaInfoV1::set_allocated_startsnapshot(std::string* startsnapshot) {
  if (startsnapshot != nullptr) {
    
  } else {
    
  }
  _impl_.startsnapshot_.SetAllocated(startsnapshot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.startsnapshot_.IsDefault()) {
    _impl_.startsnapshot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationMetaInfoV1.StartSnapshot)
}

// .google.protobuf.Timestamp CreateTime = 4;
inline bool SwcIncrementOperationMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcIncrementOperationMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcIncrementOperationMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcIncrementOperationMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void SwcIncrementOperationMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcIncrementOperationMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationMetaInfoV1.CreateTime)
  return _msg;
}
inline void SwcIncrementOperationMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationMetaInfoV1.CreateTime)
}

// -------------------------------------------------------------------

// SwcIncrementOperationV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcIncrementOperationV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcIncrementOperationV1::has_base() const {
  return _internal_has_base();
}
inline void SwcIncrementOperationV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcIncrementOperationV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcIncrementOperationV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationV1.Base)
  return _internal_base();
}
inline void SwcIncrementOperationV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcIncrementOperationV1.Base)
}
inline ::proto::MetaInfoBase* SwcIncrementOperationV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcIncrementOperationV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationV1.Base)
  return _msg;
}
inline void SwcIncrementOperationV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationV1.Base)
}

// .google.protobuf.Timestamp CreateTime = 2;
inline bool SwcIncrementOperationV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcIncrementOperationV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcIncrementOperationV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcIncrementOperationV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationV1.CreateTime)
  return _internal_createtime();
}
inline void SwcIncrementOperationV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcIncrementOperationV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcIncrementOperationV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationV1.CreateTime)
  return _msg;
}
inline void SwcIncrementOperationV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationV1.CreateTime)
}

// .proto.IncrementOperationV1 IncrementOperation = 3;
inline void SwcIncrementOperationV1::clear_incrementoperation() {
  _impl_.incrementoperation_ = 0;
}
inline ::proto::IncrementOperationV1 SwcIncrementOperationV1::_internal_incrementoperation() const {
  return static_cast< ::proto::IncrementOperationV1 >(_impl_.incrementoperation_);
}
inline ::proto::IncrementOperationV1 SwcIncrementOperationV1::incrementoperation() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationV1.IncrementOperation)
  return _internal_incrementoperation();
}
inline void SwcIncrementOperationV1::_internal_set_incrementoperation(::proto::IncrementOperationV1 value) {
  
  _impl_.incrementoperation_ = value;
}
inline void SwcIncrementOperationV1::set_incrementoperation(::proto::IncrementOperationV1 value) {
  _internal_set_incrementoperation(value);
  // @@protoc_insertion_point(field_set:proto.SwcIncrementOperationV1.IncrementOperation)
}

// .proto.SwcDataV1 SwcData = 4;
inline bool SwcIncrementOperationV1::_internal_has_swcdata() const {
  return this != internal_default_instance() && _impl_.swcdata_ != nullptr;
}
inline bool SwcIncrementOperationV1::has_swcdata() const {
  return _internal_has_swcdata();
}
inline void SwcIncrementOperationV1::clear_swcdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.swcdata_ != nullptr) {
    delete _impl_.swcdata_;
  }
  _impl_.swcdata_ = nullptr;
}
inline const ::proto::SwcDataV1& SwcIncrementOperationV1::_internal_swcdata() const {
  const ::proto::SwcDataV1* p = _impl_.swcdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& SwcIncrementOperationV1::swcdata() const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationV1.SwcData)
  return _internal_swcdata();
}
inline void SwcIncrementOperationV1::unsafe_arena_set_allocated_swcdata(
    ::proto::SwcDataV1* swcdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  _impl_.swcdata_ = swcdata;
  if (swcdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcIncrementOperationV1.SwcData)
}
inline ::proto::SwcDataV1* SwcIncrementOperationV1::release_swcdata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* SwcIncrementOperationV1::unsafe_arena_release_swcdata() {
  // @@protoc_insertion_point(field_release:proto.SwcIncrementOperationV1.SwcData)
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* SwcIncrementOperationV1::_internal_mutable_swcdata() {
  
  if (_impl_.swcdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcdata_ = p;
  }
  return _impl_.swcdata_;
}
inline ::proto::SwcDataV1* SwcIncrementOperationV1::mutable_swcdata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcdata();
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationV1.SwcData)
  return _msg;
}
inline void SwcIncrementOperationV1::set_allocated_swcdata(::proto::SwcDataV1* swcdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swcdata_;
  }
  if (swcdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swcdata);
    if (message_arena != submessage_arena) {
      swcdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcdata_ = swcdata;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcIncrementOperationV1.SwcData)
}

// -------------------------------------------------------------------

// SwcIncrementOperationListV1

// repeated .proto.SwcIncrementOperationV1 SwcIncrementOperation = 1;
inline int SwcIncrementOperationListV1::_internal_swcincrementoperation_size() const {
  return _impl_.swcincrementoperation_.size();
}
inline int SwcIncrementOperationListV1::swcincrementoperation_size() const {
  return _internal_swcincrementoperation_size();
}
inline void SwcIncrementOperationListV1::clear_swcincrementoperation() {
  _impl_.swcincrementoperation_.Clear();
}
inline ::proto::SwcIncrementOperationV1* SwcIncrementOperationListV1::mutable_swcincrementoperation(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SwcIncrementOperationListV1.SwcIncrementOperation)
  return _impl_.swcincrementoperation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationV1 >*
SwcIncrementOperationListV1::mutable_swcincrementoperation() {
  // @@protoc_insertion_point(field_mutable_list:proto.SwcIncrementOperationListV1.SwcIncrementOperation)
  return &_impl_.swcincrementoperation_;
}
inline const ::proto::SwcIncrementOperationV1& SwcIncrementOperationListV1::_internal_swcincrementoperation(int index) const {
  return _impl_.swcincrementoperation_.Get(index);
}
inline const ::proto::SwcIncrementOperationV1& SwcIncrementOperationListV1::swcincrementoperation(int index) const {
  // @@protoc_insertion_point(field_get:proto.SwcIncrementOperationListV1.SwcIncrementOperation)
  return _internal_swcincrementoperation(index);
}
inline ::proto::SwcIncrementOperationV1* SwcIncrementOperationListV1::_internal_add_swcincrementoperation() {
  return _impl_.swcincrementoperation_.Add();
}
inline ::proto::SwcIncrementOperationV1* SwcIncrementOperationListV1::add_swcincrementoperation() {
  ::proto::SwcIncrementOperationV1* _add = _internal_add_swcincrementoperation();
  // @@protoc_insertion_point(field_add:proto.SwcIncrementOperationListV1.SwcIncrementOperation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationV1 >&
SwcIncrementOperationListV1::swcincrementoperation() const {
  // @@protoc_insertion_point(field_list:proto.SwcIncrementOperationListV1.SwcIncrementOperation)
  return _impl_.swcincrementoperation_;
}

// -------------------------------------------------------------------

// SwcAttachmentAnoMetaInfoV1

// string AttachmentUuid = 1;
inline void SwcAttachmentAnoMetaInfoV1::clear_attachmentuuid() {
  _impl_.attachmentuuid_.ClearToEmpty();
}
inline const std::string& SwcAttachmentAnoMetaInfoV1::attachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentAnoMetaInfoV1.AttachmentUuid)
  return _internal_attachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentAnoMetaInfoV1::set_attachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentAnoMetaInfoV1.AttachmentUuid)
}
inline std::string* SwcAttachmentAnoMetaInfoV1::mutable_attachmentuuid() {
  std::string* _s = _internal_mutable_attachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentAnoMetaInfoV1.AttachmentUuid)
  return _s;
}
inline const std::string& SwcAttachmentAnoMetaInfoV1::_internal_attachmentuuid() const {
  return _impl_.attachmentuuid_.Get();
}
inline void SwcAttachmentAnoMetaInfoV1::_internal_set_attachmentuuid(const std::string& value) {
  
  _impl_.attachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoMetaInfoV1::_internal_mutable_attachmentuuid() {
  
  return _impl_.attachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoMetaInfoV1::release_attachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentAnoMetaInfoV1.AttachmentUuid)
  return _impl_.attachmentuuid_.Release();
}
inline void SwcAttachmentAnoMetaInfoV1::set_allocated_attachmentuuid(std::string* attachmentuuid) {
  if (attachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.attachmentuuid_.SetAllocated(attachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachmentuuid_.IsDefault()) {
    _impl_.attachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentAnoMetaInfoV1.AttachmentUuid)
}

// -------------------------------------------------------------------

// SwcAttachmentApoMetaInfoV1

// string AttachmentUuid = 1;
inline void SwcAttachmentApoMetaInfoV1::clear_attachmentuuid() {
  _impl_.attachmentuuid_.ClearToEmpty();
}
inline const std::string& SwcAttachmentApoMetaInfoV1::attachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoMetaInfoV1.AttachmentUuid)
  return _internal_attachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentApoMetaInfoV1::set_attachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.attachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoMetaInfoV1.AttachmentUuid)
}
inline std::string* SwcAttachmentApoMetaInfoV1::mutable_attachmentuuid() {
  std::string* _s = _internal_mutable_attachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentApoMetaInfoV1.AttachmentUuid)
  return _s;
}
inline const std::string& SwcAttachmentApoMetaInfoV1::_internal_attachmentuuid() const {
  return _impl_.attachmentuuid_.Get();
}
inline void SwcAttachmentApoMetaInfoV1::_internal_set_attachmentuuid(const std::string& value) {
  
  _impl_.attachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoMetaInfoV1::_internal_mutable_attachmentuuid() {
  
  return _impl_.attachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoMetaInfoV1::release_attachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentApoMetaInfoV1.AttachmentUuid)
  return _impl_.attachmentuuid_.Release();
}
inline void SwcAttachmentApoMetaInfoV1::set_allocated_attachmentuuid(std::string* attachmentuuid) {
  if (attachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.attachmentuuid_.SetAllocated(attachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attachmentuuid_.IsDefault()) {
    _impl_.attachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentApoMetaInfoV1.AttachmentUuid)
}

// -------------------------------------------------------------------

// SwcMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Base)
  return _internal_base();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Base)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Base)
}

// string Name = 2;
inline void SwcMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Name)
}
inline std::string* SwcMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Name)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SwcMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void SwcMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Name)
}

// string Description = 3;
inline void SwcMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Description)
}
inline std::string* SwcMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Description)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SwcMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void SwcMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Description)
}

// string Creator = 4;
inline void SwcMetaInfoV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.Creator)
}
inline std::string* SwcMetaInfoV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Creator)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SwcMetaInfoV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Creator)
  return _impl_.creator_.Release();
}
inline void SwcMetaInfoV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Creator)
}

// string SwcType = 5;
inline void SwcMetaInfoV1::clear_swctype() {
  _impl_.swctype_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::swctype() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcType)
  return _internal_swctype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_swctype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swctype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.SwcType)
}
inline std::string* SwcMetaInfoV1::mutable_swctype() {
  std::string* _s = _internal_mutable_swctype();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcType)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_swctype() const {
  return _impl_.swctype_.Get();
}
inline void SwcMetaInfoV1::_internal_set_swctype(const std::string& value) {
  
  _impl_.swctype_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_swctype() {
  
  return _impl_.swctype_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_swctype() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.SwcType)
  return _impl_.swctype_.Release();
}
inline void SwcMetaInfoV1::set_allocated_swctype(std::string* swctype) {
  if (swctype != nullptr) {
    
  } else {
    
  }
  _impl_.swctype_.SetAllocated(swctype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swctype_.IsDefault()) {
    _impl_.swctype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.SwcType)
}

// .google.protobuf.Timestamp CreateTime = 6;
inline bool SwcMetaInfoV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcMetaInfoV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.CreateTime)
  return _internal_createtime();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.CreateTime)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 7;
inline bool SwcMetaInfoV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool SwcMetaInfoV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcMetaInfoV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcMetaInfoV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.LastModifiedTime)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.LastModifiedTime)
}

// repeated .proto.SwcSnapshotMetaInfoV1 SwcSnapshotMetaInfoList = 8;
inline int SwcMetaInfoV1::_internal_swcsnapshotmetainfolist_size() const {
  return _impl_.swcsnapshotmetainfolist_.size();
}
inline int SwcMetaInfoV1::swcsnapshotmetainfolist_size() const {
  return _internal_swcsnapshotmetainfolist_size();
}
inline void SwcMetaInfoV1::clear_swcsnapshotmetainfolist() {
  _impl_.swcsnapshotmetainfolist_.Clear();
}
inline ::proto::SwcSnapshotMetaInfoV1* SwcMetaInfoV1::mutable_swcsnapshotmetainfolist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcSnapshotMetaInfoList)
  return _impl_.swcsnapshotmetainfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >*
SwcMetaInfoV1::mutable_swcsnapshotmetainfolist() {
  // @@protoc_insertion_point(field_mutable_list:proto.SwcMetaInfoV1.SwcSnapshotMetaInfoList)
  return &_impl_.swcsnapshotmetainfolist_;
}
inline const ::proto::SwcSnapshotMetaInfoV1& SwcMetaInfoV1::_internal_swcsnapshotmetainfolist(int index) const {
  return _impl_.swcsnapshotmetainfolist_.Get(index);
}
inline const ::proto::SwcSnapshotMetaInfoV1& SwcMetaInfoV1::swcsnapshotmetainfolist(int index) const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcSnapshotMetaInfoList)
  return _internal_swcsnapshotmetainfolist(index);
}
inline ::proto::SwcSnapshotMetaInfoV1* SwcMetaInfoV1::_internal_add_swcsnapshotmetainfolist() {
  return _impl_.swcsnapshotmetainfolist_.Add();
}
inline ::proto::SwcSnapshotMetaInfoV1* SwcMetaInfoV1::add_swcsnapshotmetainfolist() {
  ::proto::SwcSnapshotMetaInfoV1* _add = _internal_add_swcsnapshotmetainfolist();
  // @@protoc_insertion_point(field_add:proto.SwcMetaInfoV1.SwcSnapshotMetaInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >&
SwcMetaInfoV1::swcsnapshotmetainfolist() const {
  // @@protoc_insertion_point(field_list:proto.SwcMetaInfoV1.SwcSnapshotMetaInfoList)
  return _impl_.swcsnapshotmetainfolist_;
}

// repeated .proto.SwcIncrementOperationMetaInfoV1 SwcIncrementOperationMetaInfoList = 9;
inline int SwcMetaInfoV1::_internal_swcincrementoperationmetainfolist_size() const {
  return _impl_.swcincrementoperationmetainfolist_.size();
}
inline int SwcMetaInfoV1::swcincrementoperationmetainfolist_size() const {
  return _internal_swcincrementoperationmetainfolist_size();
}
inline void SwcMetaInfoV1::clear_swcincrementoperationmetainfolist() {
  _impl_.swcincrementoperationmetainfolist_.Clear();
}
inline ::proto::SwcIncrementOperationMetaInfoV1* SwcMetaInfoV1::mutable_swcincrementoperationmetainfolist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcIncrementOperationMetaInfoList)
  return _impl_.swcincrementoperationmetainfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >*
SwcMetaInfoV1::mutable_swcincrementoperationmetainfolist() {
  // @@protoc_insertion_point(field_mutable_list:proto.SwcMetaInfoV1.SwcIncrementOperationMetaInfoList)
  return &_impl_.swcincrementoperationmetainfolist_;
}
inline const ::proto::SwcIncrementOperationMetaInfoV1& SwcMetaInfoV1::_internal_swcincrementoperationmetainfolist(int index) const {
  return _impl_.swcincrementoperationmetainfolist_.Get(index);
}
inline const ::proto::SwcIncrementOperationMetaInfoV1& SwcMetaInfoV1::swcincrementoperationmetainfolist(int index) const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcIncrementOperationMetaInfoList)
  return _internal_swcincrementoperationmetainfolist(index);
}
inline ::proto::SwcIncrementOperationMetaInfoV1* SwcMetaInfoV1::_internal_add_swcincrementoperationmetainfolist() {
  return _impl_.swcincrementoperationmetainfolist_.Add();
}
inline ::proto::SwcIncrementOperationMetaInfoV1* SwcMetaInfoV1::add_swcincrementoperationmetainfolist() {
  ::proto::SwcIncrementOperationMetaInfoV1* _add = _internal_add_swcincrementoperationmetainfolist();
  // @@protoc_insertion_point(field_add:proto.SwcMetaInfoV1.SwcIncrementOperationMetaInfoList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >&
SwcMetaInfoV1::swcincrementoperationmetainfolist() const {
  // @@protoc_insertion_point(field_list:proto.SwcMetaInfoV1.SwcIncrementOperationMetaInfoList)
  return _impl_.swcincrementoperationmetainfolist_;
}

// string CurrentIncrementOperationCollectionName = 10;
inline void SwcMetaInfoV1::clear_currentincrementoperationcollectionname() {
  _impl_.currentincrementoperationcollectionname_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::currentincrementoperationcollectionname() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.CurrentIncrementOperationCollectionName)
  return _internal_currentincrementoperationcollectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_currentincrementoperationcollectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currentincrementoperationcollectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.CurrentIncrementOperationCollectionName)
}
inline std::string* SwcMetaInfoV1::mutable_currentincrementoperationcollectionname() {
  std::string* _s = _internal_mutable_currentincrementoperationcollectionname();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.CurrentIncrementOperationCollectionName)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_currentincrementoperationcollectionname() const {
  return _impl_.currentincrementoperationcollectionname_.Get();
}
inline void SwcMetaInfoV1::_internal_set_currentincrementoperationcollectionname(const std::string& value) {
  
  _impl_.currentincrementoperationcollectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_currentincrementoperationcollectionname() {
  
  return _impl_.currentincrementoperationcollectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_currentincrementoperationcollectionname() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.CurrentIncrementOperationCollectionName)
  return _impl_.currentincrementoperationcollectionname_.Release();
}
inline void SwcMetaInfoV1::set_allocated_currentincrementoperationcollectionname(std::string* currentincrementoperationcollectionname) {
  if (currentincrementoperationcollectionname != nullptr) {
    
  } else {
    
  }
  _impl_.currentincrementoperationcollectionname_.SetAllocated(currentincrementoperationcollectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currentincrementoperationcollectionname_.IsDefault()) {
    _impl_.currentincrementoperationcollectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.CurrentIncrementOperationCollectionName)
}

// .proto.SwcAttachmentAnoMetaInfoV1 SwcAttachmentAnoMetaInfo = 11;
inline bool SwcMetaInfoV1::_internal_has_swcattachmentanometainfo() const {
  return this != internal_default_instance() && _impl_.swcattachmentanometainfo_ != nullptr;
}
inline bool SwcMetaInfoV1::has_swcattachmentanometainfo() const {
  return _internal_has_swcattachmentanometainfo();
}
inline void SwcMetaInfoV1::clear_swcattachmentanometainfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.swcattachmentanometainfo_ != nullptr) {
    delete _impl_.swcattachmentanometainfo_;
  }
  _impl_.swcattachmentanometainfo_ = nullptr;
}
inline const ::proto::SwcAttachmentAnoMetaInfoV1& SwcMetaInfoV1::_internal_swcattachmentanometainfo() const {
  const ::proto::SwcAttachmentAnoMetaInfoV1* p = _impl_.swcattachmentanometainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcAttachmentAnoMetaInfoV1&>(
      ::proto::_SwcAttachmentAnoMetaInfoV1_default_instance_);
}
inline const ::proto::SwcAttachmentAnoMetaInfoV1& SwcMetaInfoV1::swcattachmentanometainfo() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcAttachmentAnoMetaInfo)
  return _internal_swcattachmentanometainfo();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_swcattachmentanometainfo(
    ::proto::SwcAttachmentAnoMetaInfoV1* swcattachmentanometainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentanometainfo_);
  }
  _impl_.swcattachmentanometainfo_ = swcattachmentanometainfo;
  if (swcattachmentanometainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.SwcAttachmentAnoMetaInfo)
}
inline ::proto::SwcAttachmentAnoMetaInfoV1* SwcMetaInfoV1::release_swcattachmentanometainfo() {
  
  ::proto::SwcAttachmentAnoMetaInfoV1* temp = _impl_.swcattachmentanometainfo_;
  _impl_.swcattachmentanometainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcAttachmentAnoMetaInfoV1* SwcMetaInfoV1::unsafe_arena_release_swcattachmentanometainfo() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.SwcAttachmentAnoMetaInfo)
  
  ::proto::SwcAttachmentAnoMetaInfoV1* temp = _impl_.swcattachmentanometainfo_;
  _impl_.swcattachmentanometainfo_ = nullptr;
  return temp;
}
inline ::proto::SwcAttachmentAnoMetaInfoV1* SwcMetaInfoV1::_internal_mutable_swcattachmentanometainfo() {
  
  if (_impl_.swcattachmentanometainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcAttachmentAnoMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcattachmentanometainfo_ = p;
  }
  return _impl_.swcattachmentanometainfo_;
}
inline ::proto::SwcAttachmentAnoMetaInfoV1* SwcMetaInfoV1::mutable_swcattachmentanometainfo() {
  ::proto::SwcAttachmentAnoMetaInfoV1* _msg = _internal_mutable_swcattachmentanometainfo();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcAttachmentAnoMetaInfo)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_swcattachmentanometainfo(::proto::SwcAttachmentAnoMetaInfoV1* swcattachmentanometainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swcattachmentanometainfo_;
  }
  if (swcattachmentanometainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swcattachmentanometainfo);
    if (message_arena != submessage_arena) {
      swcattachmentanometainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcattachmentanometainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcattachmentanometainfo_ = swcattachmentanometainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.SwcAttachmentAnoMetaInfo)
}

// .proto.SwcAttachmentApoMetaInfoV1 SwcAttachmentApoMetaInfo = 12;
inline bool SwcMetaInfoV1::_internal_has_swcattachmentapometainfo() const {
  return this != internal_default_instance() && _impl_.swcattachmentapometainfo_ != nullptr;
}
inline bool SwcMetaInfoV1::has_swcattachmentapometainfo() const {
  return _internal_has_swcattachmentapometainfo();
}
inline void SwcMetaInfoV1::clear_swcattachmentapometainfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.swcattachmentapometainfo_ != nullptr) {
    delete _impl_.swcattachmentapometainfo_;
  }
  _impl_.swcattachmentapometainfo_ = nullptr;
}
inline const ::proto::SwcAttachmentApoMetaInfoV1& SwcMetaInfoV1::_internal_swcattachmentapometainfo() const {
  const ::proto::SwcAttachmentApoMetaInfoV1* p = _impl_.swcattachmentapometainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcAttachmentApoMetaInfoV1&>(
      ::proto::_SwcAttachmentApoMetaInfoV1_default_instance_);
}
inline const ::proto::SwcAttachmentApoMetaInfoV1& SwcMetaInfoV1::swcattachmentapometainfo() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcAttachmentApoMetaInfo)
  return _internal_swcattachmentapometainfo();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_swcattachmentapometainfo(
    ::proto::SwcAttachmentApoMetaInfoV1* swcattachmentapometainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentapometainfo_);
  }
  _impl_.swcattachmentapometainfo_ = swcattachmentapometainfo;
  if (swcattachmentapometainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.SwcAttachmentApoMetaInfo)
}
inline ::proto::SwcAttachmentApoMetaInfoV1* SwcMetaInfoV1::release_swcattachmentapometainfo() {
  
  ::proto::SwcAttachmentApoMetaInfoV1* temp = _impl_.swcattachmentapometainfo_;
  _impl_.swcattachmentapometainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcAttachmentApoMetaInfoV1* SwcMetaInfoV1::unsafe_arena_release_swcattachmentapometainfo() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.SwcAttachmentApoMetaInfo)
  
  ::proto::SwcAttachmentApoMetaInfoV1* temp = _impl_.swcattachmentapometainfo_;
  _impl_.swcattachmentapometainfo_ = nullptr;
  return temp;
}
inline ::proto::SwcAttachmentApoMetaInfoV1* SwcMetaInfoV1::_internal_mutable_swcattachmentapometainfo() {
  
  if (_impl_.swcattachmentapometainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcAttachmentApoMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcattachmentapometainfo_ = p;
  }
  return _impl_.swcattachmentapometainfo_;
}
inline ::proto::SwcAttachmentApoMetaInfoV1* SwcMetaInfoV1::mutable_swcattachmentapometainfo() {
  ::proto::SwcAttachmentApoMetaInfoV1* _msg = _internal_mutable_swcattachmentapometainfo();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcAttachmentApoMetaInfo)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_swcattachmentapometainfo(::proto::SwcAttachmentApoMetaInfoV1* swcattachmentapometainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swcattachmentapometainfo_;
  }
  if (swcattachmentapometainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swcattachmentapometainfo);
    if (message_arena != submessage_arena) {
      swcattachmentapometainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcattachmentapometainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcattachmentapometainfo_ = swcattachmentapometainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.SwcAttachmentApoMetaInfo)
}

// string SwcAttachmentSwcUuid = 13;
inline void SwcMetaInfoV1::clear_swcattachmentswcuuid() {
  _impl_.swcattachmentswcuuid_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::swcattachmentswcuuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.SwcAttachmentSwcUuid)
  return _internal_swcattachmentswcuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_swcattachmentswcuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcattachmentswcuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.SwcAttachmentSwcUuid)
}
inline std::string* SwcMetaInfoV1::mutable_swcattachmentswcuuid() {
  std::string* _s = _internal_mutable_swcattachmentswcuuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.SwcAttachmentSwcUuid)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_swcattachmentswcuuid() const {
  return _impl_.swcattachmentswcuuid_.Get();
}
inline void SwcMetaInfoV1::_internal_set_swcattachmentswcuuid(const std::string& value) {
  
  _impl_.swcattachmentswcuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_swcattachmentswcuuid() {
  
  return _impl_.swcattachmentswcuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_swcattachmentswcuuid() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.SwcAttachmentSwcUuid)
  return _impl_.swcattachmentswcuuid_.Release();
}
inline void SwcMetaInfoV1::set_allocated_swcattachmentswcuuid(std::string* swcattachmentswcuuid) {
  if (swcattachmentswcuuid != nullptr) {
    
  } else {
    
  }
  _impl_.swcattachmentswcuuid_.SetAllocated(swcattachmentswcuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcattachmentswcuuid_.IsDefault()) {
    _impl_.swcattachmentswcuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.SwcAttachmentSwcUuid)
}

// .proto.PermissionMetaInfoV1 Permission = 14;
inline bool SwcMetaInfoV1::_internal_has_permission() const {
  return this != internal_default_instance() && _impl_.permission_ != nullptr;
}
inline bool SwcMetaInfoV1::has_permission() const {
  return _internal_has_permission();
}
inline void SwcMetaInfoV1::clear_permission() {
  if (GetArenaForAllocation() == nullptr && _impl_.permission_ != nullptr) {
    delete _impl_.permission_;
  }
  _impl_.permission_ = nullptr;
}
inline const ::proto::PermissionMetaInfoV1& SwcMetaInfoV1::_internal_permission() const {
  const ::proto::PermissionMetaInfoV1* p = _impl_.permission_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionMetaInfoV1&>(
      ::proto::_PermissionMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionMetaInfoV1& SwcMetaInfoV1::permission() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.Permission)
  return _internal_permission();
}
inline void SwcMetaInfoV1::unsafe_arena_set_allocated_permission(
    ::proto::PermissionMetaInfoV1* permission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permission_);
  }
  _impl_.permission_ = permission;
  if (permission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcMetaInfoV1.Permission)
}
inline ::proto::PermissionMetaInfoV1* SwcMetaInfoV1::release_permission() {
  
  ::proto::PermissionMetaInfoV1* temp = _impl_.permission_;
  _impl_.permission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionMetaInfoV1* SwcMetaInfoV1::unsafe_arena_release_permission() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.Permission)
  
  ::proto::PermissionMetaInfoV1* temp = _impl_.permission_;
  _impl_.permission_ = nullptr;
  return temp;
}
inline ::proto::PermissionMetaInfoV1* SwcMetaInfoV1::_internal_mutable_permission() {
  
  if (_impl_.permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionMetaInfoV1>(GetArenaForAllocation());
    _impl_.permission_ = p;
  }
  return _impl_.permission_;
}
inline ::proto::PermissionMetaInfoV1* SwcMetaInfoV1::mutable_permission() {
  ::proto::PermissionMetaInfoV1* _msg = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.Permission)
  return _msg;
}
inline void SwcMetaInfoV1::set_allocated_permission(::proto::PermissionMetaInfoV1* permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.permission_;
  }
  if (permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(permission);
    if (message_arena != submessage_arena) {
      permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.Permission)
}

// string BelongingProjectUuid = 15;
inline void SwcMetaInfoV1::clear_belongingprojectuuid() {
  _impl_.belongingprojectuuid_.ClearToEmpty();
}
inline const std::string& SwcMetaInfoV1::belongingprojectuuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcMetaInfoV1.BelongingProjectUuid)
  return _internal_belongingprojectuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcMetaInfoV1::set_belongingprojectuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.belongingprojectuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcMetaInfoV1.BelongingProjectUuid)
}
inline std::string* SwcMetaInfoV1::mutable_belongingprojectuuid() {
  std::string* _s = _internal_mutable_belongingprojectuuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcMetaInfoV1.BelongingProjectUuid)
  return _s;
}
inline const std::string& SwcMetaInfoV1::_internal_belongingprojectuuid() const {
  return _impl_.belongingprojectuuid_.Get();
}
inline void SwcMetaInfoV1::_internal_set_belongingprojectuuid(const std::string& value) {
  
  _impl_.belongingprojectuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::_internal_mutable_belongingprojectuuid() {
  
  return _impl_.belongingprojectuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcMetaInfoV1::release_belongingprojectuuid() {
  // @@protoc_insertion_point(field_release:proto.SwcMetaInfoV1.BelongingProjectUuid)
  return _impl_.belongingprojectuuid_.Release();
}
inline void SwcMetaInfoV1::set_allocated_belongingprojectuuid(std::string* belongingprojectuuid) {
  if (belongingprojectuuid != nullptr) {
    
  } else {
    
  }
  _impl_.belongingprojectuuid_.SetAllocated(belongingprojectuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.belongingprojectuuid_.IsDefault()) {
    _impl_.belongingprojectuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcMetaInfoV1.BelongingProjectUuid)
}

// -------------------------------------------------------------------

// SwcNodeInternalDataV1

// int32 N = 1;
inline void SwcNodeInternalDataV1::clear_n() {
  _impl_.n_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_n() const {
  return _impl_.n_;
}
inline int32_t SwcNodeInternalDataV1::n() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.N)
  return _internal_n();
}
inline void SwcNodeInternalDataV1::_internal_set_n(int32_t value) {
  
  _impl_.n_ = value;
}
inline void SwcNodeInternalDataV1::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.N)
}

// int32 Type = 2;
inline void SwcNodeInternalDataV1::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_type() const {
  return _impl_.type_;
}
inline int32_t SwcNodeInternalDataV1::type() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Type)
  return _internal_type();
}
inline void SwcNodeInternalDataV1::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void SwcNodeInternalDataV1::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Type)
}

// float X = 3;
inline void SwcNodeInternalDataV1::clear_x() {
  _impl_.x_ = 0;
}
inline float SwcNodeInternalDataV1::_internal_x() const {
  return _impl_.x_;
}
inline float SwcNodeInternalDataV1::x() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.X)
  return _internal_x();
}
inline void SwcNodeInternalDataV1::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void SwcNodeInternalDataV1::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.X)
}

// float Y = 4;
inline void SwcNodeInternalDataV1::clear_y() {
  _impl_.y_ = 0;
}
inline float SwcNodeInternalDataV1::_internal_y() const {
  return _impl_.y_;
}
inline float SwcNodeInternalDataV1::y() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Y)
  return _internal_y();
}
inline void SwcNodeInternalDataV1::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void SwcNodeInternalDataV1::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Y)
}

// float Z = 5;
inline void SwcNodeInternalDataV1::clear_z() {
  _impl_.z_ = 0;
}
inline float SwcNodeInternalDataV1::_internal_z() const {
  return _impl_.z_;
}
inline float SwcNodeInternalDataV1::z() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Z)
  return _internal_z();
}
inline void SwcNodeInternalDataV1::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void SwcNodeInternalDataV1::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Z)
}

// float Radius = 6;
inline void SwcNodeInternalDataV1::clear_radius() {
  _impl_.radius_ = 0;
}
inline float SwcNodeInternalDataV1::_internal_radius() const {
  return _impl_.radius_;
}
inline float SwcNodeInternalDataV1::radius() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Radius)
  return _internal_radius();
}
inline void SwcNodeInternalDataV1::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void SwcNodeInternalDataV1::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Radius)
}

// int32 Parent = 7;
inline void SwcNodeInternalDataV1::clear_parent() {
  _impl_.parent_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_parent() const {
  return _impl_.parent_;
}
inline int32_t SwcNodeInternalDataV1::parent() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Parent)
  return _internal_parent();
}
inline void SwcNodeInternalDataV1::_internal_set_parent(int32_t value) {
  
  _impl_.parent_ = value;
}
inline void SwcNodeInternalDataV1::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Parent)
}

// int32 Seg_id = 8;
inline void SwcNodeInternalDataV1::clear_seg_id() {
  _impl_.seg_id_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_seg_id() const {
  return _impl_.seg_id_;
}
inline int32_t SwcNodeInternalDataV1::seg_id() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Seg_id)
  return _internal_seg_id();
}
inline void SwcNodeInternalDataV1::_internal_set_seg_id(int32_t value) {
  
  _impl_.seg_id_ = value;
}
inline void SwcNodeInternalDataV1::set_seg_id(int32_t value) {
  _internal_set_seg_id(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Seg_id)
}

// int32 Level = 9;
inline void SwcNodeInternalDataV1::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SwcNodeInternalDataV1::level() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Level)
  return _internal_level();
}
inline void SwcNodeInternalDataV1::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SwcNodeInternalDataV1::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Level)
}

// int32 Mode = 10;
inline void SwcNodeInternalDataV1::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t SwcNodeInternalDataV1::mode() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Mode)
  return _internal_mode();
}
inline void SwcNodeInternalDataV1::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void SwcNodeInternalDataV1::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Mode)
}

// int32 Timestamp = 11;
inline void SwcNodeInternalDataV1::clear_timestamp() {
  _impl_.timestamp_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int32_t SwcNodeInternalDataV1::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Timestamp)
  return _internal_timestamp();
}
inline void SwcNodeInternalDataV1::_internal_set_timestamp(int32_t value) {
  
  _impl_.timestamp_ = value;
}
inline void SwcNodeInternalDataV1::set_timestamp(int32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Timestamp)
}

// int32 Feature_value = 12;
inline void SwcNodeInternalDataV1::clear_feature_value() {
  _impl_.feature_value_ = 0;
}
inline int32_t SwcNodeInternalDataV1::_internal_feature_value() const {
  return _impl_.feature_value_;
}
inline int32_t SwcNodeInternalDataV1::feature_value() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeInternalDataV1.Feature_value)
  return _internal_feature_value();
}
inline void SwcNodeInternalDataV1::_internal_set_feature_value(int32_t value) {
  
  _impl_.feature_value_ = value;
}
inline void SwcNodeInternalDataV1::set_feature_value(int32_t value) {
  _internal_set_feature_value(value);
  // @@protoc_insertion_point(field_set:proto.SwcNodeInternalDataV1.Feature_value)
}

// -------------------------------------------------------------------

// SwcNodeDataV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcNodeDataV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcNodeDataV1::has_base() const {
  return _internal_has_base();
}
inline void SwcNodeDataV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcNodeDataV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcNodeDataV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.Base)
  return _internal_base();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.Base)
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcNodeDataV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.Base)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.Base)
}

// .proto.SwcNodeInternalDataV1 SwcNodeInternalData = 2;
inline bool SwcNodeDataV1::_internal_has_swcnodeinternaldata() const {
  return this != internal_default_instance() && _impl_.swcnodeinternaldata_ != nullptr;
}
inline bool SwcNodeDataV1::has_swcnodeinternaldata() const {
  return _internal_has_swcnodeinternaldata();
}
inline void SwcNodeDataV1::clear_swcnodeinternaldata() {
  if (GetArenaForAllocation() == nullptr && _impl_.swcnodeinternaldata_ != nullptr) {
    delete _impl_.swcnodeinternaldata_;
  }
  _impl_.swcnodeinternaldata_ = nullptr;
}
inline const ::proto::SwcNodeInternalDataV1& SwcNodeDataV1::_internal_swcnodeinternaldata() const {
  const ::proto::SwcNodeInternalDataV1* p = _impl_.swcnodeinternaldata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcNodeInternalDataV1&>(
      ::proto::_SwcNodeInternalDataV1_default_instance_);
}
inline const ::proto::SwcNodeInternalDataV1& SwcNodeDataV1::swcnodeinternaldata() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.SwcNodeInternalData)
  return _internal_swcnodeinternaldata();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_swcnodeinternaldata(
    ::proto::SwcNodeInternalDataV1* swcnodeinternaldata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodeinternaldata_);
  }
  _impl_.swcnodeinternaldata_ = swcnodeinternaldata;
  if (swcnodeinternaldata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.SwcNodeInternalData)
}
inline ::proto::SwcNodeInternalDataV1* SwcNodeDataV1::release_swcnodeinternaldata() {
  
  ::proto::SwcNodeInternalDataV1* temp = _impl_.swcnodeinternaldata_;
  _impl_.swcnodeinternaldata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcNodeInternalDataV1* SwcNodeDataV1::unsafe_arena_release_swcnodeinternaldata() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.SwcNodeInternalData)
  
  ::proto::SwcNodeInternalDataV1* temp = _impl_.swcnodeinternaldata_;
  _impl_.swcnodeinternaldata_ = nullptr;
  return temp;
}
inline ::proto::SwcNodeInternalDataV1* SwcNodeDataV1::_internal_mutable_swcnodeinternaldata() {
  
  if (_impl_.swcnodeinternaldata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcNodeInternalDataV1>(GetArenaForAllocation());
    _impl_.swcnodeinternaldata_ = p;
  }
  return _impl_.swcnodeinternaldata_;
}
inline ::proto::SwcNodeInternalDataV1* SwcNodeDataV1::mutable_swcnodeinternaldata() {
  ::proto::SwcNodeInternalDataV1* _msg = _internal_mutable_swcnodeinternaldata();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.SwcNodeInternalData)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_swcnodeinternaldata(::proto::SwcNodeInternalDataV1* swcnodeinternaldata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.swcnodeinternaldata_;
  }
  if (swcnodeinternaldata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(swcnodeinternaldata);
    if (message_arena != submessage_arena) {
      swcnodeinternaldata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodeinternaldata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodeinternaldata_ = swcnodeinternaldata;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.SwcNodeInternalData)
}

// string Creator = 3;
inline void SwcNodeDataV1::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::creator() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.Creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.Creator)
}
inline std::string* SwcNodeDataV1::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.Creator)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SwcNodeDataV1::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_creator() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.Creator)
  return _impl_.creator_.Release();
}
inline void SwcNodeDataV1::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.Creator)
}

// .google.protobuf.Timestamp CreateTime = 4;
inline bool SwcNodeDataV1::_internal_has_createtime() const {
  return this != internal_default_instance() && _impl_.createtime_ != nullptr;
}
inline bool SwcNodeDataV1::has_createtime() const {
  return _internal_has_createtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::_internal_createtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.createtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::createtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.CreateTime)
  return _internal_createtime();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_createtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  _impl_.createtime_ = createtime;
  if (createtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.CreateTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::release_createtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::unsafe_arena_release_createtime() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.CreateTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.createtime_;
  _impl_.createtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::_internal_mutable_createtime() {
  
  if (_impl_.createtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.createtime_ = p;
  }
  return _impl_.createtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::mutable_createtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.CreateTime)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_createtime(::PROTOBUF_NAMESPACE_ID::Timestamp* createtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.createtime_);
  }
  if (createtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createtime));
    if (message_arena != submessage_arena) {
      createtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.createtime_ = createtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.CreateTime)
}

// .google.protobuf.Timestamp LastModifiedTime = 5;
inline bool SwcNodeDataV1::_internal_has_lastmodifiedtime() const {
  return this != internal_default_instance() && _impl_.lastmodifiedtime_ != nullptr;
}
inline bool SwcNodeDataV1::has_lastmodifiedtime() const {
  return _internal_has_lastmodifiedtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::_internal_lastmodifiedtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.lastmodifiedtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SwcNodeDataV1::lastmodifiedtime() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.LastModifiedTime)
  return _internal_lastmodifiedtime();
}
inline void SwcNodeDataV1::unsafe_arena_set_allocated_lastmodifiedtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  if (lastmodifiedtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcNodeDataV1.LastModifiedTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::release_lastmodifiedtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::unsafe_arena_release_lastmodifiedtime() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.LastModifiedTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.lastmodifiedtime_;
  _impl_.lastmodifiedtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::_internal_mutable_lastmodifiedtime() {
  
  if (_impl_.lastmodifiedtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.lastmodifiedtime_ = p;
  }
  return _impl_.lastmodifiedtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SwcNodeDataV1::mutable_lastmodifiedtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_lastmodifiedtime();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.LastModifiedTime)
  return _msg;
}
inline void SwcNodeDataV1::set_allocated_lastmodifiedtime(::PROTOBUF_NAMESPACE_ID::Timestamp* lastmodifiedtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lastmodifiedtime_);
  }
  if (lastmodifiedtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lastmodifiedtime));
    if (message_arena != submessage_arena) {
      lastmodifiedtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lastmodifiedtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lastmodifiedtime_ = lastmodifiedtime;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.LastModifiedTime)
}

// string CheckerUserUuid = 6;
inline void SwcNodeDataV1::clear_checkeruseruuid() {
  _impl_.checkeruseruuid_.ClearToEmpty();
}
inline const std::string& SwcNodeDataV1::checkeruseruuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcNodeDataV1.CheckerUserUuid)
  return _internal_checkeruseruuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcNodeDataV1::set_checkeruseruuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.checkeruseruuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcNodeDataV1.CheckerUserUuid)
}
inline std::string* SwcNodeDataV1::mutable_checkeruseruuid() {
  std::string* _s = _internal_mutable_checkeruseruuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcNodeDataV1.CheckerUserUuid)
  return _s;
}
inline const std::string& SwcNodeDataV1::_internal_checkeruseruuid() const {
  return _impl_.checkeruseruuid_.Get();
}
inline void SwcNodeDataV1::_internal_set_checkeruseruuid(const std::string& value) {
  
  _impl_.checkeruseruuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::_internal_mutable_checkeruseruuid() {
  
  return _impl_.checkeruseruuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcNodeDataV1::release_checkeruseruuid() {
  // @@protoc_insertion_point(field_release:proto.SwcNodeDataV1.CheckerUserUuid)
  return _impl_.checkeruseruuid_.Release();
}
inline void SwcNodeDataV1::set_allocated_checkeruseruuid(std::string* checkeruseruuid) {
  if (checkeruseruuid != nullptr) {
    
  } else {
    
  }
  _impl_.checkeruseruuid_.SetAllocated(checkeruseruuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.checkeruseruuid_.IsDefault()) {
    _impl_.checkeruseruuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcNodeDataV1.CheckerUserUuid)
}

// -------------------------------------------------------------------

// SwcDataV1

// repeated .proto.SwcNodeDataV1 SwcData = 1;
inline int SwcDataV1::_internal_swcdata_size() const {
  return _impl_.swcdata_.size();
}
inline int SwcDataV1::swcdata_size() const {
  return _internal_swcdata_size();
}
inline void SwcDataV1::clear_swcdata() {
  _impl_.swcdata_.Clear();
}
inline ::proto::SwcNodeDataV1* SwcDataV1::mutable_swcdata(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SwcDataV1.SwcData)
  return _impl_.swcdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >*
SwcDataV1::mutable_swcdata() {
  // @@protoc_insertion_point(field_mutable_list:proto.SwcDataV1.SwcData)
  return &_impl_.swcdata_;
}
inline const ::proto::SwcNodeDataV1& SwcDataV1::_internal_swcdata(int index) const {
  return _impl_.swcdata_.Get(index);
}
inline const ::proto::SwcNodeDataV1& SwcDataV1::swcdata(int index) const {
  // @@protoc_insertion_point(field_get:proto.SwcDataV1.SwcData)
  return _internal_swcdata(index);
}
inline ::proto::SwcNodeDataV1* SwcDataV1::_internal_add_swcdata() {
  return _impl_.swcdata_.Add();
}
inline ::proto::SwcNodeDataV1* SwcDataV1::add_swcdata() {
  ::proto::SwcNodeDataV1* _add = _internal_add_swcdata();
  // @@protoc_insertion_point(field_add:proto.SwcDataV1.SwcData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcNodeDataV1 >&
SwcDataV1::swcdata() const {
  // @@protoc_insertion_point(field_list:proto.SwcDataV1.SwcData)
  return _impl_.swcdata_;
}

// -------------------------------------------------------------------

// DailyStatisticsMetaInfoV1

// .proto.MetaInfoBase Base = 1;
inline bool DailyStatisticsMetaInfoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool DailyStatisticsMetaInfoV1::has_base() const {
  return _internal_has_base();
}
inline void DailyStatisticsMetaInfoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& DailyStatisticsMetaInfoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& DailyStatisticsMetaInfoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Base)
  return _internal_base();
}
inline void DailyStatisticsMetaInfoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DailyStatisticsMetaInfoV1.Base)
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* DailyStatisticsMetaInfoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Base)
  return _msg;
}
inline void DailyStatisticsMetaInfoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Base)
}

// string Name = 2;
inline void DailyStatisticsMetaInfoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Name)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Name)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Name)
  return _impl_.name_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Name)
}

// string Description = 3;
inline void DailyStatisticsMetaInfoV1::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::description() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Description)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Description)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_description() const {
  return _impl_.description_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_description() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Description)
  return _impl_.description_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Description)
}

// string Day = 4;
inline void DailyStatisticsMetaInfoV1::clear_day() {
  _impl_.day_.ClearToEmpty();
}
inline const std::string& DailyStatisticsMetaInfoV1::day() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.Day)
  return _internal_day();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DailyStatisticsMetaInfoV1::set_day(ArgT0&& arg0, ArgT... args) {
 
 _impl_.day_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.Day)
}
inline std::string* DailyStatisticsMetaInfoV1::mutable_day() {
  std::string* _s = _internal_mutable_day();
  // @@protoc_insertion_point(field_mutable:proto.DailyStatisticsMetaInfoV1.Day)
  return _s;
}
inline const std::string& DailyStatisticsMetaInfoV1::_internal_day() const {
  return _impl_.day_.Get();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_day(const std::string& value) {
  
  _impl_.day_.Set(value, GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::_internal_mutable_day() {
  
  return _impl_.day_.Mutable(GetArenaForAllocation());
}
inline std::string* DailyStatisticsMetaInfoV1::release_day() {
  // @@protoc_insertion_point(field_release:proto.DailyStatisticsMetaInfoV1.Day)
  return _impl_.day_.Release();
}
inline void DailyStatisticsMetaInfoV1::set_allocated_day(std::string* day) {
  if (day != nullptr) {
    
  } else {
    
  }
  _impl_.day_.SetAllocated(day, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.day_.IsDefault()) {
    _impl_.day_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DailyStatisticsMetaInfoV1.Day)
}

// int32 CreatedProjectNumber = 5;
inline void DailyStatisticsMetaInfoV1::clear_createdprojectnumber() {
  _impl_.createdprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createdprojectnumber() const {
  return _impl_.createdprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createdprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreatedProjectNumber)
  return _internal_createdprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createdprojectnumber(int32_t value) {
  
  _impl_.createdprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createdprojectnumber(int32_t value) {
  _internal_set_createdprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreatedProjectNumber)
}

// int32 CreatedSwcNumber = 6;
inline void DailyStatisticsMetaInfoV1::clear_createdswcnumber() {
  _impl_.createdswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createdswcnumber() const {
  return _impl_.createdswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createdswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreatedSwcNumber)
  return _internal_createdswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createdswcnumber(int32_t value) {
  
  _impl_.createdswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createdswcnumber(int32_t value) {
  _internal_set_createdswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreatedSwcNumber)
}

// int32 CreateSwcNodeNumber = 7;
inline void DailyStatisticsMetaInfoV1::clear_createswcnodenumber() {
  _impl_.createswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_createswcnodenumber() const {
  return _impl_.createswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::createswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.CreateSwcNodeNumber)
  return _internal_createswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_createswcnodenumber(int32_t value) {
  
  _impl_.createswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_createswcnodenumber(int32_t value) {
  _internal_set_createswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.CreateSwcNodeNumber)
}

// int32 DeletedProjectNumber = 8;
inline void DailyStatisticsMetaInfoV1::clear_deletedprojectnumber() {
  _impl_.deletedprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedprojectnumber() const {
  return _impl_.deletedprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedProjectNumber)
  return _internal_deletedprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedprojectnumber(int32_t value) {
  
  _impl_.deletedprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedprojectnumber(int32_t value) {
  _internal_set_deletedprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedProjectNumber)
}

// int32 DeletedSwcNumber = 9;
inline void DailyStatisticsMetaInfoV1::clear_deletedswcnumber() {
  _impl_.deletedswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedswcnumber() const {
  return _impl_.deletedswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedSwcNumber)
  return _internal_deletedswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedswcnumber(int32_t value) {
  
  _impl_.deletedswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedswcnumber(int32_t value) {
  _internal_set_deletedswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedSwcNumber)
}

// int32 DeletedSwcNodeNumber = 10;
inline void DailyStatisticsMetaInfoV1::clear_deletedswcnodenumber() {
  _impl_.deletedswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_deletedswcnodenumber() const {
  return _impl_.deletedswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::deletedswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.DeletedSwcNodeNumber)
  return _internal_deletedswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_deletedswcnodenumber(int32_t value) {
  
  _impl_.deletedswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_deletedswcnodenumber(int32_t value) {
  _internal_set_deletedswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.DeletedSwcNodeNumber)
}

// int32 ModifiedProjectNumber = 11;
inline void DailyStatisticsMetaInfoV1::clear_modifiedprojectnumber() {
  _impl_.modifiedprojectnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedprojectnumber() const {
  return _impl_.modifiedprojectnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedprojectnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedProjectNumber)
  return _internal_modifiedprojectnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedprojectnumber(int32_t value) {
  
  _impl_.modifiedprojectnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedprojectnumber(int32_t value) {
  _internal_set_modifiedprojectnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedProjectNumber)
}

// int32 ModifiedSwcNumber = 12;
inline void DailyStatisticsMetaInfoV1::clear_modifiedswcnumber() {
  _impl_.modifiedswcnumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedswcnumber() const {
  return _impl_.modifiedswcnumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedswcnumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNumber)
  return _internal_modifiedswcnumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedswcnumber(int32_t value) {
  
  _impl_.modifiedswcnumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedswcnumber(int32_t value) {
  _internal_set_modifiedswcnumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNumber)
}

// int32 ModifiedSwcNodeNumber = 13;
inline void DailyStatisticsMetaInfoV1::clear_modifiedswcnodenumber() {
  _impl_.modifiedswcnodenumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_modifiedswcnodenumber() const {
  return _impl_.modifiedswcnodenumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::modifiedswcnodenumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNodeNumber)
  return _internal_modifiedswcnodenumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_modifiedswcnodenumber(int32_t value) {
  
  _impl_.modifiedswcnodenumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_modifiedswcnodenumber(int32_t value) {
  _internal_set_modifiedswcnodenumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ModifiedSwcNodeNumber)
}

// int32 ProjectQueryNumber = 14;
inline void DailyStatisticsMetaInfoV1::clear_projectquerynumber() {
  _impl_.projectquerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_projectquerynumber() const {
  return _impl_.projectquerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::projectquerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ProjectQueryNumber)
  return _internal_projectquerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_projectquerynumber(int32_t value) {
  
  _impl_.projectquerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_projectquerynumber(int32_t value) {
  _internal_set_projectquerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ProjectQueryNumber)
}

// int32 SwcQueryNumber = 15;
inline void DailyStatisticsMetaInfoV1::clear_swcquerynumber() {
  _impl_.swcquerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_swcquerynumber() const {
  return _impl_.swcquerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::swcquerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.SwcQueryNumber)
  return _internal_swcquerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_swcquerynumber(int32_t value) {
  
  _impl_.swcquerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_swcquerynumber(int32_t value) {
  _internal_set_swcquerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.SwcQueryNumber)
}

// int32 NodeQueryNumber = 16;
inline void DailyStatisticsMetaInfoV1::clear_nodequerynumber() {
  _impl_.nodequerynumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_nodequerynumber() const {
  return _impl_.nodequerynumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::nodequerynumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.NodeQueryNumber)
  return _internal_nodequerynumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_nodequerynumber(int32_t value) {
  
  _impl_.nodequerynumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_nodequerynumber(int32_t value) {
  _internal_set_nodequerynumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.NodeQueryNumber)
}

// int32 ActiveUserNumber = 17;
inline void DailyStatisticsMetaInfoV1::clear_activeusernumber() {
  _impl_.activeusernumber_ = 0;
}
inline int32_t DailyStatisticsMetaInfoV1::_internal_activeusernumber() const {
  return _impl_.activeusernumber_;
}
inline int32_t DailyStatisticsMetaInfoV1::activeusernumber() const {
  // @@protoc_insertion_point(field_get:proto.DailyStatisticsMetaInfoV1.ActiveUserNumber)
  return _internal_activeusernumber();
}
inline void DailyStatisticsMetaInfoV1::_internal_set_activeusernumber(int32_t value) {
  
  _impl_.activeusernumber_ = value;
}
inline void DailyStatisticsMetaInfoV1::set_activeusernumber(int32_t value) {
  _internal_set_activeusernumber(value);
  // @@protoc_insertion_point(field_set:proto.DailyStatisticsMetaInfoV1.ActiveUserNumber)
}

// -------------------------------------------------------------------

// UserVerifyInfoV1

// string UserName = 1;
inline void UserVerifyInfoV1::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserVerifyInfoV1::username() const {
  // @@protoc_insertion_point(field_get:proto.UserVerifyInfoV1.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserVerifyInfoV1::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserVerifyInfoV1.UserName)
}
inline std::string* UserVerifyInfoV1::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.UserVerifyInfoV1.UserName)
  return _s;
}
inline const std::string& UserVerifyInfoV1::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserVerifyInfoV1::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::release_username() {
  // @@protoc_insertion_point(field_release:proto.UserVerifyInfoV1.UserName)
  return _impl_.username_.Release();
}
inline void UserVerifyInfoV1::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserVerifyInfoV1.UserName)
}

// string UserToken = 2;
inline void UserVerifyInfoV1::clear_usertoken() {
  _impl_.usertoken_.ClearToEmpty();
}
inline const std::string& UserVerifyInfoV1::usertoken() const {
  // @@protoc_insertion_point(field_get:proto.UserVerifyInfoV1.UserToken)
  return _internal_usertoken();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserVerifyInfoV1::set_usertoken(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usertoken_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserVerifyInfoV1.UserToken)
}
inline std::string* UserVerifyInfoV1::mutable_usertoken() {
  std::string* _s = _internal_mutable_usertoken();
  // @@protoc_insertion_point(field_mutable:proto.UserVerifyInfoV1.UserToken)
  return _s;
}
inline const std::string& UserVerifyInfoV1::_internal_usertoken() const {
  return _impl_.usertoken_.Get();
}
inline void UserVerifyInfoV1::_internal_set_usertoken(const std::string& value) {
  
  _impl_.usertoken_.Set(value, GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::_internal_mutable_usertoken() {
  
  return _impl_.usertoken_.Mutable(GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::release_usertoken() {
  // @@protoc_insertion_point(field_release:proto.UserVerifyInfoV1.UserToken)
  return _impl_.usertoken_.Release();
}
inline void UserVerifyInfoV1::set_allocated_usertoken(std::string* usertoken) {
  if (usertoken != nullptr) {
    
  } else {
    
  }
  _impl_.usertoken_.SetAllocated(usertoken, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usertoken_.IsDefault()) {
    _impl_.usertoken_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserVerifyInfoV1.UserToken)
}

// string UserPassword = 3;
inline void UserVerifyInfoV1::clear_userpassword() {
  _impl_.userpassword_.ClearToEmpty();
}
inline const std::string& UserVerifyInfoV1::userpassword() const {
  // @@protoc_insertion_point(field_get:proto.UserVerifyInfoV1.UserPassword)
  return _internal_userpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserVerifyInfoV1::set_userpassword(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userpassword_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserVerifyInfoV1.UserPassword)
}
inline std::string* UserVerifyInfoV1::mutable_userpassword() {
  std::string* _s = _internal_mutable_userpassword();
  // @@protoc_insertion_point(field_mutable:proto.UserVerifyInfoV1.UserPassword)
  return _s;
}
inline const std::string& UserVerifyInfoV1::_internal_userpassword() const {
  return _impl_.userpassword_.Get();
}
inline void UserVerifyInfoV1::_internal_set_userpassword(const std::string& value) {
  
  _impl_.userpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::_internal_mutable_userpassword() {
  
  return _impl_.userpassword_.Mutable(GetArenaForAllocation());
}
inline std::string* UserVerifyInfoV1::release_userpassword() {
  // @@protoc_insertion_point(field_release:proto.UserVerifyInfoV1.UserPassword)
  return _impl_.userpassword_.Release();
}
inline void UserVerifyInfoV1::set_allocated_userpassword(std::string* userpassword) {
  if (userpassword != nullptr) {
    
  } else {
    
  }
  _impl_.userpassword_.SetAllocated(userpassword, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userpassword_.IsDefault()) {
    _impl_.userpassword_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserVerifyInfoV1.UserPassword)
}

// -------------------------------------------------------------------

// RequestMetaInfoV1

// string ApiVersion = 1;
inline void RequestMetaInfoV1::clear_apiversion() {
  _impl_.apiversion_.ClearToEmpty();
}
inline const std::string& RequestMetaInfoV1::apiversion() const {
  // @@protoc_insertion_point(field_get:proto.RequestMetaInfoV1.ApiVersion)
  return _internal_apiversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMetaInfoV1::set_apiversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apiversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.RequestMetaInfoV1.ApiVersion)
}
inline std::string* RequestMetaInfoV1::mutable_apiversion() {
  std::string* _s = _internal_mutable_apiversion();
  // @@protoc_insertion_point(field_mutable:proto.RequestMetaInfoV1.ApiVersion)
  return _s;
}
inline const std::string& RequestMetaInfoV1::_internal_apiversion() const {
  return _impl_.apiversion_.Get();
}
inline void RequestMetaInfoV1::_internal_set_apiversion(const std::string& value) {
  
  _impl_.apiversion_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestMetaInfoV1::_internal_mutable_apiversion() {
  
  return _impl_.apiversion_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestMetaInfoV1::release_apiversion() {
  // @@protoc_insertion_point(field_release:proto.RequestMetaInfoV1.ApiVersion)
  return _impl_.apiversion_.Release();
}
inline void RequestMetaInfoV1::set_allocated_apiversion(std::string* apiversion) {
  if (apiversion != nullptr) {
    
  } else {
    
  }
  _impl_.apiversion_.SetAllocated(apiversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apiversion_.IsDefault()) {
    _impl_.apiversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.RequestMetaInfoV1.ApiVersion)
}

// -------------------------------------------------------------------

// ResponseMetaInfoV1

// bool Status = 1;
inline void ResponseMetaInfoV1::clear_status() {
  _impl_.status_ = false;
}
inline bool ResponseMetaInfoV1::_internal_status() const {
  return _impl_.status_;
}
inline bool ResponseMetaInfoV1::status() const {
  // @@protoc_insertion_point(field_get:proto.ResponseMetaInfoV1.Status)
  return _internal_status();
}
inline void ResponseMetaInfoV1::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ResponseMetaInfoV1::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:proto.ResponseMetaInfoV1.Status)
}

// string Id = 2;
inline void ResponseMetaInfoV1::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ResponseMetaInfoV1::id() const {
  // @@protoc_insertion_point(field_get:proto.ResponseMetaInfoV1.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMetaInfoV1::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ResponseMetaInfoV1.Id)
}
inline std::string* ResponseMetaInfoV1::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:proto.ResponseMetaInfoV1.Id)
  return _s;
}
inline const std::string& ResponseMetaInfoV1::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ResponseMetaInfoV1::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMetaInfoV1::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMetaInfoV1::release_id() {
  // @@protoc_insertion_point(field_release:proto.ResponseMetaInfoV1.Id)
  return _impl_.id_.Release();
}
inline void ResponseMetaInfoV1::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ResponseMetaInfoV1.Id)
}

// string Message = 3;
inline void ResponseMetaInfoV1::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ResponseMetaInfoV1::message() const {
  // @@protoc_insertion_point(field_get:proto.ResponseMetaInfoV1.Message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMetaInfoV1::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ResponseMetaInfoV1.Message)
}
inline std::string* ResponseMetaInfoV1::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.ResponseMetaInfoV1.Message)
  return _s;
}
inline const std::string& ResponseMetaInfoV1::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ResponseMetaInfoV1::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ResponseMetaInfoV1::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ResponseMetaInfoV1::release_message() {
  // @@protoc_insertion_point(field_release:proto.ResponseMetaInfoV1.Message)
  return _impl_.message_.Release();
}
inline void ResponseMetaInfoV1::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ResponseMetaInfoV1.Message)
}

// -------------------------------------------------------------------

// SwcAttachmentAnoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcAttachmentAnoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcAttachmentAnoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcAttachmentAnoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcAttachmentAnoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcAttachmentAnoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentAnoV1.Base)
  return _internal_base();
}
inline void SwcAttachmentAnoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcAttachmentAnoV1.Base)
}
inline ::proto::MetaInfoBase* SwcAttachmentAnoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcAttachmentAnoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentAnoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcAttachmentAnoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcAttachmentAnoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentAnoV1.Base)
  return _msg;
}
inline void SwcAttachmentAnoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentAnoV1.Base)
}

// string APOFILE = 2;
inline void SwcAttachmentAnoV1::clear_apofile() {
  _impl_.apofile_.ClearToEmpty();
}
inline const std::string& SwcAttachmentAnoV1::apofile() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentAnoV1.APOFILE)
  return _internal_apofile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentAnoV1::set_apofile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apofile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentAnoV1.APOFILE)
}
inline std::string* SwcAttachmentAnoV1::mutable_apofile() {
  std::string* _s = _internal_mutable_apofile();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentAnoV1.APOFILE)
  return _s;
}
inline const std::string& SwcAttachmentAnoV1::_internal_apofile() const {
  return _impl_.apofile_.Get();
}
inline void SwcAttachmentAnoV1::_internal_set_apofile(const std::string& value) {
  
  _impl_.apofile_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoV1::_internal_mutable_apofile() {
  
  return _impl_.apofile_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoV1::release_apofile() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentAnoV1.APOFILE)
  return _impl_.apofile_.Release();
}
inline void SwcAttachmentAnoV1::set_allocated_apofile(std::string* apofile) {
  if (apofile != nullptr) {
    
  } else {
    
  }
  _impl_.apofile_.SetAllocated(apofile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apofile_.IsDefault()) {
    _impl_.apofile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentAnoV1.APOFILE)
}

// string SWCFILE = 3;
inline void SwcAttachmentAnoV1::clear_swcfile() {
  _impl_.swcfile_.ClearToEmpty();
}
inline const std::string& SwcAttachmentAnoV1::swcfile() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentAnoV1.SWCFILE)
  return _internal_swcfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentAnoV1::set_swcfile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentAnoV1.SWCFILE)
}
inline std::string* SwcAttachmentAnoV1::mutable_swcfile() {
  std::string* _s = _internal_mutable_swcfile();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentAnoV1.SWCFILE)
  return _s;
}
inline const std::string& SwcAttachmentAnoV1::_internal_swcfile() const {
  return _impl_.swcfile_.Get();
}
inline void SwcAttachmentAnoV1::_internal_set_swcfile(const std::string& value) {
  
  _impl_.swcfile_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoV1::_internal_mutable_swcfile() {
  
  return _impl_.swcfile_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentAnoV1::release_swcfile() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentAnoV1.SWCFILE)
  return _impl_.swcfile_.Release();
}
inline void SwcAttachmentAnoV1::set_allocated_swcfile(std::string* swcfile) {
  if (swcfile != nullptr) {
    
  } else {
    
  }
  _impl_.swcfile_.SetAllocated(swcfile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcfile_.IsDefault()) {
    _impl_.swcfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentAnoV1.SWCFILE)
}

// -------------------------------------------------------------------

// SwcAttachmentApoV1

// .proto.MetaInfoBase Base = 1;
inline bool SwcAttachmentApoV1::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool SwcAttachmentApoV1::has_base() const {
  return _internal_has_base();
}
inline void SwcAttachmentApoV1::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
inline const ::proto::MetaInfoBase& SwcAttachmentApoV1::_internal_base() const {
  const ::proto::MetaInfoBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::MetaInfoBase&>(
      ::proto::_MetaInfoBase_default_instance_);
}
inline const ::proto::MetaInfoBase& SwcAttachmentApoV1::base() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Base)
  return _internal_base();
}
inline void SwcAttachmentApoV1::unsafe_arena_set_allocated_base(
    ::proto::MetaInfoBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SwcAttachmentApoV1.Base)
}
inline ::proto::MetaInfoBase* SwcAttachmentApoV1::release_base() {
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::MetaInfoBase* SwcAttachmentApoV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentApoV1.Base)
  
  ::proto::MetaInfoBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::proto::MetaInfoBase* SwcAttachmentApoV1::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::MetaInfoBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::proto::MetaInfoBase* SwcAttachmentApoV1::mutable_base() {
  ::proto::MetaInfoBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentApoV1.Base)
  return _msg;
}
inline void SwcAttachmentApoV1::set_allocated_base(::proto::MetaInfoBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentApoV1.Base)
}

// int32 N = 2;
inline void SwcAttachmentApoV1::clear_n() {
  _impl_.n_ = 0;
}
inline int32_t SwcAttachmentApoV1::_internal_n() const {
  return _impl_.n_;
}
inline int32_t SwcAttachmentApoV1::n() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.N)
  return _internal_n();
}
inline void SwcAttachmentApoV1::_internal_set_n(int32_t value) {
  
  _impl_.n_ = value;
}
inline void SwcAttachmentApoV1::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.N)
}

// string Orderinfo = 3;
inline void SwcAttachmentApoV1::clear_orderinfo() {
  _impl_.orderinfo_.ClearToEmpty();
}
inline const std::string& SwcAttachmentApoV1::orderinfo() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Orderinfo)
  return _internal_orderinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentApoV1::set_orderinfo(ArgT0&& arg0, ArgT... args) {
 
 _impl_.orderinfo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Orderinfo)
}
inline std::string* SwcAttachmentApoV1::mutable_orderinfo() {
  std::string* _s = _internal_mutable_orderinfo();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentApoV1.Orderinfo)
  return _s;
}
inline const std::string& SwcAttachmentApoV1::_internal_orderinfo() const {
  return _impl_.orderinfo_.Get();
}
inline void SwcAttachmentApoV1::_internal_set_orderinfo(const std::string& value) {
  
  _impl_.orderinfo_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::_internal_mutable_orderinfo() {
  
  return _impl_.orderinfo_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::release_orderinfo() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentApoV1.Orderinfo)
  return _impl_.orderinfo_.Release();
}
inline void SwcAttachmentApoV1::set_allocated_orderinfo(std::string* orderinfo) {
  if (orderinfo != nullptr) {
    
  } else {
    
  }
  _impl_.orderinfo_.SetAllocated(orderinfo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.orderinfo_.IsDefault()) {
    _impl_.orderinfo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentApoV1.Orderinfo)
}

// string Name = 4;
inline void SwcAttachmentApoV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SwcAttachmentApoV1::name() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentApoV1::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Name)
}
inline std::string* SwcAttachmentApoV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentApoV1.Name)
  return _s;
}
inline const std::string& SwcAttachmentApoV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SwcAttachmentApoV1::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::release_name() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentApoV1.Name)
  return _impl_.name_.Release();
}
inline void SwcAttachmentApoV1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentApoV1.Name)
}

// string Comment = 5;
inline void SwcAttachmentApoV1::clear_comment() {
  _impl_.comment_.ClearToEmpty();
}
inline const std::string& SwcAttachmentApoV1::comment() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcAttachmentApoV1::set_comment(ArgT0&& arg0, ArgT... args) {
 
 _impl_.comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Comment)
}
inline std::string* SwcAttachmentApoV1::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:proto.SwcAttachmentApoV1.Comment)
  return _s;
}
inline const std::string& SwcAttachmentApoV1::_internal_comment() const {
  return _impl_.comment_.Get();
}
inline void SwcAttachmentApoV1::_internal_set_comment(const std::string& value) {
  
  _impl_.comment_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::_internal_mutable_comment() {
  
  return _impl_.comment_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcAttachmentApoV1::release_comment() {
  // @@protoc_insertion_point(field_release:proto.SwcAttachmentApoV1.Comment)
  return _impl_.comment_.Release();
}
inline void SwcAttachmentApoV1::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  _impl_.comment_.SetAllocated(comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.comment_.IsDefault()) {
    _impl_.comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcAttachmentApoV1.Comment)
}

// float Z = 6;
inline void SwcAttachmentApoV1::clear_z() {
  _impl_.z_ = 0;
}
inline float SwcAttachmentApoV1::_internal_z() const {
  return _impl_.z_;
}
inline float SwcAttachmentApoV1::z() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Z)
  return _internal_z();
}
inline void SwcAttachmentApoV1::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void SwcAttachmentApoV1::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Z)
}

// float X = 7;
inline void SwcAttachmentApoV1::clear_x() {
  _impl_.x_ = 0;
}
inline float SwcAttachmentApoV1::_internal_x() const {
  return _impl_.x_;
}
inline float SwcAttachmentApoV1::x() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.X)
  return _internal_x();
}
inline void SwcAttachmentApoV1::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void SwcAttachmentApoV1::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.X)
}

// float Y = 8;
inline void SwcAttachmentApoV1::clear_y() {
  _impl_.y_ = 0;
}
inline float SwcAttachmentApoV1::_internal_y() const {
  return _impl_.y_;
}
inline float SwcAttachmentApoV1::y() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Y)
  return _internal_y();
}
inline void SwcAttachmentApoV1::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void SwcAttachmentApoV1::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Y)
}

// float Pixmax = 9;
inline void SwcAttachmentApoV1::clear_pixmax() {
  _impl_.pixmax_ = 0;
}
inline float SwcAttachmentApoV1::_internal_pixmax() const {
  return _impl_.pixmax_;
}
inline float SwcAttachmentApoV1::pixmax() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Pixmax)
  return _internal_pixmax();
}
inline void SwcAttachmentApoV1::_internal_set_pixmax(float value) {
  
  _impl_.pixmax_ = value;
}
inline void SwcAttachmentApoV1::set_pixmax(float value) {
  _internal_set_pixmax(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Pixmax)
}

// float Intensity = 10;
inline void SwcAttachmentApoV1::clear_intensity() {
  _impl_.intensity_ = 0;
}
inline float SwcAttachmentApoV1::_internal_intensity() const {
  return _impl_.intensity_;
}
inline float SwcAttachmentApoV1::intensity() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Intensity)
  return _internal_intensity();
}
inline void SwcAttachmentApoV1::_internal_set_intensity(float value) {
  
  _impl_.intensity_ = value;
}
inline void SwcAttachmentApoV1::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Intensity)
}

// float Sdev = 11;
inline void SwcAttachmentApoV1::clear_sdev() {
  _impl_.sdev_ = 0;
}
inline float SwcAttachmentApoV1::_internal_sdev() const {
  return _impl_.sdev_;
}
inline float SwcAttachmentApoV1::sdev() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Sdev)
  return _internal_sdev();
}
inline void SwcAttachmentApoV1::_internal_set_sdev(float value) {
  
  _impl_.sdev_ = value;
}
inline void SwcAttachmentApoV1::set_sdev(float value) {
  _internal_set_sdev(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Sdev)
}

// float Volsize = 12;
inline void SwcAttachmentApoV1::clear_volsize() {
  _impl_.volsize_ = 0;
}
inline float SwcAttachmentApoV1::_internal_volsize() const {
  return _impl_.volsize_;
}
inline float SwcAttachmentApoV1::volsize() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Volsize)
  return _internal_volsize();
}
inline void SwcAttachmentApoV1::_internal_set_volsize(float value) {
  
  _impl_.volsize_ = value;
}
inline void SwcAttachmentApoV1::set_volsize(float value) {
  _internal_set_volsize(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Volsize)
}

// float Mass = 13;
inline void SwcAttachmentApoV1::clear_mass() {
  _impl_.mass_ = 0;
}
inline float SwcAttachmentApoV1::_internal_mass() const {
  return _impl_.mass_;
}
inline float SwcAttachmentApoV1::mass() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.Mass)
  return _internal_mass();
}
inline void SwcAttachmentApoV1::_internal_set_mass(float value) {
  
  _impl_.mass_ = value;
}
inline void SwcAttachmentApoV1::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.Mass)
}

// int32 ColorR = 14;
inline void SwcAttachmentApoV1::clear_colorr() {
  _impl_.colorr_ = 0;
}
inline int32_t SwcAttachmentApoV1::_internal_colorr() const {
  return _impl_.colorr_;
}
inline int32_t SwcAttachmentApoV1::colorr() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.ColorR)
  return _internal_colorr();
}
inline void SwcAttachmentApoV1::_internal_set_colorr(int32_t value) {
  
  _impl_.colorr_ = value;
}
inline void SwcAttachmentApoV1::set_colorr(int32_t value) {
  _internal_set_colorr(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.ColorR)
}

// int32 ColorG = 15;
inline void SwcAttachmentApoV1::clear_colorg() {
  _impl_.colorg_ = 0;
}
inline int32_t SwcAttachmentApoV1::_internal_colorg() const {
  return _impl_.colorg_;
}
inline int32_t SwcAttachmentApoV1::colorg() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.ColorG)
  return _internal_colorg();
}
inline void SwcAttachmentApoV1::_internal_set_colorg(int32_t value) {
  
  _impl_.colorg_ = value;
}
inline void SwcAttachmentApoV1::set_colorg(int32_t value) {
  _internal_set_colorg(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.ColorG)
}

// int32 ColorB = 16;
inline void SwcAttachmentApoV1::clear_colorb() {
  _impl_.colorb_ = 0;
}
inline int32_t SwcAttachmentApoV1::_internal_colorb() const {
  return _impl_.colorb_;
}
inline int32_t SwcAttachmentApoV1::colorb() const {
  // @@protoc_insertion_point(field_get:proto.SwcAttachmentApoV1.ColorB)
  return _internal_colorb();
}
inline void SwcAttachmentApoV1::_internal_set_colorb(int32_t value) {
  
  _impl_.colorb_ = value;
}
inline void SwcAttachmentApoV1::set_colorb(int32_t value) {
  _internal_set_colorb(value);
  // @@protoc_insertion_point(field_set:proto.SwcAttachmentApoV1.ColorB)
}

// -------------------------------------------------------------------

// SwcUuidName

// string SwcUuid = 1;
inline void SwcUuidName::clear_swcuuid() {
  _impl_.swcuuid_.ClearToEmpty();
}
inline const std::string& SwcUuidName::swcuuid() const {
  // @@protoc_insertion_point(field_get:proto.SwcUuidName.SwcUuid)
  return _internal_swcuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcUuidName::set_swcuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcUuidName.SwcUuid)
}
inline std::string* SwcUuidName::mutable_swcuuid() {
  std::string* _s = _internal_mutable_swcuuid();
  // @@protoc_insertion_point(field_mutable:proto.SwcUuidName.SwcUuid)
  return _s;
}
inline const std::string& SwcUuidName::_internal_swcuuid() const {
  return _impl_.swcuuid_.Get();
}
inline void SwcUuidName::_internal_set_swcuuid(const std::string& value) {
  
  _impl_.swcuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcUuidName::_internal_mutable_swcuuid() {
  
  return _impl_.swcuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcUuidName::release_swcuuid() {
  // @@protoc_insertion_point(field_release:proto.SwcUuidName.SwcUuid)
  return _impl_.swcuuid_.Release();
}
inline void SwcUuidName::set_allocated_swcuuid(std::string* swcuuid) {
  if (swcuuid != nullptr) {
    
  } else {
    
  }
  _impl_.swcuuid_.SetAllocated(swcuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcuuid_.IsDefault()) {
    _impl_.swcuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcUuidName.SwcUuid)
}

// string SwcName = 2;
inline void SwcUuidName::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& SwcUuidName::swcname() const {
  // @@protoc_insertion_point(field_get:proto.SwcUuidName.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwcUuidName::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.SwcUuidName.SwcName)
}
inline std::string* SwcUuidName::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.SwcUuidName.SwcName)
  return _s;
}
inline const std::string& SwcUuidName::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void SwcUuidName::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* SwcUuidName::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* SwcUuidName::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.SwcUuidName.SwcName)
  return _impl_.swcname_.Release();
}
inline void SwcUuidName::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.SwcUuidName.SwcName)
}

// -------------------------------------------------------------------

// NodeNParent

// string NodeUuid = 1;
inline void NodeNParent::clear_nodeuuid() {
  _impl_.nodeuuid_.ClearToEmpty();
}
inline const std::string& NodeNParent::nodeuuid() const {
  // @@protoc_insertion_point(field_get:proto.NodeNParent.NodeUuid)
  return _internal_nodeuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeNParent::set_nodeuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodeuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.NodeNParent.NodeUuid)
}
inline std::string* NodeNParent::mutable_nodeuuid() {
  std::string* _s = _internal_mutable_nodeuuid();
  // @@protoc_insertion_point(field_mutable:proto.NodeNParent.NodeUuid)
  return _s;
}
inline const std::string& NodeNParent::_internal_nodeuuid() const {
  return _impl_.nodeuuid_.Get();
}
inline void NodeNParent::_internal_set_nodeuuid(const std::string& value) {
  
  _impl_.nodeuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeNParent::_internal_mutable_nodeuuid() {
  
  return _impl_.nodeuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeNParent::release_nodeuuid() {
  // @@protoc_insertion_point(field_release:proto.NodeNParent.NodeUuid)
  return _impl_.nodeuuid_.Release();
}
inline void NodeNParent::set_allocated_nodeuuid(std::string* nodeuuid) {
  if (nodeuuid != nullptr) {
    
  } else {
    
  }
  _impl_.nodeuuid_.SetAllocated(nodeuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodeuuid_.IsDefault()) {
    _impl_.nodeuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.NodeNParent.NodeUuid)
}

// int32 N = 2;
inline void NodeNParent::clear_n() {
  _impl_.n_ = 0;
}
inline int32_t NodeNParent::_internal_n() const {
  return _impl_.n_;
}
inline int32_t NodeNParent::n() const {
  // @@protoc_insertion_point(field_get:proto.NodeNParent.N)
  return _internal_n();
}
inline void NodeNParent::_internal_set_n(int32_t value) {
  
  _impl_.n_ = value;
}
inline void NodeNParent::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:proto.NodeNParent.N)
}

// int32 Parent = 3;
inline void NodeNParent::clear_parent() {
  _impl_.parent_ = 0;
}
inline int32_t NodeNParent::_internal_parent() const {
  return _impl_.parent_;
}
inline int32_t NodeNParent::parent() const {
  // @@protoc_insertion_point(field_get:proto.NodeNParent.Parent)
  return _internal_parent();
}
inline void NodeNParent::_internal_set_parent(int32_t value) {
  
  _impl_.parent_ = value;
}
inline void NodeNParent::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:proto.NodeNParent.Parent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::IncrementOperationV1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::IncrementOperationV1>() {
  return ::proto::IncrementOperationV1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2fMessage_2eproto
